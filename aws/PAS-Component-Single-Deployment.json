{
   "Resources":{
      "LogGroup":{
         "Type":"AWS::Logs::LogGroup",
         "Properties":{
            "RetentionInDays":30
         },
         "DeletionPolicy":"Retain"
      },
      "LambdaDeployRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Policies":[
               {
                  "PolicyName":"CloudWatch",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "logs:CreateLogGroup",
                              "logs:CreateLogStream",
                              "logs:DescribeLogGroups",
                              "logs:DescribeLogStreams",
                              "logs:PutLogEvents"
                           ],
                           "Resource":[
                              "*"
                           ]
                        }
                     ]
                  }
               },
               {
                  "PolicyName":"SSM",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "ssm:PutParameter",
                              "ssm:DeleteParameter"
                           ],
                           "Resource":[
                              {
                                 "Fn::Sub":"arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                              }
                           ]
                        }
                     ]
                  }
               }
            ]
         },
         "Condition":"EULACondition"
      },
      "LambdaLogDenyRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "lambda.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            },
            "Policies": [
               {
                  "PolicyName": "denyLambdaLogging",
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [
                        {
                           "Effect": "Deny",
                           "Action": [
                              "logs:*"
                           ],
                           "Resource": "*"
                        }
                     ]
                  }
               }
            ]
         }
      },
      "StorePasswordLambda":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Description":"Saves given password to parameter store as SecureString",
            "Code":{
               "ZipFile":{
                  "Fn::Join":[
                     "\n",
                     [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def storePassword(name, value):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.put_parameter(",
                        "        Name = name,",
                        "        Value = value,",
                        "        Type = 'SecureString'",
                        "    )",
                        "",
                        "def deletePassword(name):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.delete_parameter(",
                        "        Name = name",
                        "    )",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "",
                        "    if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:",
                        "            print 'The property Password must not be empty'",
                        "            return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)",
                        "",
                        "    try:",
                        "        if event['RequestType'] == 'Delete':",
                        "            deletePassword(physicalResourceId)",
                        "            print 'Password successfully deleted. Id='+physicalResourceId",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "        if event['RequestType'] == 'Create':",
                        "            storePassword(physicalResourceId, event['ResourceProperties']['Password'])",
                        "            print 'The store parameter has been created. Id='+physicalResourceId",
                        "            response = { 'SsmId': physicalResourceId }",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)",
                        "",
						"    except client.exceptions.ParameterNotFound:",
                        "        print 'Item already removed'",
                        "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime":"python2.7",
            "Handler":"index.lambda_handler",
            "Role":{
               "Fn::GetAtt":[
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         },
         "Condition":"EULACondition"
      },
      "DeletePasswordLambda":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Description":"Delete password from parameter store",
            "Code":{
               "ZipFile":{
                  "Fn::Join":[
                     "\n",
                     [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def deletePassword(name):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.delete_parameter(",
                        "        Name = name",
                        "    )",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "    ",
                        "    try:",
                        "        if event['RequestType'] == 'Create':",
                        "            deletePassword(event['ResourceProperties']['key'])",
                        "            print 'Password succesfully deleted. Id='+event['ResourceProperties']['key']",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "        if event['RequestType'] == 'Delete':",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "    except client.exceptions.ParameterNotFound:",
                        "        print 'Item already removed'",
                        "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime":"python2.7",
            "Handler":"index.lambda_handler",
            "Role":{
               "Fn::GetAtt":[
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         },
         "Condition":"EULACondition"
      },
      "StoreAdminPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "StorePasswordLambda",
                  "Arn"
               ]
            },
            "Password":{
               "Ref":"VaultAdminPassword"
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole"
         ]
      },
      "CleanAdminPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Version":"1.0",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "DeletePasswordLambda",
                  "Arn"
               ]
            },
            "key":{
               "Fn::GetAtt":[
                  "StoreAdminPassword",
                  "SsmId"
               ]
            },
            "dummyDependency":{
               "Fn::If":[
                  "CreateCPMCondition",
                  {
                     "Fn::GetAtt":[
                        "CPMMachine",
                        "PrivateIp"
                     ]
                  },
                  {
                     "Fn::If":[
                        "CreatePVWACondition",
                        {
                           "Fn::GetAtt":[
                              "PVWAMachine",
                              "PrivateIp"
                           ]
                        },
                        {
                           "Fn::If":[
                              "CreatePSMCondition",
                              {
                                 "Fn::GetAtt":[
                                    "PSMMachine",
                                    "PrivateIp"
                                 ]
                              },
                              {
                                 "Fn::GetAtt":[
                                    "PSMPMachine",
                                    "PrivateIp"
                                 ]
                              }
                           ]
                        }
                     ]
                  }
               ]
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole",
            "StorePasswordLambda"
         ]
      },
      "RandomStringLambdaFunction": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
             "Code": {
                 "ZipFile": "const response = require(\"cfn-response\");\nconst randomString = (length, chars) => {\n    var result = '';\n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\nexports.handler = (event, context) =>{\n\n  const str = randomString(1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') + randomString(1, 'abcdefghijklmnopqrstuvwxyz') + randomString(3, '0123456789') + randomString(11, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  const responseData = {RandomString: str};\n  response.send(event, context, response.SUCCESS, responseData);\n\n};\n"
             },
             "Handler": "index.handler",
             "Runtime": "nodejs8.10",
             "Role": {
                 "Fn::GetAtt": [
                     "LambdaLogDenyRole",
                     "Arn"
                 ]
             },
             "MemorySize": 128,
             "Timeout": 20
         }
      },
      "ComponentSecretString": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "RandomStringLambdaFunction",
                  "Arn"
               ]
            }
         }
      },
      "ComponentInstanceProfile":{
         "Type":"AWS::IAM::InstanceProfile",
         "Properties":{
            "Roles":[
               {
                  "Ref":"ComponentInstanceRole"
               }
            ]
         },
         "Condition":"EULACondition"
      },
      "ComponentInstanceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/",
            "ManagedPolicyArns":[
               {
                  "Fn::Sub":"arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
               }
            ],
            "Policies":[
               {
                  "PolicyName":"LogRolePolicy",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "logs:CreateLogGroup",
                              "logs:CreateLogStream",
                              "logs:PutLogEvents",
                              "logs:DescribeLogStreams"
                           ],
                           "Resource":[
                              {
                                 "Fn::Sub":"arn:${AWS::Partition}:logs:*:*:*"
                              }
                           ]
                        }
                     ]
                  }
               }
            ]
         },
         "Condition":"EULACondition"
      },
      "CPMMachine":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ComponentInstanceName"
                  }
               }
            ],
            "SecurityGroupIds":{
               "Ref":"ComponentInstanceSecurityGroups"
            },
            "SubnetId":{
               "Ref":"ComponentInstanceSubnetId"
            },
            "ImageId":{
               "Fn::FindInMap":[
                  "RegionMap",
                  {
                     "Ref":"AWS::Region"
                  },
                  "CPM"
               ]
            },
            "InstanceType":{
               "Ref":"ComponentInstanceType"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r CPMMachine",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        "  --resource CPMMachine",
                        "  --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "IamInstanceProfile":{
               "Ref":"ComponentInstanceProfile"
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "config":{
                  "files":{
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\Set-LocalAccountPassword.ps1": {
                        "content": {
                            "Fn::Join": [
                                "", [
                                    "[CmdletBinding()]\n",
                                    "Param(\n",
                                    "  [Parameter(Mandatory=$true)][string]$Username,\n",
                                    "  [Parameter(Mandatory=$true)][string]$Password\n",
                                    ")\n",
                                    "$adsi = [ADSI]\"WinNT://$env:COMPUTERNAME\"\n",
                                    "$existing = $adsi.Children | where {$_.SchemaClassName -eq 'user' -and $_.Name -eq $Username }\n",
                                    "if ($existing -eq $null) {\n",
                                    "    Write-Error \"User $Username does not exist\"\n",
                                    "    return\n",
                                    "}\n",
                                    "$existing.SetPassword($Password)"
                                ]
                            ]
                        }
                     },
                     "C:\\Set-ServiceLogon.ps1": {
                        "content": {
                            "Fn::Join": [
                                "", [
                                    "[CmdletBinding()]\n",
                                    "Param(\n",
                                    "  [Parameter(Mandatory=$true)][string]$Service,\n",
                                    "  [Parameter(Mandatory=$true)][string]$Password\n",
                                    ")\n",
                                    "$filter = 'Name=' + \"'\" + $Service + \"'\" + ''\n",
                                    "$s = Get-WMIObject -class Win32_Service -Filter $filter\n",
                                    "$s.Change($Null,$Null,$Null,$Null,$Null,$Null,$Null,$Password,$Null,$Null,$Null)\n"
                                ]
                            ]
                        }
                     },
                     "C:\\deploy.py":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "p = subprocess.Popen([",
								 "'powershell.exe',",
                                 "'C:\\\\CyberArk\\\\CloudRegisterToVault.ps1 ",
                                 "-CPM ",
                                 "-CPMVaultIP \"",
                                 {
                                    "Ref":"VaultPrivateIP"
                                 },
                                 {
                                    "Fn::If":[
                                       "DRValueEmpty",
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                ""
                                             ]
                                          ]
                                       },
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                ",",
                                                {
                                                   "Ref":"DRPrivateIP"
                                                }
                                             ]
                                          ]
                                       }
                                    ]
                                 },
                                 "\" -CPMVaultPort ",
                                 "1858 ",
                                 "-CPMVaultUser ",
                                 {
                                    "Ref":"VaultAdminUser"
                                 },
                                 " ",
                                 "-CPMVaultPassword '+",
                                 "adminp",
								 "],",
								 "stdout=sys.stdout)"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "AmazonSSMAgent":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands":{
                     "01-restartSSM":{
                        "command":"powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion":"30",
                        "ignoreErrors":"true"
                     },
                     "02-deploy":{
                        "command":"C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "03-configureCPMUser": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-LocalAccountPassword.ps1 -Username \"PasswordManagerUser\" -Password \"", { "Fn::GetAtt": ["ComponentSecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "04-configureCPMService": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-ServiceLogon.ps1 -Service \"CyberArk Password Manager\" -Password \"", { "Fn::GetAtt": ["ComponentSecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "05-configureCPMScannerService": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-ServiceLogon.ps1 -Service \"CyberArk Central Policy Manager Scanner\" -Password \"", { "Fn::GetAtt": ["ComponentSecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "06-CPMserviceConfig":{
                        "command":"sc config \"CyberArk Password Manager\" start=auto",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "07-CPMSserviceConfig":{
                        "command":"sc config \"CyberArk Central Policy Manager Scanner\" start=auto",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "08-ChangeHostName":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName ",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 " -Force -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever",
                        "ignoreErrors":"false"
                     },
                     "99-SignalCompletion":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "         --resource CPMMachine ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Condition":"CreateCPMCondition",
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT15M"
            }
         },
         "DeletionPolicy":"Retain"
      },
      "PVWAMachine":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ComponentInstanceName"
                  }
               }
            ],
            "SecurityGroupIds":{
               "Ref":"ComponentInstanceSecurityGroups"
            },
            "SubnetId":{
               "Ref":"ComponentInstanceSubnetId"
            },
            "ImageId":{
               "Fn::FindInMap":[
                  "RegionMap",
                  {
                     "Ref":"AWS::Region"
                  },
                  "PVWA"
               ]
            },
            "InstanceType":{
               "Ref":"ComponentInstanceType"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r PVWAMachine",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        "  --resource PVWAMachine",
                        "  --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "IamInstanceProfile":{
               "Ref":"ComponentInstanceProfile"
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "config":{
                  "files":{
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\Set-LocalAccountPassword.ps1": {
                        "content": {
                            "Fn::Join": [
                                "", [
                                    "[CmdletBinding()]\n",
                                    "Param(\n",
                                    "  [Parameter(Mandatory=$true)][string]$Username,\n",
                                    "  [Parameter(Mandatory=$true)][string]$Password\n",
                                    ")\n",
                                    "$adsi = [ADSI]\"WinNT://$env:COMPUTERNAME\"\n",
                                    "$existing = $adsi.Children | where {$_.SchemaClassName -eq 'user' -and $_.Name -eq $Username }\n",
                                    "if ($existing -eq $null) {\n",
                                    "    Write-Error \"User $Username does not exist\"\n",
                                    "    return\n",
                                    "}\n",
                                    "$existing.SetPassword($Password)"
                                ]
                            ]
                        }
                     },
                     "C:\\Set-ServiceLogon.ps1": {
                        "content": {
                            "Fn::Join": [
                                "", [
                                    "[CmdletBinding()]\n",
                                    "Param(\n",
                                    "  [Parameter(Mandatory=$true)][string]$Service,\n",
                                    "  [Parameter(Mandatory=$true)][string]$Password\n",
                                    ")\n",
                                    "$filter = 'Name=' + \"'\" + $Service + \"'\" + ''\n",
                                    "$s = Get-WMIObject -class Win32_Service -Filter $filter\n",
                                    "$s.Change($Null,$Null,$Null,$Null,$Null,$Null,$Null,$Password,$Null,$Null,$Null)\n"
                                ]
                            ]
                        }
                     },
                     "C:\\deploy.py":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "import urllib2\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
								 "inputHostname='",
                                 {"Ref":"PVWAHostName"},
                                 "'\n",
                                 "if not inputHostname:\n",
                                 "\thostname = urllib2.urlopen('http://169.254.169.254/latest/meta-data/hostname').read()\n",
                                 "\tpvwaurl = 'https://{0}/PasswordVault'.format(hostname)\n",
                                 "else:\n",
                                 "\tpvwaurl = 'https://{0}/PasswordVault'.format(inputHostname)\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "p = subprocess.Popen([",
								 "'powershell.exe',",
                                 "'C:\\\\CyberArk\\\\CloudRegisterToVault.ps1 ",
                                 "-PVWA ",
                                 "-PVWAVaultIP \"",
                                 {
                                    "Ref":"VaultPrivateIP"
                                 },
                                 {
                                    "Fn::If":[
                                       "DRValueEmpty",
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                ""
                                             ]
                                          ]
                                       },
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                ",",
                                                {
                                                   "Ref":"DRPrivateIP"
                                                }
                                             ]
                                          ]
                                       }
                                    ]
                                 },
                                 "\" -PVWAVaultPort ",
                                 "1858 ",
                                 "-PVWAVaultUser ",
                                 {
                                    "Ref":"VaultAdminUser"
                                 },
                                 " ",
                                 "-PVWAVaultPassword '+",
                                 "adminp ",
								 "+ ' -PVWAUrl '+",
								 "pvwaurl",
                                 "],",
								 "stdout=sys.stdout)"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "AmazonSSMAgent":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands":{
                     "01-restartSSM":{
                        "command":"powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion":"30",
                        "ignoreErrors":"true"
                     },
                     "02-deploy":{
                        "command":"C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "03-startAppPool":{
                        "command":"powershell -command \"& {&'Import-Module' WebAdministration}\"; \"& {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}\"; \"& {&'Set-ItemProperty' -Path IIS:\\AppPools\\PasswordVaultWebAccessPool -Name autoStart -Value 'true'}\"",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "04-configurePVWAUser": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-LocalAccountPassword.ps1 -Username \"PVWAReportsUser\" -Password \"", { "Fn::GetAtt": ["ComponentSecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "05-configurePVWAService": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-ServiceLogon.ps1 -Service \"CyberArk Scheduled Tasks\" -Password \"", { "Fn::GetAtt": ["ComponentSecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "06-CSTserviceConfig":{
                        "command":"sc config \"CyberArk Scheduled Tasks\" start=auto",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "08-ChangeHostName":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName ",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 " -Force -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever",
                        "ignoreErrors":"false"
                     },
                     "99-SignalCompletion":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "         --resource PVWAMachine ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Condition":"CreatePVWACondition",
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT15M"
            }
         },
         "DeletionPolicy":"Retain"
      },
      "PSMMachine":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ComponentInstanceName"
                  }
               }
            ],
            "SecurityGroupIds":{
               "Ref":"ComponentInstanceSecurityGroups"
            },
            "SubnetId":{
               "Ref":"ComponentInstanceSubnetId"
            },
            "ImageId":{
               "Fn::FindInMap":[
                  "RegionMap",
                  {
                     "Ref":"AWS::Region"
                  },
                  "PSM"
               ]
            },
            "InstanceType":{
               "Ref":"ComponentInstanceType"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r PSMMachine",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        "  --resource PSMMachine",
                        "  --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "IamInstanceProfile":{
               "Ref":"ComponentInstanceProfile"
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "config":{
                  "files":{
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\deploy.py":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "import urllib2\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
								 "p = subprocess.Popen([",
								 "'powershell.exe',",
                                 "'C:\\\\CyberArk\\\\CloudRegisterToVault.ps1 ",
                                 "-PSM ",
                                 "-PSMAcceptEula ",
                                 "Yes ",
                                 "-PSMVaultIP \"",
                                 {
                                    "Ref":"VaultPrivateIP"
                                 },
                                 {
                                    "Fn::If":[
                                       "DRValueEmpty",
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                ""
                                             ]
                                          ]
                                       },
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                ",",
                                                {
                                                   "Ref":"DRPrivateIP"
                                                }
                                             ]
                                          ]
                                       }
                                    ]
                                 },
                                 "\" -PSMVaultPort ",
                                 "1858 ",
                                 "-PSMVaultUser ",
                                 {
                                    "Ref":"VaultAdminUser"
                                 },
                                 " ",
                                 "-PSMVaultPassword '+",
                                 "adminp",
                                 "],",
								 "stdout=sys.stdout)"
								 ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "AmazonSSMAgent":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands":{
                     "01-restartSSM":{
                        "command":"powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion":"30",
                        "ignoreErrors":"true"
                     },
                     "02-deploy":{
                        "command":"C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "03-PSMserviceConfig":{
                        "command":"sc config \"Cyber-Ark Privileged Session Manager\" start=auto",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "04-ChangeHostName":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName ",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 " -Force -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever",
                        "ignoreErrors":"false"
                     },
                     "99-SignalCompletion":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "         --resource PSMMachine ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Condition":"CreatePSMCondition",
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT15M"
            }
         },
         "DeletionPolicy":"Retain"
      },
      "PSMPMachine":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ComponentInstanceName"
                  }
               }
            ],
            "SecurityGroupIds":{
               "Ref":"ComponentInstanceSecurityGroups"
            },
            "SubnetId":{
               "Ref":"ComponentInstanceSubnetId"
            },
            "ImageId":{
               "Fn::FindInMap":[
                  "RegionMap",
                  {
                     "Ref":"AWS::Region"
                  },
                  "PSMP"
               ]
            },
            "InstanceType":{
               "Ref":"ComponentInstanceType"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash -e\n",
                        "/opt/aws/bin/cfn-init -v ",
                        "         --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        "         --resource PSMPMachine ",
                        "         --configsets install_all ",
                        "         --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        "         --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        "         --resource PSMPMachine ",
                        "         --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n"
                     ]
                  ]
               }
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "IamInstanceProfile":{
               "Ref":"ComponentInstanceProfile"
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "install_all":[
                     "install_cfn",
                     "install_logs",
                     "install_psmp"
                  ]
               },
               "install_cfn":{
                  "files":{
                     "/etc/cfn/cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.PSMPMachine.Metadata.AWS::CloudFormation::Init\n",
                                 "action=/opt/aws/bin/cfn-init -v ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "         --resource PSMPMachine ",
                                 "         --configsets install_all ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n",
                                 "runas=root\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "install_logs":{
                  "files":{
                     "/etc/awslogs/awslogs.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[general]\n",
                                 "state_file= /var/awslogs/state/agent-state\n",
                                 "[/var/log/cloud-init.log]\n",
                                 "file = /var/log/cloud-init.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cloud-init.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cloud-init-output.log]\n",
                                 "file = /var/log/cloud-init-output.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cloud-init-output.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cfn-init.log]\n",
                                 "file = /var/log/cfn-init.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cfn-init.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cfn-hup.log]\n",
                                 "file = /var/log/cfn-hup.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cfn-hup.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cfn-wire.log]\n",
                                 "file = /var/log/cfn-wire.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cfn-wire.log\n",
                                 "datetime_format = \n"
                              ]
                           ]
                        },
                        "mode":"000444",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/awslogs/awscli.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[plugins]\n",
                                 "cwlogs = cwlogs\n",
                                 "[default]\n",
                                 "region = ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000444",
                        "owner":"root",
                        "group":"root"
                     }
                  },
                  "commands":{
                     "01_create_state_directory":{
                        "command":"mkdir -p /var/awslogs/state"
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "awslogs":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "/etc/awslogs/awslogs.conf"
                           ]
                        }
                     }
                  }
               },
               "install_psmp":{
                  "files":{
                     "/root/CD-Image/activatePSMP":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "#!/bin/bash -e\n",
                                 "chmod 700 /root/CD-Image/register_and_activation.sh\n",
                                 "temppassword=`aws ssm get-parameter --name ",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 " --region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 " --with-decryption --output text --query Parameter.Value`\n",
                                 "echo Object successfully retrieved from ssm.\n",
                                 "/opt/CARKpsmp/bin/createcredfile /root/CD-Image/user.cred Password -Username ",
                                 {
                                    "Ref":"VaultAdminUser"
                                 },
                                 " -Password $temppassword -Hostname\n",
                                 "echo Credentials file successfully created.\n",
                                 "/root/CD-Image/register_and_activation.sh /root/CD-Image/user.cred ",
                                 {
                                    "Fn::If":[
                                       "DRValueEmpty",
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                {
                                                   "Ref":"VaultPrivateIP"
                                                }
                                             ]
                                          ]
                                       },
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                {
                                                   "Ref":"VaultPrivateIP"
                                                },
                                                ",",
                                                {
                                                   "Ref":"DRPrivateIP"
                                                }
                                             ]
                                          ]
                                       }
                                    ]
                                 },
                                 " $(curl http://169.254.169.254/latest/meta-data/instance-id) y\n"
                              ]
                           ]
                        }
                     }
                  },
                  "commands":{
                     "00-ChangeHostName":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sudo hostname ",
                                 {
                                    "Ref":"ComponentHostName"
                                 }
                              ]
                           ]
                        }
                     },
                     "01-ChangeHostName-chmod-hosts":{
                        "command":"sudo chmod 646 /etc/hosts"
                     },
                     "02-ChangeHostName-sed-hosts1":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sudo sed -i 's/localhost\\./",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 "./g' /etc/hosts"
                              ]
                           ]
                        }
                     },
                     "03-ChangeHostName-sed-hosts2":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sudo sed -i 's/localhost /",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 " /g' /etc/hosts"
                              ]
                           ]
                        }
                     },
                     "04-ChangeHostName-chmod-network":{
                        "command":"sudo chmod 646 /etc/sysconfig/network"
                     },
                     "05-ChangeHostName-sed-network":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sudo sed -i 's/HOSTNAME=localhost.localdomain/HOSTNAME=",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 "/g' /etc/sysconfig/network"
                              ]
                           ]
                        }
                     },
                     "06-ChangeHostName-chmod-hosts-revert":{
                        "command":"sudo chmod 644 /etc/hosts"
                     },
                     "07-ChangeHostName-chmod-network-revert":{
                        "command":"sudo chmod 644 /etc/sysconfig/network"
                     },
                     "08-Chmod":{
                        "command":"sudo chmod 700 /root/CD-Image/activatePSMP"
                     },
                     "09-PSMPdeploy":{
                        "command":"sudo /root/CD-Image/activatePSMP"
                     },
                     "10-ClearData":{
                        "command":"sudo shred -u /root/CD-Image/activatePSMP"
                     },
                     "11-RemoveInstallationFolder":{
                        "command":"sudo rm -rf /root/CD-Image/"
                     },
                     "99-SignalCompletion":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "/opt/aws/bin/cfn-signal -e $? ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "         --resource PSMPMachine ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Condition":"CreatePSMPCondition",
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT10M"
            }
         },
         "DeletionPolicy":"Retain"
      },
      "ComponentInstancesSSMPolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"ComponentInsancesSsmAccess",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "ssm:GetParameter"
                     ],
                     "Resource":[
                        {
                           "Fn::Sub":"arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                        }
                     ]
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"ComponentInstanceRole"
               }
            ]
         },
         "Condition":"EULACondition"
      }
   },
   "Parameters":{
      "EULA":{
         "Type":"String",
         "Description":"I have read and agree to the Terms and Conditions.",
         "AllowedValues":[
            "Accept",
            "Decline"
         ],
         "Default":"Decline"
      },
      "KeyName":{
         "Type":"AWS::EC2::KeyPair::KeyName",
         "Description":"Select an existing Key Pair from your AWS account.",
         "ConstraintDescription":"Can contain only ASCII characters."
      },
      "VaultPrivateIP":{
         "Type":"String",
         "Description":"Enter the IP of the Vault instance."
      },
      "DRPrivateIP":{
         "Type":"String",
         "Description":"Enter the IP of the Vault DR instance. (Optional)"
      },
      "VaultAdminUser":{
         "Type":"String",
         "Description":"Enter the Administrator Vault user.",
         "Default":"Administrator",
         "MinLength":8
      },
      "VaultAdminPassword":{
         "Type":"String",
         "Description":"Enter a password for the Vault Administrator user.",
         "NoEcho":true,
         "MinLength":8
      },
      "ComponentToInstall":{
         "Type":"String",
         "Description":"Choose the Component to install.",
         "AllowedValues":[
            "CPM",
            "PVWA",
            "PSM",
            "PSMP"
         ],
         "Default":"CPM"
      },
      "ComponentInstanceName":{
         "Type":"String",
         "Description":"Enter a name for the PAS Component instance.",
         "Default":"Components"
      },
      "ComponentHostName":{
         "Type":"String",
         "Description":"Enter the host name for the PAS Component instance."
      },
      "ComponentInstanceType":{
         "Type":"String",
         "Description":"Select the instance type of the Component instance.",
         "AllowedValues":[
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge"
         ],
         "Default":"m4.large"
      },
      "ComponentInstanceSecurityGroups":{
         "Type":"List<AWS::EC2::SecurityGroup::Id>",
         "Description":"Assign Security Groups to the Component instance."
      },
      "ComponentInstanceSubnetId":{
         "Type":"AWS::EC2::Subnet::Id",
         "Description":"Select the Subnet Id where the Component instance will reside."
      },
      "PVWAHostName":{
         "Type":"String",
         "Description":"IP or FQDN of PVWA server"
      }
   },
   "Conditions":{
      "EULACondition":{
         "Fn::Equals":[
            "Accept",
            {
               "Ref":"EULA"
            }
         ]
      },
      "CreateCPMCondition":{
         "Fn::Equals":[
            "CPM",
            {
               "Ref":"ComponentToInstall"
            }
         ]
      },
      "CreatePVWACondition":{
         "Fn::Equals":[
            "PVWA",
            {
               "Ref":"ComponentToInstall"
            }
         ]
      },
      "CreatePSMCondition":{
         "Fn::Equals":[
            "PSM",
            {
               "Ref":"ComponentToInstall"
            }
         ]
      },
      "CreatePSMPCondition":{
         "Fn::Equals":[
            "PSMP",
            {
               "Ref":"ComponentToInstall"
            }
         ]
      },
      "DRValueEmpty":{
         "Fn::Equals":[
            "",
            {
               "Ref":"DRPrivateIP"
            }
         ]
      }
   },
   "Metadata":{
      "AWS::CloudFormation::Interface":{
         "ParameterGroups":[
            {
               "Label":{
                  "default":"General parameters"
               },
               "Parameters":[
                  "EULA",
                  "KeyName"
               ]
            },
            {
               "Label":{
                  "default":"Vault and DR information"
               },
               "Parameters":[
                  "VaultPrivateIP",
                  "DRPrivateIP",
                  "VaultAdminUser",
                  "VaultAdminPassword"
               ]
            },
            {
               "Label":{
                  "default":"Component configuration"
               },
               "Parameters":[
                  "ComponentToInstall",
                  "ComponentInstanceName",
                  "ComponentHostName",
                  "ComponentInstanceType",
                  "ComponentInstanceSecurityGroups",
                  "ComponentInstanceSubnetId",
                  "PVWAHostName"
               ]
            }
         ],
         "ParameterLabels":{
            "EULA":{
               "default":"License Agreement"
            },
            "KeyName":{
               "default":"Key Pair"
            },
            "VaultPrivateIP":{
               "default":"Vault Private IP"
            },
            "DRPrivateIP":{
               "default":"Vault DR Private IP"
            },
            "VaultAdminUser":{
               "default":"Vault Admin User"
            },
            "VaultAdminPassword":{
               "default":"Vault Admin Password"
            },
            "ComponentToInstall":{
               "default":"Component To Install"
            },
            "ComponentInstanceName":{
               "default":"Component Instance Name"
            },
            "ComponentHostName":{
               "default":"Component Host Name"
            },
            "ComponentInstanceType":{
               "default":"Component Instance Type"
            },
            "ComponentInstanceSecurityGroups":{
               "default":"Component Instance Security Groups"
            },
            "ComponentInstanceSubnetId":{
               "default":"Component Instance Subnet Id"
            },
            "PVWAHostName":{
               "default":"PVWA FQDN (Optional)"
            }
         }
      }
   },
   "Mappings": {
      "RegionMap": {
         "us-east-1": {
            "CPM": "ami-04f7a7fcd53602ce5",
            "PVWA": "ami-0cf8634480dda1144",
            "PSM": "ami-03c666b49fb2a6d1e",
            "PSMP": "ami-06df2e71b38c015e7"
         },
         "us-east-2":{
            "CPM":"ami-0b9f21e6cfaded843",
            "PVWA":"ami-08a681d279829d63c",
            "PSM":"ami-001abd7f34c69d945",
            "PSMP":"ami-0e06bbc7716f7ee44"
         },
         "eu-west-2": {
            "CPM": "ami-004a680e7fdf1c154",
            "PVWA": "ami-092a460a94ef64add",
            "PSM": "ami-06b5aba159017f494",
            "PSMP": "ami-0ac3bd7ed3bf2ab65"
         },
         "us-west-1": {
            "CPM": "ami-061772055973f089b",
            "PVWA": "ami-036e3e4d12e5c297a",
            "PSM": "ami-0d457c439de72b25a",
            "PSMP": "ami-01e467d0d055b3dcf"
         },
         "us-west-2": {
            "CPM": "ami-087aef90e29feebcb",
            "PVWA": "ami-07f6456fe7fcbae42",
            "PSM": "ami-0c45197c4a506b71e",
            "PSMP": "ami-08a1956927798c8db"
         },
         "ca-central-1": {
            "CPM": "ami-06c6a246d6fba98fa",
            "PVWA": "ami-002a6ff252d6a3905",
            "PSM": "ami-0afaeee4f5fbce4ec",
            "PSMP": "ami-04a175e3f987fb4e3"
         },
         "eu-west-1": {
            "CPM": "ami-06ad61e56b74d8b20",
            "PVWA": "ami-0efb2d3e00fb745d1",
            "PSM": "ami-03f8dd7652e1fe674",
            "PSMP": "ami-09c53e615fcbcfb61"
         },
         "eu-central-1": {
            "CPM": "ami-0123169c51de10702",
            "PVWA": "ami-0493aafbf3e73aa17",
            "PSM": "ami-020b66e53a257efcb",
            "PSMP": "ami-08461350aac95bd1c"
         },
         "ap-southeast-1": {
            "CPM": "ami-0d65692af2e10edd4",
            "PVWA": "ami-0795e7fa035769c23",
            "PSM": "ami-072623ee02c0a7d7b",
            "PSMP": "ami-0173fa00b55d6394c"
         },
         "ap-southeast-2": {
            "CPM": "ami-0c840a37861c588e9",
            "PVWA": "ami-08d2aa64b216a7534",
            "PSM": "ami-01bd684fdcc0588c2",
            "PSMP": "ami-0d0976a68dedba8a0"
         },
         "ap-northeast-2": {
            "CPM": "ami-070279807875a7e45",
            "PVWA": "ami-0de7ff042bdbc61a3",
            "PSM": "ami-08b2dfa4af9a09274",
            "PSMP": "ami-018e60760813baa13"
         },
         "ap-northeast-1": {
            "CPM": "ami-0bdba1fe42967dca6",
            "PVWA": "ami-01e4ffd62120912fb",
            "PSM": "ami-075da7833c7735d20",
            "PSMP": "ami-03072f0cf1d158e2d"
         },
         "ap-south-1": {
            "CPM": "ami-06d3924a52041602a",
            "PVWA": "ami-08d81b134bd6c980f",
            "PSM": "ami-08f948b6799af2735",
            "PSMP": "ami-04169e7eefa99af28"
         },
         "sa-east-1": {
            "CPM": "ami-03497206fc20b5bce",
            "PVWA": "ami-0b43a0f3e235a1fd2",
            "PSM": "ami-01113b223c1b0e851",
            "PSMP": "ami-0ebecc6c0a2b153c4"
         },
         "us-gov-west-1": {
            "CPM": "ami-5483c835",
            "PVWA": "ami-6abbf00b",
            "PSM": "ami-56bff437",
            "PSMP": "ami-95b6fdf4"
         },
         "us-gov-east-1": {
            "CPM": "ami-005676d3d8ddc47bc",
            "PVWA": "ami-061762cafdb68d4ab",
            "PSM": "ami-0a25e30f22418a0d4",
            "PSMP": "ami-038b1bf791cd3a266"
         }
      }
   },
   "Outputs":{
      "CloudWatchLogGroupName":{
         "Description":"The name of the CloudWatch log group",
         "Value":{
            "Ref":"LogGroup"
         }
      }
   }
}
