{
   "Resources":{
      "LogGroup":{
         "Type":"AWS::Logs::LogGroup",
         "Properties":{
            "RetentionInDays":30
         },
         "DeletionPolicy":"Retain"
      },
      "LambdaDeployRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Policies":[
               {
                  "PolicyName":"CloudWatch",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "logs:CreateLogGroup",
                              "logs:CreateLogStream",
                              "logs:DescribeLogGroups",
                              "logs:DescribeLogStreams",
                              "logs:PutLogEvents"
                           ],
                           "Resource":[
                              "*"
                           ]
                        }
                     ]
                  }
               },
               {
                  "PolicyName":"SSM",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "ssm:PutParameter",
                              "ssm:DeleteParameter"
                           ],
                           "Resource":[
                              {
                                 "Fn::Sub":"arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                              }
                           ]
                        }
                     ]
                  }
               }
            ]
         },
         "Condition":"EULACondition"
      },
      "StorePasswordLambda":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Description":"Saves given password to parameter store as SecureString",
            "Code":{
               "ZipFile":{
                  "Fn::Join":[
                     "\n",
                     [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def storePassword(name, value):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.put_parameter(",
                        "        Name = name,",
                        "        Value = value,",
                        "        Type = 'SecureString'",
                        "    )",
                        "",
                        "def deletePassword(name):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.delete_parameter(",
                        "        Name = name",
                        "    )",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "",
                        "    if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:",
                        "            print 'The property Password must not be empty'",
                        "            return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)",
                        "",
                        "    try:",
                        "        if event['RequestType'] == 'Delete':",
                        "            deletePassword(physicalResourceId)",
                        "            print 'Password successfully deleted. Id='+physicalResourceId",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "        if event['RequestType'] == 'Create':",
                        "            storePassword(physicalResourceId, event['ResourceProperties']['Password'])",
                        "            print 'The store parameter has been created. Id='+physicalResourceId",
                        "            response = { 'SsmId': physicalResourceId }",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)",
                        "",
						"    except client.exceptions.ParameterNotFound:",
                        "        print 'Item already removed'",
                        "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime":"python2.7",
            "Handler":"index.lambda_handler",
            "Role":{
               "Fn::GetAtt":[
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         },
         "Condition":"EULACondition"
      },
      "DeletePasswordLambda":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Description":"Delete password from parameter store",
            "Code":{
               "ZipFile":{
                  "Fn::Join":[
                     "\n",
                     [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def deletePassword(name):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.delete_parameter(",
                        "        Name = name",
                        "    )",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "    ",
                        "    try:",
                        "        if event['RequestType'] == 'Create':",
                        "            deletePassword(event['ResourceProperties']['key'])",
                        "            print 'Password succesfully deleted. Id='+event['ResourceProperties']['key']",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "        if event['RequestType'] == 'Delete':",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "    except client.exceptions.ParameterNotFound:",
                        "        print 'Item already removed'",
                        "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime":"python2.7",
            "Handler":"index.lambda_handler",
            "Role":{
               "Fn::GetAtt":[
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         },
         "Condition":"EULACondition"
      },
      "StoreAdminPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "StorePasswordLambda",
                  "Arn"
               ]
            },
            "Password":{
               "Ref":"VaultAdminPassword"
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole"
         ]
      },
      "CleanAdminPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Version":"1.0",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "DeletePasswordLambda",
                  "Arn"
               ]
            },
            "key":{
               "Fn::GetAtt":[
                  "StoreAdminPassword",
                  "SsmId"
               ]
            },
            "dummyDependency":{
               "Fn::If":[
                  "CreateCPMCondition",
                  {
                     "Fn::GetAtt":[
                        "CPMMachine",
                        "PrivateIp"
                     ]
                  },
                  {
                     "Fn::If":[
                        "CreatePVWACondition",
                        {
                           "Fn::GetAtt":[
                              "PVWAMachine",
                              "PrivateIp"
                           ]
                        },
                        {
                           "Fn::If":[
                              "CreatePSMCondition",
                              {
                                 "Fn::GetAtt":[
                                    "PSMMachine",
                                    "PrivateIp"
                                 ]
                              },
                              {
                                 "Fn::GetAtt":[
                                    "PSMPMachine",
                                    "PrivateIp"
                                 ]
                              }
                           ]
                        }
                     ]
                  }
               ]
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole",
            "StorePasswordLambda"
         ]
      },
      "ComponentInstanceProfile":{
         "Type":"AWS::IAM::InstanceProfile",
         "Properties":{
            "Roles":[
               {
                  "Ref":"ComponentInstanceRole"
               }
            ]
         },
         "Condition":"EULACondition"
      },
      "ComponentInstanceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/",
            "ManagedPolicyArns":[
               {
                  "Fn::Sub":"arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
               }
            ],
            "Policies":[
               {
                  "PolicyName":"LogRolePolicy",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "logs:CreateLogGroup",
                              "logs:CreateLogStream",
                              "logs:PutLogEvents",
                              "logs:DescribeLogStreams"
                           ],
                           "Resource":[
                              {
                                 "Fn::Sub":"arn:${AWS::Partition}:logs:*:*:*"
                              }
                           ]
                        }
                     ]
                  }
               }
            ]
         },
         "Condition":"EULACondition"
      },
      "CPMMachine":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ComponentInstanceName"
                  }
               }
            ],
            "SecurityGroupIds":{
               "Ref":"ComponentInstanceSecurityGroups"
            },
            "SubnetId":{
               "Ref":"ComponentInstanceSubnetId"
            },
            "ImageId":{
               "Fn::FindInMap":[
                  "RegionMap",
                  {
                     "Ref":"AWS::Region"
                  },
                  "CPM"
               ]
            },
            "InstanceType":{
               "Ref":"ComponentInstanceType"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r CPMMachine",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        "  --resource CPMMachine",
                        "  --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "IamInstanceProfile":{
               "Ref":"ComponentInstanceProfile"
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "config":{
                  "files":{
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\deploy.py":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "callArray = [",
                                 "'C:\\\\CyberArk\\\\Components Registration\\\\RegisterComponent.exe',",
                                 "'CPM',",
                                 "'/accepteula',",
                                 "'Yes',",
                                 "'/vaultip',",
                                 "'",
                                 {
                                    "Ref":"VaultPrivateIP"
                                 },
                                 {
                                    "Fn::If":[
                                       "DRValueEmpty",
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                "',"
                                             ]
                                          ]
                                       },
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                ",",
                                                {
                                                   "Ref":"DRPrivateIP"
                                                },
                                                "',"
                                             ]
                                          ]
                                       }
                                    ]
                                 },
                                 "'/vaultport',",
                                 "'1858',",
                                 "'/vaultuser',",
                                 "'",
                                 {
                                    "Ref":"VaultAdminUser"
                                 },
                                 "',",
                                 "'/vaultpassword',",
                                 "adminp",
                                 "]\n",
                                 "sys.exit(subprocess.call(callArray, cwd='C:\\CyberArk\\Components Registration'))\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "AmazonSSMAgent":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands":{
                     "01-restartSSM":{
                        "command":"powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion":"30",
                        "ignoreErrors":"true"
                     },
                     "02-deploy":{
                        "command":"C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "03-CPMserviceConfig":{
                        "command":"sc config \"CyberArk Password Manager\" start=auto",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "04-CPMSserviceConfig":{
                        "command":"sc config \"CyberArk Central Policy Manager Scanner\" start=auto",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "05-CPMserviceStart":{
                        "command":"sc start \"CyberArk Password Manager\"",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "06-CPMSserviceStart":{
                        "command":"sc start \"CyberArk Central Policy Manager Scanner\"",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "07-ChangeHostName":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName ",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 " -Force -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever",
                        "ignoreErrors":"false"
                     },
                     "99-SignalCompletion":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "         --resource CPMMachine ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Condition":"CreateCPMCondition",
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT15M"
            }
         },
         "DeletionPolicy":"Retain"
      },
      "PVWAMachine":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ComponentInstanceName"
                  }
               }
            ],
            "SecurityGroupIds":{
               "Ref":"ComponentInstanceSecurityGroups"
            },
            "SubnetId":{
               "Ref":"ComponentInstanceSubnetId"
            },
            "ImageId":{
               "Fn::FindInMap":[
                  "RegionMap",
                  {
                     "Ref":"AWS::Region"
                  },
                  "PVWA"
               ]
            },
            "InstanceType":{
               "Ref":"ComponentInstanceType"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r PVWAMachine",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        "  --resource PVWAMachine",
                        "  --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "IamInstanceProfile":{
               "Ref":"ComponentInstanceProfile"
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "config":{
                  "files":{
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\deploy.py":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "import urllib2\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "callArray = [",
                                 "'C:\\\\CyberArk\\\\Components Registration\\\\RegisterComponent.exe',",
                                 "'PVWA',",
                                 "'/accepteula',",
                                 "'Yes',",
                                 "'/vaultip',",
                                 "'",
                                 {
                                    "Ref":"VaultPrivateIP"
                                 },
                                 {
                                    "Fn::If":[
                                       "DRValueEmpty",
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                "',"
                                             ]
                                          ]
                                       },
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                ",",
                                                {
                                                   "Ref":"DRPrivateIP"
                                                },
                                                "',"
                                             ]
                                          ]
                                       }
                                    ]
                                 },
                                 "'/vaultport',",
                                 "'1858',",
                                 "'/vaultuser',",
                                 "'",
                                 {
                                    "Ref":"VaultAdminUser"
                                 },
                                 "',",
                                 "'/vaultpassword',",
                                 "adminp",
                                 "]\n",
                                 "inputHostname='",
                                 {"Ref":"PVWAHostName"},
                                 "'\n",
                                 "if not inputHostname:\n",
                                 "\thostname = urllib2.urlopen('http://169.254.169.254/latest/meta-data/hostname').read()\n",
                                 "\tcallArray.append('/pvwaurl')\n",
                                 "\tcallArray.append('https://{0}/PasswordVault'.format(hostname))\n",
                                 "else:\n",
                                 "\tcallArray.append('/pvwaurl')\n",
                                 "\tcallArray.append('https://{0}/PasswordVault'.format(inputHostname))\n",
                                 "sys.exit(subprocess.call(callArray, cwd='C:\\CyberArk\\Components Registration'))\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "AmazonSSMAgent":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands":{
                     "01-restartSSM":{
                        "command":"powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion":"30",
                        "ignoreErrors":"true"
                     },
                     "02-deploy":{
                        "command":"C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "03-startAppPool":{
                        "command":"powershell -command \"& {&'Import-Module' WebAdministration}\"; \"& {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}\"; \"& {&'Set-ItemProperty' -Path IIS:\\AppPools\\PasswordVaultWebAccessPool -Name autoStart -Value 'true'}\"",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "04-CSTserviceConfig":{
                        "command":"sc config \"CyberArk Scheduled Tasks\" start=auto",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "05-CSTserviceStart":{
                        "command":"sc start \"CyberArk Scheduled Tasks\"",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "06-ChangeHostName":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName ",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 " -Force -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever",
                        "ignoreErrors":"false"
                     },
                     "99-SignalCompletion":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "         --resource PVWAMachine ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Condition":"CreatePVWACondition",
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT15M"
            }
         },
         "DeletionPolicy":"Retain"
      },
      "PSMMachine":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ComponentInstanceName"
                  }
               }
            ],
            "SecurityGroupIds":{
               "Ref":"ComponentInstanceSecurityGroups"
            },
            "SubnetId":{
               "Ref":"ComponentInstanceSubnetId"
            },
            "ImageId":{
               "Fn::FindInMap":[
                  "RegionMap",
                  {
                     "Ref":"AWS::Region"
                  },
                  "PSM"
               ]
            },
            "InstanceType":{
               "Ref":"ComponentInstanceType"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r PSMMachine",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        "  --resource PSMMachine",
                        "  --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "IamInstanceProfile":{
               "Ref":"ComponentInstanceProfile"
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "config":{
                  "files":{
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\deploy.py":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "import urllib2\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "callArray = [",
                                 "'C:\\\\CyberArk\\\\Components Registration\\\\RegisterComponent.exe',",
                                 "'PSM',",
                                 "'/accepteula',",
                                 "'Yes',",
                                 "'/vaultip',",
                                 "'",
                                 {
                                    "Ref":"VaultPrivateIP"
                                 },
                                 {
                                    "Fn::If":[
                                       "DRValueEmpty",
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                "',"
                                             ]
                                          ]
                                       },
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                ",",
                                                {
                                                   "Ref":"DRPrivateIP"
                                                },
                                                "',"
                                             ]
                                          ]
                                       }
                                    ]
                                 },
                                 "'/vaultport',",
                                 "'1858',",
                                 "'/vaultuser',",
                                 "'",
                                 {
                                    "Ref":"VaultAdminUser"
                                 },
                                 "',",
                                 "'/vaultpassword',",
                                 "adminp",
                                 "]\n",
                                 "properties = urllib2.urlopen('http://169.254.169.254/latest/meta-data').read()\n",
                                 "if 'public-ipv4' in properties:\n",
                                 "\tipv4 = urllib2.urlopen('http://169.254.169.254/latest/meta-data/public-ipv4').read()\n",
                                 "\tif ipv4 and ipv4 <> 'none':\n",
                                 "\t\tcallArray.append('/psmpublicip')\n",
                                 "\t\tcallArray.append(ipv4)\n",
                                 "sys.exit(subprocess.call(callArray, cwd='C:\\CyberArk\\Components Registration'))\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "AmazonSSMAgent":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands":{
                     "01-restartSSM":{
                        "command":"powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion":"30",
                        "ignoreErrors":"true"
                     },
                     "02-deploy":{
                        "command":"C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "03-PSMserviceConfig":{
                        "command":"sc config \"Cyber-Ark Privileged Session Manager\" start=auto",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "04-ChangeHostName":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName ",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 " -Force -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever",
                        "ignoreErrors":"false"
                     },
                     "99-SignalCompletion":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "         --resource PSMMachine ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Condition":"CreatePSMCondition",
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT15M"
            }
         },
         "DeletionPolicy":"Retain"
      },
      "PSMPMachine":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ComponentInstanceName"
                  }
               }
            ],
            "SecurityGroupIds":{
               "Ref":"ComponentInstanceSecurityGroups"
            },
            "SubnetId":{
               "Ref":"ComponentInstanceSubnetId"
            },
            "ImageId":{
               "Fn::FindInMap":[
                  "RegionMap",
                  {
                     "Ref":"AWS::Region"
                  },
                  "PSMP"
               ]
            },
            "InstanceType":{
               "Ref":"ComponentInstanceType"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash -e\n",
                        "/opt/aws/bin/cfn-init -v ",
                        "         --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        "         --resource PSMPMachine ",
                        "         --configsets install_all ",
                        "         --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        "         --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        "         --resource PSMPMachine ",
                        "         --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n"
                     ]
                  ]
               }
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "IamInstanceProfile":{
               "Ref":"ComponentInstanceProfile"
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "install_all":[
                     "install_cfn",
                     "install_logs",
                     "install_psmp"
                  ]
               },
               "install_cfn":{
                  "files":{
                     "/etc/cfn/cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.PSMPMachine.Metadata.AWS::CloudFormation::Init\n",
                                 "action=/opt/aws/bin/cfn-init -v ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "         --resource PSMPMachine ",
                                 "         --configsets install_all ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n",
                                 "runas=root\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "install_logs":{
                  "files":{
                     "/etc/awslogs/awslogs.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[general]\n",
                                 "state_file= /var/awslogs/state/agent-state\n",
                                 "[/var/log/cloud-init.log]\n",
                                 "file = /var/log/cloud-init.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cloud-init.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cloud-init-output.log]\n",
                                 "file = /var/log/cloud-init-output.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cloud-init-output.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cfn-init.log]\n",
                                 "file = /var/log/cfn-init.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cfn-init.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cfn-hup.log]\n",
                                 "file = /var/log/cfn-hup.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cfn-hup.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cfn-wire.log]\n",
                                 "file = /var/log/cfn-wire.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref":"LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cfn-wire.log\n",
                                 "datetime_format = \n"
                              ]
                           ]
                        },
                        "mode":"000444",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/awslogs/awscli.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[plugins]\n",
                                 "cwlogs = cwlogs\n",
                                 "[default]\n",
                                 "region = ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000444",
                        "owner":"root",
                        "group":"root"
                     }
                  },
                  "commands":{
                     "01_create_state_directory":{
                        "command":"mkdir -p /var/awslogs/state"
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "awslogs":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "/etc/awslogs/awslogs.conf"
                           ]
                        }
                     }
                  }
               },
               "install_psmp":{
                  "files":{
                     "/root/CD-Image/activatePSMP":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "#!/bin/bash -e\n",
                                 "chmod 700 /root/CD-Image/register_and_activation.sh\n",
                                 "temppassword=`aws ssm get-parameter --name ",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 " --region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 " --with-decryption --output text --query Parameter.Value`\n",
                                 "echo Object successfully retrieved from ssm.\n",
                                 "/opt/CARKpsmp/bin/createcredfile /root/CD-Image/user.cred Password -Username ",
                                 {
                                    "Ref":"VaultAdminUser"
                                 },
                                 " -Password $temppassword -Hostname\n",
                                 "echo Credentials file successfully created.\n",
                                 "/root/CD-Image/register_and_activation.sh /root/CD-Image/user.cred ",
                                 {
                                    "Fn::If":[
                                       "DRValueEmpty",
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                {
                                                   "Ref":"VaultPrivateIP"
                                                }
                                             ]
                                          ]
                                       },
                                       {
                                          "Fn::Join":[
                                             "",
                                             [
                                                {
                                                   "Ref":"VaultPrivateIP"
                                                },
                                                ",",
                                                {
                                                   "Ref":"DRPrivateIP"
                                                }
                                             ]
                                          ]
                                       }
                                    ]
                                 },
                                 " $(curl http://169.254.169.254/latest/meta-data/instance-id) y\n"
                              ]
                           ]
                        }
                     }
                  },
                  "commands":{
                     "00-ChangeHostName":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sudo hostname ",
                                 {
                                    "Ref":"ComponentHostName"
                                 }
                              ]
                           ]
                        }
                     },
                     "01-ChangeHostName-chmod-hosts":{
                        "command":"sudo chmod 646 /etc/hosts"
                     },
                     "02-ChangeHostName-sed-hosts1":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sudo sed -i 's/localhost\\./",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 "./g' /etc/hosts"
                              ]
                           ]
                        }
                     },
                     "03-ChangeHostName-sed-hosts2":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sudo sed -i 's/localhost /",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 " /g' /etc/hosts"
                              ]
                           ]
                        }
                     },
                     "04-ChangeHostName-chmod-network":{
                        "command":"sudo chmod 646 /etc/sysconfig/network"
                     },
                     "05-ChangeHostName-sed-network":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "sudo sed -i 's/HOSTNAME=localhost.localdomain/HOSTNAME=",
                                 {
                                    "Ref":"ComponentHostName"
                                 },
                                 "/g' /etc/sysconfig/network"
                              ]
                           ]
                        }
                     },
                     "06-ChangeHostName-chmod-hosts-revert":{
                        "command":"sudo chmod 644 /etc/hosts"
                     },
                     "07-ChangeHostName-chmod-network-revert":{
                        "command":"sudo chmod 644 /etc/sysconfig/network"
                     },
                     "08-Chmod":{
                        "command":"sudo chmod 700 /root/CD-Image/activatePSMP"
                     },
                     "09-PSMPdeploy":{
                        "command":"sudo /root/CD-Image/activatePSMP"
                     },
                     "10-ClearData":{
                        "command":"sudo shred -u /root/CD-Image/activatePSMP"
                     },
                     "11-RemoveInstallationFolder":{
                        "command":"sudo rm -rf /root/CD-Image/"
                     },
                     "99-SignalCompletion":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "/opt/aws/bin/cfn-signal -e $? ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "         --resource PSMPMachine ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Condition":"CreatePSMPCondition",
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT10M"
            }
         },
         "DeletionPolicy":"Retain"
      },
      "ComponentInstancesSSMPolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"ComponentInsancesSsmAccess",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "ssm:GetParameter"
                     ],
                     "Resource":[
                        {
                           "Fn::Sub":"arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                        }
                     ]
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"ComponentInstanceRole"
               }
            ]
         },
         "Condition":"EULACondition"
      }
   },
   "Parameters":{
      "EULA":{
         "Type":"String",
         "Description":"I have read and agree to the Terms and Conditions.",
         "AllowedValues":[
            "Accept",
            "Decline"
         ],
         "Default":"Decline"
      },
      "KeyName":{
         "Type":"AWS::EC2::KeyPair::KeyName",
         "Description":"Select an existing Key Pair from your AWS account.",
         "ConstraintDescription":"Can contain only ASCII characters."
      },
      "VaultPrivateIP":{
         "Type":"String",
         "Description":"Enter the IP of the Vault instance."
      },
      "DRPrivateIP":{
         "Type":"String",
         "Description":"Enter the IP of the Vault DR instance. (Optional)"
      },
      "VaultAdminUser":{
         "Type":"String",
         "Description":"Enter the Administrator Vault user.",
         "Default":"Administrator",
         "MinLength":8
      },
      "VaultAdminPassword":{
         "Type":"String",
         "Description":"Enter a password for the Vault Administrator user.",
         "NoEcho":true,
         "MinLength":8
      },
      "ComponentToInstall":{
         "Type":"String",
         "Description":"Choose the Component to install.",
         "AllowedValues":[
            "CPM",
            "PVWA",
            "PSM",
            "PSMP"
         ],
         "Default":"CPM"
      },
      "ComponentInstanceName":{
         "Type":"String",
         "Description":"Enter a name for the PAS Component instance.",
         "Default":"Components"
      },
      "ComponentHostName":{
         "Type":"String",
         "Description":"Enter the host name for the PAS Component instance."
      },
      "ComponentInstanceType":{
         "Type":"String",
         "Description":"Select the instance type of the Component instance.",
         "AllowedValues":[
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge"
         ],
         "Default":"m4.large"
      },
      "ComponentInstanceSecurityGroups":{
         "Type":"List<AWS::EC2::SecurityGroup::Id>",
         "Description":"Assign Security Groups to the Component instance."
      },
      "ComponentInstanceSubnetId":{
         "Type":"AWS::EC2::Subnet::Id",
         "Description":"Select the Subnet Id where the Component instance will reside."
      },
      "PVWAHostName":{
         "Type":"String",
         "Description":"IP or FQDN of PVWA server"
      }
   },
   "Conditions":{
      "EULACondition":{
         "Fn::Equals":[
            "Accept",
            {
               "Ref":"EULA"
            }
         ]
      },
      "CreateCPMCondition":{
         "Fn::Equals":[
            "CPM",
            {
               "Ref":"ComponentToInstall"
            }
         ]
      },
      "CreatePVWACondition":{
         "Fn::Equals":[
            "PVWA",
            {
               "Ref":"ComponentToInstall"
            }
         ]
      },
      "CreatePSMCondition":{
         "Fn::Equals":[
            "PSM",
            {
               "Ref":"ComponentToInstall"
            }
         ]
      },
      "CreatePSMPCondition":{
         "Fn::Equals":[
            "PSMP",
            {
               "Ref":"ComponentToInstall"
            }
         ]
      },
      "DRValueEmpty":{
         "Fn::Equals":[
            "",
            {
               "Ref":"DRPrivateIP"
            }
         ]
      }
   },
   "Metadata":{
      "AWS::CloudFormation::Interface":{
         "ParameterGroups":[
            {
               "Label":{
                  "default":"General parameters"
               },
               "Parameters":[
                  "EULA",
                  "KeyName"
               ]
            },
            {
               "Label":{
                  "default":"Vault and DR information"
               },
               "Parameters":[
                  "VaultPrivateIP",
                  "DRPrivateIP",
                  "VaultAdminUser",
                  "VaultAdminPassword"
               ]
            },
            {
               "Label":{
                  "default":"Component configuration"
               },
               "Parameters":[
                  "ComponentToInstall",
                  "ComponentInstanceName",
                  "ComponentHostName",
                  "ComponentInstanceType",
                  "ComponentInstanceSecurityGroups",
                  "ComponentInstanceSubnetId",
                  "PVWAHostName"
               ]
            }
         ],
         "ParameterLabels":{
            "EULA":{
               "default":"License Agreement"
            },
            "KeyName":{
               "default":"Key Pair"
            },
            "VaultPrivateIP":{
               "default":"Vault Private IP"
            },
            "DRPrivateIP":{
               "default":"Vault DR Private IP"
            },
            "VaultAdminUser":{
               "default":"Vault Admin User"
            },
            "VaultAdminPassword":{
               "default":"Vault Admin Password"
            },
            "ComponentToInstall":{
               "default":"Component To Install"
            },
            "ComponentInstanceName":{
               "default":"Component Instance Name"
            },
            "ComponentHostName":{
               "default":"Component Host Name"
            },
            "ComponentInstanceType":{
               "default":"Component Instance Type"
            },
            "ComponentInstanceSecurityGroups":{
               "default":"Component Instance Security Groups"
            },
            "ComponentInstanceSubnetId":{
               "default":"Component Instance Subnet Id"
            },
            "PVWAHostName":{
               "default":"PVWA FQDN (Optional)"
            }
         }
      }
   },
   "Mappings":{
      "RegionMap":{
         "us-east-1":{
            "CPM":"ami-01f4a2a07b19aa6f0",
            "PVWA":"ami-0ad713274cacc93fa",
            "PSM":"ami-08f6c84a58951e1cd",
            "PSMP":"ami-0fb8ac4ef13225047"
         },
         "us-east-2":{
            "CPM":"ami-00991183ac415cbed",
            "PVWA":"ami-0ab345f917c7594a8",
            "PSM":"ami-0bc611a654b8649be",
            "PSMP":"ami-0c20cbf0021eeddfa"
         },
         "eu-west-2":{
            "CPM":"ami-0a070b1fe3f976ce5",
            "PVWA":"ami-0c8254433184d26be",
            "PSM":"ami-0534718f417ae5dac",
            "PSMP":"ami-06ff76a43e0f1e659"
         },
         "us-west-1":{
            "CPM":"ami-031d438cb08e9e2a3",
            "PVWA":"ami-0bf9f77bfa31ccc07",
            "PSM":"ami-067ec025821bf90c8",
            "PSMP":"ami-079c6f86eaaa21956"
         },
         "us-west-2":{
            "CPM":"ami-0974a4fb38db9ba92",
            "PVWA":"ami-00bafed2a01ca25ba",
            "PSM":"ami-0db48c502a164cbf5",
            "PSMP":"ami-043f98b5d1d1fa0b5"
         },
         "ca-central-1":{
            "CPM":"ami-0bfbfbaf34ef50082",
            "PVWA":"ami-07c81e4520aa392b0",
            "PSM":"ami-02d7335e178b736cb",
            "PSMP":"ami-0ae8477d9339243f7"
         },
         "eu-west-1":{
            "CPM":"ami-06b193ca65a341cc7",
            "PVWA":"ami-08b798e94a225d480",
            "PSM":"ami-0de6e5f2676414c57",
            "PSMP":"ami-0de091c7e47fb5123"
         },
         "eu-central-1":{
            "CPM":"ami-0a0e99bd1043bff3b",
            "PVWA":"ami-058db01bd0b555b54",
            "PSM":"ami-003322631d95a16fe",
            "PSMP":"ami-0ec69297cc32195f2"
         },
         "ap-southeast-1":{
            "CPM":"ami-07792d932a87f2f4a",
            "PVWA":"ami-0abbaf07e5d7a147c",
            "PSM":"ami-0c2b2ddacab1d0dfc",
            "PSMP":"ami-04a54577464646bb3"
         },
         "ap-southeast-2":{
            "CPM":"ami-0f8fd5f9eaff9198f",
            "PVWA":"ami-016554ed4754031df",
            "PSM":"ami-0da1833ead00f469f",
            "PSMP":"ami-057ba59ad2c8d2f73"
         },
         "ap-northeast-2":{
            "CPM":"ami-021f08f853d710b3a",
            "PVWA":"ami-04a974ac5f6dfe7b9",
            "PSM":"ami-091e64e42f355690c",
            "PSMP":"ami-0bffe43bca05042c8"
         },
         "ap-northeast-1":{
            "CPM":"ami-0e73e5e5271302454",
            "PVWA":"ami-0e0bc91c02a1ce89d",
            "PSM":"ami-044f960feba900d98",
            "PSMP":"ami-09732d42317e4636f"
         },
         "ap-south-1":{
            "CPM":"ami-0a1d3c9d70feaa107",
            "PVWA":"ami-0dc291976629286e7",
            "PSM":"ami-050b0a6b98c9c15c5",
            "PSMP":"ami-07d62c13482f612e1"
         },
         "sa-east-1":{
            "CPM":"ami-018a24d9e6904ef10",
            "PVWA":"ami-08a5e85663304a7e3",
            "PSM":"ami-0a1613614f417f6b3",
            "PSMP":"ami-00572bcf418094156"
         },
         "us-gov-west-1": {
            "CPM": "ami-835b3ae2",
            "PVWA": "ami-4d5f3e2c",
            "PSM": "ami-e4a0c185",
            "PSMP": "ami-815f3ee0"
         }
      }
   },
   "Outputs":{
      "CloudWatchLogGroupName":{
         "Description":"The name of the CloudWatch log group",
         "Value":{
            "Ref":"LogGroup"
         }
      }
   }
}
