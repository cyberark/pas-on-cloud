Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
    DeletionPolicy: Retain
  VaultCfnInitLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/CfnInitLog
    DeletionPolicy: Retain
  VaultInitLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/VaultInitLog
    DeletionPolicy: Retain
  VaultPostInstallLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/VaultPostInstallLog
    DeletionPolicy: Retain
  VaultDRCfnInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/CfnInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/VaultInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRPostInstallLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/VaultPostInstallLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  ComponentsCfnInitLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/CfnInitLog
    DeletionPolicy: Retain
  CPMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/CPMConfigurationsLog
    DeletionPolicy: Retain
  CPMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/CPMRegistrationLog
    DeletionPolicy: Retain
  CPMSetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/CPMSetLocalServiceLog
    DeletionPolicy: Retain
  PSMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PSMConfigurationsLog
    DeletionPolicy: Retain
  PSMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PSMRegistrationLog
    DeletionPolicy: Retain
  PVWAConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PVWAConfigurationsLog
    DeletionPolicy: Retain
  PVWARegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PVWARegistrationLog
    DeletionPolicy: Retain
  PVWASetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PVWASetLocalServiceLog
    DeletionPolicy: Retain
  LambdaDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - '*'
        - PolicyName: SSM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
        - PolicyName: S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*'
  LambdaLogDenyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: denyLambdaLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Deny
                Action:
                  - logs:*
                Resource: '*'
  StorePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Saves given password to parameter store as SecureString
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:
                  print ('The property Password must not be empty')
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
              try:
                  if event['RequestType'] == 'Delete':
                      ssmClient.delete_parameter(Name=physicalResourceId)
                      print ('Password successfully deleted. Id='+physicalResourceId)
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Create':
                      ssmClient.put_parameter(Name=physicalResourceId, Value=event['ResourceProperties']['Password'], Type='SecureString')
                      print ('The store parameter has been created. Id='+physicalResourceId)
                      response = {'SsmId': physicalResourceId}
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)


      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaDeployRole.Arn'
  DeletePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Delete password from parameter store
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      ssmClient.delete_parameter(Name=event['ResourceProperties']['key'])
                      print ('Password succesfully deleted. Id='+event['ResourceProperties']['key'])
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)

      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaDeployRole.Arn'
  StoreMasterPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'StorePasswordLambda.Arn'
      Password: !Ref 'VaultMasterPassword'
    DependsOn:
      - LambdaDeployRole
  StoreAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'StorePasswordLambda.Arn'
      Password: !Ref 'VaultAdminPassword'
    DependsOn:
      - LambdaDeployRole
  StoreDRPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt StorePasswordLambda.Arn
      Password: !Ref VaultDRPassword
    DependsOn:
      - LambdaDeployRole
  StoreSecret:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'StorePasswordLambda.Arn'
      Password: !Ref 'Secret'
    DependsOn:
      - LambdaDeployRole
  CleanMasterPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeletePasswordLambda.Arn'
      key: !GetAtt 'StoreMasterPassword.SsmId'
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  CleanAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeletePasswordLambda.Arn'
      key: !GetAtt 'StoreAdminPassword.SsmId'
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - ComponentsMachine
  CleanDRPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt DeletePasswordLambda.Arn
      key: !GetAtt StoreDRPassword.SsmId
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  CleanSecret:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeletePasswordLambda.Arn'
      key: !GetAtt 'StoreSecret.SsmId'
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  RemovePermissionVault:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'RemovePermissionLambda.Arn'
      vault_role_name: !Ref 'VaultInstancesRole'
      lambda_role_name: !Ref 'LambdaRemovePermissionsRole'
      instance: !Ref 'VaultMachine'
      region: !Ref 'AWS::Region'
  RemovePermissionVaultDR:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'RemovePermissionLambda.Arn'
      vault_role_name: !Ref 'VaultDRInstancesRole'
      lambda_role_name: !Ref 'LambdaRemovePermissionsRole'
      instance: !Ref 'VaultDRMachine'
      region: !Ref 'AWS::Region'
  RemovePermissionsKMSPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: KMSPolicy
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action:
              - '*'
            Resource:
              - '*'
      Roles:
        - !Ref LambdaRemovePermissionsRole
    DependsOn:
      - RemovePermissionVaultDR
  RemovePermissionsVaultBootstrapIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: VaultBootstrapIAMPolicy
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action:
              - '*'
            Resource:
              - '*'
      Roles:
        - !Ref LambdaRemovePermissionsRole
    DependsOn:
      - RemovePermissionVaultDR
  LambdaRemovePermissionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - '*'
        - PolicyName: KMSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                Resource:
                  - '*'
  VaultBootstrapIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultBootstrapIAMPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - iam:GetRole
              - iam:DeleteRolePolicy
              - iam:PutRolePolicy
            Resource:
              - !GetAtt VaultInstancesRole.Arn
              - !GetAtt VaultDRInstancesRole.Arn
              - !GetAtt LambdaRemovePermissionsRole.Arn
      Roles:
        - !Ref 'LambdaRemovePermissionsRole'
  RemovePermissionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Change Policies of VaultInstancesRole IAM Role
      Code:
        ZipFile: |-
          import json
          import boto3
          import uuid
          import cfnresponse

          def lambda_handler(event, context):
            physicalResourceId = str(uuid.uuid4())
            if 'PhysicalResourceId' in event:
              physicalResourceId = event['PhysicalResourceId']
            if event['RequestType'] == 'Create':
              try:
                print("Creating AWS CloudFormation")
                print("Start RemovePermissionLambda execution")
                client = boto3.client('iam')

                # Get vault role info
                vault_role = client.get_role(RoleName=event['ResourceProperties']['vault_role_name'])['Role']
                print("Retrieve IAM Role ID: {0}".format(vault_role["RoleId"]))

                # Delete old Policies
                list = [event['ResourceProperties']['vault_role_name']]
                inline_policies = ["VaultInstancesKMSPolicy","VaultBootstrapIAMPolicy","VaultSSMPolicy","VaultFilesBucketAccess"]
                print("Trying to delete inline policies from {0} IAM Role".format(vault_role["RoleId"]))
                for role in list:
                  print("Delete policies in {0} IAM Role".format(role))
                  for inline_policy in inline_policies:
                    try:
                      delete = client.delete_role_policy(RoleName=role, PolicyName=inline_policy)
                      print("Delete policy: {0}".format(inline_policy))
                    except:
                      print("Didn\'t find policy: {0}".format(inline_policy))
                print("Finish to delete inline policies from {0} IAM Role".format(vault_role["RoleId"]))

                # Get KMS ID
                kms = boto3.client('kms', region_name=event['ResourceProperties']['region'])
                kms_arn = kms.describe_key(KeyId="alias/vault/{0}".format(event['ResourceProperties']['instance']))['KeyMetadata']['Arn']
                print("Retrieve KMS ARN: {0}".format(kms_arn))

                # Create inline policy
                kms_policy =  {
                  "Statement": [
                    {
                      "Action": [
                        "kms:Encrypt",
                        "kms:Decrypt"
                        ],
                        "Resource": kms_arn,
                        "Effect": "Allow"
                    }
                  ]
                }

                response = client.put_role_policy(RoleName=vault_role['RoleName'], PolicyName="VaultInstancesKMSPolicy", PolicyDocument=json.dumps(kms_policy))
                print("Add inline policy VaultInstancesKMSRestrictedPolicy to {0} IAM Role".format(vault_role["RoleId"]))

                return cfnresponse.send(event, context, cfnresponse.SUCCESS, None, {}, physicalResourceId)
              except Exception as E:
                print("Error in Lambda execution: {0}".format(E))
                return cfnresponse.send(event, context, cfnresponse.FAILED,E,{}, physicalResourceId)
            elif event['RequestType'] == 'Delete':
              print("Deleting AWS CloudFormation")
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaRemovePermissionsRole.Arn'
  VaultMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'VaultInstanceName'
      SecurityGroupIds: !Ref 'VaultInstanceSecurityGroups'
      SubnetId: !Ref 'VaultInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Vault
      InstanceType: !Ref 'VaultInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r VaultMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'VaultInstancesProfile'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - configSSMAndServerAndTagKMS
            - configServices
            - configSignal
        configSSMAndServerAndTagKMS:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-configcw:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -LogGroup ${LogGroup} -CfnInitLogStream ${VaultCfnInitLogStream} -VaultInitLogStream ${VaultInitLogStream} -VaultPostInstallLogStream ${VaultPostInstallLogStream} -Region ${AWS::Region}
              waitAfterCompletion: 10
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 60
        configServices:
          commands:
            1-download:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultInit.ps1 -VaultFilesBucket ${VaultFilesBucket} -LicenseFileKey ${LicenseFile} -RecoveryPublicKey ${RecoveryPublicKey} -Region ${AWS::Region}
              waitAfterCompletion: 0
            2-postInstallWithDR:
              command: !Sub
              - >-
                powershell.exe -File C:\CyberArk\Deployment\VaultPostInstall.ps1 -IsPrimaryOrDR "Primary" -SSMMasterPassParameterID
                ${StoreMasterPassword.SsmId} -SSMAdminPassParameterID ${StoreAdminPassword.SsmId} -SSMDRPassParameterID ${StoreDRPassword.SsmId}
                -LicensePath "C:\CyberArk\Deployment\vaultLicense.xml" -RecoveryPublicKeyPath "C:\CyberArk\Deployment\recoveryPublic.key"
                -Region ${AWS::Region} ${Secret}
              - Secret: !If
                  - SecretEmpty
                  - ''
                  - !Sub '-SSMSecretParameterID ${StoreSecret.SsmId}'
              waitAfterCompletion: 0
            3-changeKMSTag:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultTagKMS.ps1 -Role ${VaultInstancesRole} -Region ${AWS::Region}
              waitAfterCompletion: 0
            4-restart:
              command: powershell.exe -Command Restart-Computer
              waitAfterCompletion: forever
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource VaultMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
  VaultDRMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VaultInstanceName} DR'
      SecurityGroupIds: !Ref 'VaultInstanceSecurityGroups'
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 30
            Encrypted: true
      SubnetId: !Ref 'DRInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Vault
      InstanceType: !Ref 'VaultInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r VaultDRMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'VaultDRInstancesProfile'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - configSSMAndHostnameAndTagKMS
            - configServices
            - configSignal
        configSSMAndHostnameAndTagKMS:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-configCloudWatch:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -LogGroup ${LogGroup} -CfnInitLogStream ${VaultDRCfnInitLogStream} -VaultInitLogStream ${VaultDRInitLogStream} -VaultPostInstallLogStream ${VaultDRPostInstallLogStream} -Region ${AWS::Region}
              waitAfterCompletion: 10
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 0
        configServices:
          commands:
            1-postInstall:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultPostInstall.ps1 -SSMDRPassParameterID ${StoreDRPassword.SsmId} -IsPrimaryOrDR "DR" -PrimaryVaultIP ${VaultMachine.PrivateIp} -LicensePath "C:\CyberArk\Deployment\vaultLicense.xml" -Region ${AWS::Region} -SSMSecretParameterID ${StoreSecret.SsmId}
              waitAfterCompletion: 0
            2-changeKMSTag:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultTagKMS.ps1 -Role ${VaultDRInstancesRole} -Region ${AWS::Region}
              waitAfterCompletion: 0
            3-restart:
              command: powershell.exe -Command Restart-Computer
              waitAfterCompletion: forever
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource VaultDRMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
  VaultInstancesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'VaultInstancesRole'
    DeletionPolicy: Retain
  VaultDRInstancesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'VaultDRInstancesRole'
    DeletionPolicy: Retain
  VaultInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VaultLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultCfnInitLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultPostInstallLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultInitLogStream}'
        - PolicyName: VaultSSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreMasterPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreAdminPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreDRPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreSecret.SsmId}'
        - PolicyName: VaultFilesBucketAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${LicenseFile}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${RecoveryPublicKey}'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}'
        - PolicyName: VaultInstancesKMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateKey
                  - kms:GenerateRandom
                  - kms:TagResource
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:EnableKeyRotation
                  - kms:UpdateKeyDescription
                  - kms:CreateAlias
                Resource: '*'
        - PolicyName: VaultBootstrapIAMPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                Resource: '*'
    DeletionPolicy: Retain
  VaultDRInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VaultLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultDRInitLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultDRCfnInitLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultDRPostInstallLogStream}'
        - PolicyName: VaultSSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreDRPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreSecret.SsmId}'
        - PolicyName: VaultInstancesKMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateKey
                  - kms:GenerateRandom
                  - kms:TagResource
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:EnableKeyRotation
                  - kms:UpdateKeyDescription
                  - kms:CreateAlias
                Resource: '*'
        - PolicyName: VaultBootstrapIAMPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                Resource: '*'
    DeletionPolicy: Retain
  ComponentInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ComponentInstanceRole
    DeletionPolicy: Retain
  ComponentInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:*:*:*'
    DeletionPolicy: Retain
  InstancesSSMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancesSsmAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
      Roles:
        - !Ref 'ComponentInstanceRole'
    DeletionPolicy: Retain
  ComponentsMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'ComponentsInstanceName'
      SecurityGroupIds: !Ref 'ComponentsInstanceSecurityGroups'
      SubnetId: !Ref 'ComponentsInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Components
      InstanceType: !Ref 'ComponentsInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r ComponentsMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'ComponentInstanceProfile'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - configSSM
            - configPVWA
            - configCPM
            - configPSM
            - configSignal
        configSSM:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            01-StartAppPool:
              command: >
                powershell -command "& {&'Import-Module' WebAdministration}"; "& {&'Start-WebAppPool'
                -Name PasswordVaultWebAccessPool}"; "& {&'Set-ItemProperty' -Path
                IIS:\AppPools\PasswordVaultWebAccessPool -Name autoStart -Value 'true'}"
              waitAfterCompletion: 0
              ignoreErrors: false
            02-RunCloudWatch-PVWA:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -Region ${AWS::Region} -LogGroup ${LogGroup}
                -Component "PVWA" -Configuration ${PVWAConfigurationsLog} -CfnInitLogStream ${ComponentsCfnInitLogStream}
                -SetLocalService ${PVWASetLocalServiceLog} -Registration ${PVWARegistrationLog}
            03-RunCloudWatch-CPM:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -Region ${AWS::Region} -LogGroup ${LogGroup}
                -Component "CPM" -Configuration ${CPMConfigurationsLog} -CfnInitLogStream ${ComponentsCfnInitLogStream}
                -SetLocalService ${CPMSetLocalServiceLog} -Registration ${CPMRegistrationLog}
            04-RunCloudWatch-PSM:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -Region ${AWS::Region} -LogGroup ${LogGroup}
                -Component "PSM" -Configuration ${PSMConfigurationsLog} -CfnInitLogStream ${ComponentsCfnInitLogStream}
                -SetLocalService "psm" -Registration ${PSMRegistrationLog}
        configPVWA:
          commands:
            101-configurePVWAService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Username "PVWAReportsUser" -Services "CyberArk Scheduled Tasks"
              waitAfterCompletion: 0
            102-configuration:
              command: !Sub
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\PVWAConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser Administrator -VaultPort 1858 -HostName "PVWAhost"
                - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
              waitAfterCompletion: 0
            103-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\PVWARegistration.ps1
                -VaultAdminUser "Administrator" -SSMAdminPassParameterID
                ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            104-startAppPool:
              command: >-
                powershell -Command "& {&'Import-Module' WebAdministration}"; "&
                {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}"; "&
                {&'Set-ItemProperty' -Path
                IIS:\AppPools\PasswordVaultWebAccessPool -Name autoStart -Value
                'true'}"
              waitAfterCompletion: 0
            105-CSTserviceConfig:
              command: sc config "CyberArk Scheduled Tasks" start=auto
              waitAfterCompletion: 0
        configCPM:
          commands:
            201-configuration:
              command: !Sub
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\CPMConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser Administrator -VaultPort 1858
                - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
              waitAfterCompletion: 0
            202-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CPMRegistration.ps1
                -VaultAdminUser "Administrator" -SSMAdminPassParameterID
                ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            203-configureCPMService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Username "PasswordManagerUser" -Services "CyberArk Central Policy Manager Scanner"
              waitAfterCompletion: 0
            204-configureCPMService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Username "PasswordManagerUser" -Services "CyberArk Password Manager"
              waitAfterCompletion: 0
            205-CPMserviceConfig:
              command: sc config "CyberArk Password Manager" start=auto
              waitAfterCompletion: 0
            206-CPMSserviceConfig:
              command: sc config "CyberArk Central Policy Manager Scanner" start=auto
              waitAfterCompletion: 0
        configPSM:
          commands:
            301-configuration:
              command: !Sub
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\PSMConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser Administrator -VaultPort 1858
                - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
              waitAfterCompletion: 0
            303-registration:
              command: !Sub >
                  powershell.exe -File C:\CyberArk\Deployment\PSMRegistration.ps1
                  -VaultAdminUser "Administrator" -SSMAdminPassParameterID ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            304-PSMserviceConfig:
              command: sc config "Cyber-Ark Privileged Session Manager" start=auto
              waitAfterCompletion: 0
        configSignal:
          commands:
            98-restart:
              command: powershell.exe -Command "Restart-Computer -Force"
              waitAfterCompletion: forever
            99-SignalCompletion:
              command: !Sub 'cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource ComponentsMachine --region ${AWS::Region}'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  VaultFilesBucket:
    Type: String
    Description: Enter the name of the S3 bucket containing the license and recovery public key.
  LicenseFile:
    Type: String
    Description: Enter the path of the Vault license file within the bucket.
    Default: license.xml
  RecoveryPublicKey:
    Type: String
    Description: Enter the path of the recovery public key file within the bucket.
    Default: recpub.key
  VaultInstanceName:
    Type: String
    Description: Enter a name for the Vault instance.
    Default: CyberArk Vault
  VaultMasterPassword:
    Type: String
    Description: Enter a password for the Primary Vault Master user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: Vault Master password must contain at least 1 lowercase
      letter, 1 uppercase letter, 1 digit and 1 special character
  RetypeMasterPassword:
    Type: String
    Description: Retype the password for the Primary Vault Master user.
    NoEcho: true
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Primary Vault Administrator user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: Vault Administrator password must contain at least 1 lowercase
      letter, 1 uppercase letter, 1 digit and 1 special character
  RetypeAdminPassword:
    Type: String
    Description: Retype the password for the Primary Vault Administrator user.
    NoEcho: true
    MinLength: 8
  VaultDRPassword:
    Type: String
    Description: Enter the DR User Password.
    NoEcho: true
    MinLength: 8
    AllowedPattern: >-
      ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: >-
      Vault DR password must contain at least 1 lowercase letter, 1 uppercase
      letter, 1 digit and 1 special character
  RetypeDRPassword:
    Type: String
    Description: Retype the password for the Primary Vault Master user.
    NoEcho: true
    MinLength: 8
  Secret:
    Type: String
    Description: Enter a secret string for the DR user.
    NoEcho: true
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$|.{0,0}
    ConstraintDescription: Secret must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special characters,
      Minimum 10 characters, Allowed A-Z,a-z,0-9,all special characters, except / \ - ; and controlled characters.
    MinLength: 10
  SecretRetype:
    Type: String
    Description: Retype the secret string for the DR User.
    NoEcho: true
  VaultInstanceType:
    Type: String
    Description: Select the instance type of the Vault instance.
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    Default: m5.large
  VaultInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the Vault instance.
  VaultInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the Vault instance will reside.
  DRInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet Id where the Vault DR instance will reside.
  ComponentsInstanceName:
    Type: String
    Description: Enter a name for the PAS Components instance.
    Default: CyberArk Components
  ComponentsInstanceType:
    Type: String
    Description: Select the instance type of the PAS Components instance.
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
    Default: m4.large
  ComponentsInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the PAS Components instance.
  ComponentsInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the PAS Components instance will reside.
Rules:
  PasswordConfirmation:
    Assertions:
      - Assert: !Equals
          - !Ref 'VaultMasterPassword'
          - !Ref 'RetypeMasterPassword'
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref 'VaultDRPassword'
          - !Ref 'RetypeDRPassword'
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref 'VaultAdminPassword'
          - !Ref 'RetypeAdminPassword'
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref 'Secret'
          - !Ref 'SecretRetype'
        AssertDescription: The secret confirmation does not match.
  EULAAcception:
    Assertions:
      - Assert: !Equals
          - !Ref 'EULA'
          - Accept
        AssertDescription: You must accept EULA to continue.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Parameters
        Parameters:
          - EULA
          - KeyName
          - VaultFilesBucket
          - LicenseFile
          - RecoveryPublicKey
      - Label:
          default: Vault and DR Configuration
        Parameters:
          - VaultInstanceName
          - VaultAdminPassword
          - RetypeAdminPassword
          - VaultMasterPassword
          - RetypeMasterPassword
          - VaultDRPassword
          - RetypeDRPassword
          - Secret
          - SecretRetype
          - VaultInstanceType
          - VaultInstanceSecurityGroups
          - VaultInstanceSubnetId
          - DRInstanceSubnetId
      - Label:
          default: Components Configuration
        Parameters:
          - ComponentsInstanceName
          - ComponentsInstanceType
          - ComponentsInstanceSecurityGroups
          - ComponentsInstanceSubnetId
    ParameterLabels:
      EULA:
        default: License Agreement
      KeyName:
        default: Key Pair
      VaultFilesBucket:
        default: S3 Bucket
      LicenseFile:
        default: Vault License File
      RecoveryPublicKey:
        default: Recovery Public Key
      VaultAdminPassword:
        default: Primary Vault Admin Password
      RetypeAdminPassword:
        default: Retype Primary Vault Admin Password
      VaultMasterPassword:
        default: Primary Vault Master Password
      RetypeMasterPassword:
        default: Retype Primary Vault Master Password
      VaultDRPassword:
        default: DR User Password
      RetypeDRPassword:
        default: Retype DR User Password
      Secret:
        default: DR User Secret
      SecretRetype:
        default: Retype DR User Secret
      VaultInstanceName:
        default: Vault Instance Name
      VaultInstanceType:
        default: Primary Vault and Vault DR Instance Type
      VaultInstanceSecurityGroups:
        default: Vault Instance Security Groups
      VaultInstanceSubnetId:
        default: Primary Vault Instance Subnet Id
      DRInstanceSubnetId:
        default: Vault DR Instance Subnet Id
      ComponentsInstanceName:
        default: Components Instance Name
      ComponentsInstanceType:
        default: Components Instance Type
      ComponentsInstanceSecurityGroups:
        default: Components Instance Security Groups
      ComponentsInstanceSubnetId:
        default: Components Instance Subnet Id
Conditions:
  SecretEmpty: !Equals
    - ''
    - !Ref Secret
Mappings:
  RegionMap:
    us-east-1:
      Vault: ami-0f9fba410e4b5b5e8
      Components: ami-013c220bf010c588d
    us-east-2:
      Vault: ami-0d68869e888d7dd2d
      Components: ami-0694a0add81c9b9b9
    eu-west-2:
      Vault: ami-01b3bf309e06a63fd
      Components: ami-027c4601e663aacd7
    eu-west-3:
      Vault: ami-0e317eef0bd2561a5
      Components: ami-0ba599f15a600f541
    eu-north-1:
      Vault: ami-01890377aae7ff367
      Components: ami-011a11e64ff9192ee
    us-west-1:
      Vault: ami-041b1d1b5ad6f1647
      Components: ami-01ccc4ccca2468a51
    us-west-2:
      Vault: ami-011a35e97a0110026
      Components: ami-02409c0fe7cf556d6
    ca-central-1:
      Vault: ami-097ba0085dfb1cc8a
      Components: ami-062c834b60eefac19
    eu-west-1:
      Vault: ami-029d014ac3fc50414
      Components: ami-04905e4b2943fa461
    eu-central-1:
      Vault: ami-04a87cd0ee27dc283
      Components: ami-004906adcb77bd31d
    ap-southeast-1:
      Vault: ami-02c5657e99a781efb
      Components: ami-088ea8cbcc8abc767
    ap-southeast-2:
      Vault: ami-05aaeb1d83fc592f8
      Components: ami-0725e12a89a18151c
    ap-northeast-2:
      Vault: ami-0450cefaec1d64ef6
      Components: ami-0dc75953bd1ecd92b
    ap-northeast-1:
      Vault: ami-07e5803dfa62c5461
      Components: ami-0057f4c145f4db0e1
    ap-south-1:
      Vault: ami-040dcbb7289b83f68
      Components: ami-0e5211589cc376fa2
    sa-east-1:
      Vault: ami-071f36a553f862fc7
      Components: ami-0faa8d5a5637747e6
    me-south-1:
      Vault: ami-01986101ffd05cb86
      Components: ami-078773d46707c77e1
    us-gov-west-1:
      Vault: ami-0f977ab459adff29a
      Components: ami-05b0f11c581e05ddb
    us-gov-east-1:
      Vault: ami-0d1fe90a793e652fc
      Components: ami-0f526bfae7ebc03fc
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref 'LogGroup'
