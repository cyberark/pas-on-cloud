Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
    DeletionPolicy: Retain
  VaultCfnInitLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: 'VaultMachine/CfnInitLog'
    DeletionPolicy: Retain
  VaultInitLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: 'VaultMachine/VaultInitLog'
    DeletionPolicy: Retain
  VaultPostInstallLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: 'VaultMachine/VaultPostInstallLog'
  VaultDRCfnInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/CfnInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/VaultInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRPostInstallLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/VaultPostInstallLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  CPMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMConfigurationsLog
    DeletionPolicy: Retain
  CPMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMRegistrationLog
    DeletionPolicy: Retain
  CPMSetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMSetLocalServiceLog
    DeletionPolicy: Retain
  PSMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMConfigurationsLog
    DeletionPolicy: Retain
  PSMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMRegistrationLog
    DeletionPolicy: Retain
  PVWAConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWAConfigurationsLog
    DeletionPolicy: Retain
  PVWARegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWARegistrationLog
    DeletionPolicy: Retain
  PVWASetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWASetLocalServiceLog
    DeletionPolicy: Retain
  DeployBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
  LambdaDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - '*'
        - PolicyName: SSM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
        - PolicyName: S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${DeployBucket}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*'
    Condition: EULACondition
  LambdaLogDenyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: denyLambdaLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Deny
                Action:
                  - logs:*
                Resource: '*'
  StorePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Saves given password to parameter store as SecureString
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:
                  print ('The property Password must not be empty')
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
              try:
                  if event['RequestType'] == 'Delete':
                      ssmClient.delete_parameter(Name=physicalResourceId)
                      print ('Password successfully deleted. Id='+physicalResourceId)
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Create':
                      ssmClient.put_parameter(Name=physicalResourceId, Value=event['ResourceProperties']['Password'], Type='SecureString')
                      print ('The store parameter has been created. Id='+physicalResourceId)
                      response = {'SsmId': physicalResourceId}
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)


      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaDeployRole.Arn'
    Condition: EULACondition
  DeletePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Delete password from parameter store
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      ssmClient.delete_parameter(Name=event['ResourceProperties']['key'])
                      print ('Password succesfully deleted. Id='+event['ResourceProperties']['key'])
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)

      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaDeployRole.Arn'
    Condition: EULACondition
  StoreMasterPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'StorePasswordLambda.Arn'
      Password: !Ref 'VaultMasterPassword'
    Condition: EULACondition
    DependsOn:
      - LambdaDeployRole
  StoreAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'StorePasswordLambda.Arn'
      Password: !Ref 'VaultAdminPassword'
    Condition: EULACondition
    DependsOn:
      - LambdaDeployRole
  StoreDRPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt StorePasswordLambda.Arn
      Password: !Ref VaultDRPassword
    DependsOn:
      - LambdaDeployRole
  CleanMasterPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeletePasswordLambda.Arn'
      key: !GetAtt 'StoreMasterPassword.SsmId'
    Condition: EULACondition
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  CleanAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeletePasswordLambda.Arn'
      key: !GetAtt 'StoreAdminPassword.SsmId'
    Condition: EULACondition
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - ComponentsMachine
  CleanDRPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt DeletePasswordLambda.Arn
      key: !GetAtt StoreDRPassword.SsmId
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  VaultMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'VaultInstanceName'
      SecurityGroupIds: !Ref 'VaultInstanceSecurityGroups'
      SubnetId: !Ref 'VaultInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Vault
      InstanceType: !Ref 'VaultInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r VaultMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'VaultInstancesProfile'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - configSSM
            - configServices
            - configSignal
        configSSM:
          files:
            C:\CyberArk\Deployment\KMSPolicy.json:
              content:
                Fn::Sub: |-
                  {"Statement": [{"Action": ["kms:Encrypt", "kms:Decrypt"], "Resource": "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/KMSKEYID_PLACEHOLDER", "Effect": "Allow"}]}
          services:
            windows:
              AmazonSSMAgent:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-configcw:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -LogGroup ${LogGroup} -CfnInitLogStream ${VaultCfnInitLogStream} -VaultInitLogStream ${VaultInitLogStream} -VaultPostInstallLogStream ${VaultPostInstallLogStream} -Region ${AWS::Region}
              waitAfterCompletion: '10'
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: '60'
        configServices:
          commands:
            1-download:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultInit.ps1 -VaultFilesBucket ${VaultFilesBucket} -LicenseFileKey ${LicenseFile} -RecoveryPublicKey ${RecoveryPublicKey} -Region ${AWS::Region}
              waitAfterCompletion: '0'
            2-fixENE:
              command: >
                powershell.exe -File C:\CyberArk\Deployment\FixENE.ps1
              waitAfterCompletion: 0
            3-postInstall:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultPostInstall.ps1 -SSMMasterPassParameterID ${StoreMasterPassword.SsmId} -SSMAdminPassParameterID ${StoreAdminPassword.SsmId} -IsPrimaryOrDR "Primary" -PrimaryVaultIP "1.1.1.1" -LicensePath "C:\CyberArk\Deployment\vaultLicense.xml" -RecoveryPublicKeyPath "C:\CyberArk\Deployment\recoveryPublic.key" -Region ${AWS::Region}
              waitAfterCompletion: '0'
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource VaultMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  VaultDRMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VaultInstanceName} DR'
      SecurityGroupIds: !Ref VaultInstanceSecurityGroups
      SubnetId: !Ref DRInstanceSubnetId
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - Vault
      InstanceType: !Ref VaultInstanceType
      UserData: !Base64 
        'Fn::Sub': >-
          <script> cfn-init.exe -v -s ${AWS::StackId} -r VaultDRMachine
          --configsets ascending --region ${AWS::Region} </script>
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref VaultInstancesProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ascending:
            - configSSM
            - configServices
            - configSignal
        configSSM:
          files:
            'C:\CyberArk\Deployment\KMSPolicy.json':
              content:
                'Fn::Sub': >-
                  {"Statement": [{"Action": ["kms:Encrypt", "kms:Decrypt"],
                  "Resource":
                  "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/KMSKEYID_PLACEHOLDER",
                  "Effect": "Allow"}]}
          services:
            windows:
              AmazonSSMAgent:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - >-
                    C:\Program
                    Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-configCloudWatch:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1
                -LogGroup ${LogGroup} -CfnInitLogStream ${VaultDRCfnInitLogStream}
                -VaultInitLogStream ${VaultDRInitLogStream}
                -VaultPostInstallLogStream ${VaultDRPostInstallLogStream}
                -Region ${AWS::Region}
              waitAfterCompletion: 10
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 0
        configServices:
          commands:
            1-downloadLicenseRecpub:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultInit.ps1
                -VaultFilesBucket ${VaultFilesBucket} -LicenseFileKey
                ${LicenseFile} -RecoveryPublicKey ${RecoveryPublicKey} -Region
                ${AWS::Region}
              waitAfterCompletion: 0
            2-allowDR:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\AllowDR.ps1
                -PrimaryVaultIP ${VaultMachine.PrivateIp}
              waitAfterCompletion: 0
            3-postInstall:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultPostInstall.ps1
                -SSMMasterPassParameterID ${StoreMasterPassword.SsmId}
                -SSMAdminPassParameterID ${StoreAdminPassword.SsmId}
                -SSMDRPassParameterID ${StoreDRPassword.SsmId} -IsPrimaryOrDR
                "DR" -PrimaryVaultIP ${VaultMachine.PrivateIp} -LicensePath
                "C:\CyberArk\Deployment\vaultLicense.xml" -RecoveryPublicKeyPath
                "C:\CyberArk\Deployment\recoveryPublic.key" -Region
                ${AWS::Region}
              waitAfterCompletion: 0
            4-removePermissions:
              command: !Sub >
                powershell.exe -File
                C:\CyberArk\Deployment\VaultRemoveIAMPolicies.ps1 -Role
                ${VaultInstancesRole}
              waitAfterCompletion: 0
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId}
                --resource VaultDRMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
  VaultInstancesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'VaultInstancesRole'
    Condition: EULACondition
  VaultInstancesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: VaultLogPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultCfnInitLogStream}
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultDRCfnInitLogStream}
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultInitLogStream}
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultDRInitLogStream}
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultPostInstallLogStream}
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultDRPostInstallLogStream}
        - PolicyName: VaultSSMPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameters'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreMasterPassword.SsmId}
                  - !Sub >-
                    arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreAdminPassword.SsmId}
                  - !Sub >-
                    arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreDRPassword.SsmId}
        - PolicyName: VaultFilesBucketAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${LicenseFile}
                  - !Sub >-
                    arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${RecoveryPublicKey}
        - PolicyName: VaultInstancesKMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:CreateKey'
                  - 'kms:GenerateRandom'
                  - 'kms:TagResource'
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:EnableKeyRotation'
                  - 'kms:UpdateKeyDescription'
                  - 'kms:CreateAlias'
                Resource: '*'
        - PolicyName: VaultBootstrapIAMPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:DeleteRolePolicy'
                  - 'iam:PutRolePolicy'
                Resource: '*'
    DeletionPolicy: Retain
  ComponentInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ComponentInstanceRole
    DeletionPolicy: Retain
  ComponentInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:*:*:*'
    DeletionPolicy: Retain
  InstancesSSMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancesSsmAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
      Roles:
        - !Ref 'ComponentInstanceRole'
        - !Ref 'VaultInstancesRole'
    Condition: EULACondition
  VaultInstancesKMSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultInstancesKMSAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'
      Roles:
        - !Ref 'VaultInstancesRole'
    Condition: EULACondition
  VaultInstancesS3VaultFilesBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultFilesBucketAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*'
      Roles:
        - !Ref 'VaultInstancesRole'
    Condition: EULACondition
  VaultBootstrapKMSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultBootstrapKMSAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - kms:CreateKey
              - kms:GenerateRandom
            Resource: '*'
      Roles:
        - !Ref 'VaultInstancesRole'
  ComponentsMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'ComponentsInstanceName'
      SecurityGroupIds: !Ref 'ComponentsInstanceSecurityGroups'
      SubnetId: !Ref 'ComponentsInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Components
      InstanceType: !Ref 'ComponentsInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r ComponentsMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'ComponentInstanceProfile'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - configSSM
            - configPVWA
            - configCPM
            - configPSM
            - configSignal
        configSSM:
          services:
            windows:
              AmazonSSMAgent:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            01-StartAppPool:
              command: >
                powershell -command "& {&'Import-Module' WebAdministration}"; "& {&'Start-WebAppPool'
                -Name PasswordVaultWebAccessPool}"; "& {&'Set-ItemProperty' -Path
                IIS:\AppPools\PasswordVaultWebAccessPool -Name autoStart -Value 'true'}"
              waitAfterCompletion: '0'
              ignoreErrors: 'false'
            02-RunCloudWatch-PVWA:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -Region ${AWS::Region} -LogGroup ${LogGroup} 
                -Component "PVWA" -Configuration ${PVWAConfigurationsLog}
                -SetLocalService ${PVWASetLocalServiceLog} -Registration ${PVWARegistrationLog}
            03-RunCloudWatch-CPM:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -Region ${AWS::Region} -LogGroup ${LogGroup} 
                -Component "CPM" -Configuration ${CPMConfigurationsLog}
                -SetLocalService ${CPMSetLocalServiceLog} -Registration ${CPMRegistrationLog}
            04-RunCloudWatch-PSM:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -Region ${AWS::Region} -LogGroup ${LogGroup} 
                -Component "PSM" -Configuration ${PSMConfigurationsLog}
                -SetLocalService "psm" -Registration ${PSMRegistrationLog}
        configPVWA:  
          commands:
            101-configurePVWAService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Component "PVWA" -Username "PVWAReportsUser" -Services "CyberArk Scheduled Tasks"
              waitAfterCompletion: '0'
            102-configuration:
              command: !Sub 
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\PVWAConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser Administrator -VaultPort 1858 -HostName "PVWAhost"
                - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
              waitAfterCompletion: '0'
            103-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\PVWARegistration.ps1
                -VaultAdminUser "Administrator" -SSMAdminPassParameterID
                ${StoreAdminPassword.SsmId}
              waitAfterCompletion: '0'
            104-startAppPool:
              command: >-
                powershell -Command "& {&'Import-Module' WebAdministration}"; "&
                {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}"; "&
                {&'Set-ItemProperty' -Path
                IIS:\AppPools\PasswordVaultWebAccessPool -Name autoStart -Value
                'true'}"
              waitAfterCompletion: '0'
            105-CSTserviceConfig:
              command: sc config "CyberArk Scheduled Tasks" start=auto
              waitAfterCompletion: '0'
        configCPM:  
          commands:
            201-configuration:
              command: !Sub 
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\CPMConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser Administrator -VaultPort 1858
                - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
              waitAfterCompletion: '0'
            202-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CPMRegistration.ps1
                -VaultAdminUser "Administrator" -SSMAdminPassParameterID
                ${StoreAdminPassword.SsmId}
              waitAfterCompletion: '0'
            203-configureCPMService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Component 'CPM' -Username "PasswordManagerUser" -Services "CyberArk Central Policy Manager Scanner"
              waitAfterCompletion: '0'
            204-configureCPMService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Component 'CPM' -Username "PasswordManagerUser" -Services "CyberArk Password Manager"
              waitAfterCompletion: '0'
            205-CPMserviceConfig:
              command: sc config "CyberArk Password Manager" start=auto
              waitAfterCompletion: '0'
            206-CPMSserviceConfig:
              command: sc config "CyberArk Central Policy Manager Scanner" start=auto
              waitAfterCompletion: '0'
        configPSM:  
          commands:
            301-configuration:
              command: !Sub 
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\PSMConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser Administrator -VaultPort 1858
                - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
              waitAfterCompletion: '0'
            303-registration:
              command: !Sub >
                  powershell.exe -File C:\CyberArk\Deployment\PSMRegistration.ps1
                  -VaultAdminUser "Administrator" -SSMAdminPassParameterID ${StoreAdminPassword.SsmId}
              waitAfterCompletion: '0'  
            304-PSMserviceConfig:
              command: sc config "Cyber-Ark Privileged Session Manager" start=auto
              waitAfterCompletion: '0'
        configSignal:  
          commands:
            98-restart:
              command: powershell.exe -Command "Restart-Computer -Force"
              waitAfterCompletion: forever  
            99-SignalCompletion:
              command: !Sub 'cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource ComponentsMachine --region ${AWS::Region}'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  VaultFilesBucket:
    Type: String
    Description: Enter the name of the bucket containing the license and recovery
      public key.
  LicenseFile:
    Type: String
    Description: Enter the path of the license file within the bucket.
    Default: license.xml
  RecoveryPublicKey:
    Type: String
    Description: Enter the path of the recovery public key file within the bucket.
    Default: recpub.key
  VaultInstanceName:
    Type: String
    Description: Enter a name for the Vault instance.
    Default: CyberArk Vault
  VaultMasterPassword:
    Type: String
    Description: Enter a password for the Vault Master user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: Vault Master password must contain at least 1 lowercase
      letter, 1 uppercase letter, 1 digit and 1 special character
  RetypeMasterPassword:
    Type: String
    Description: Retype the password for the Vault Master user.
    NoEcho: true
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: Vault Administrator password must contain at least 1 lowercase
      letter, 1 uppercase letter, 1 digit and 1 special character
  RetypeAdminPassword:
    Type: String
    Description: Retype the password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
  VaultDRPassword:
    Type: String
    Description: Enter a password for the Vault DR user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: >-
      ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: >-
      Vault DR password must contain at least 1 lowercase letter, 1 uppercase
      letter, 1 digit and 1 special character
  RetypeDRPassword:
    Type: String
    Description: Retype the password for the Vault DR user.
    NoEcho: true
    MinLength: 8
  VaultInstanceType:
    Type: String
    Description: Select the instance type of the Vault instance.
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
    Default: m4.large
  VaultInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the Vault instance.
  VaultInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the Vault instance will reside.
  DRInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet Id where the Vault DR instance will reside.
  ComponentsInstanceName:
    Type: String
    Description: Enter a name for the PAS Components instance.
    Default: CyberArk Components
  ComponentsInstanceType:
    Type: String
    Description: Select the instance type of the PAS Components instance.
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
    Default: m4.large
  ComponentsInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the PAS Components instance.
  ComponentsInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the PAS Components instance will reside.
Conditions:
  EULACondition: !Equals
    - Accept
    - !Ref 'EULA'
Rules:
  PasswordConfirmation:
    Assertions:
      - Assert: !Equals
          - !Ref 'VaultMasterPassword'
          - !Ref 'RetypeMasterPassword'
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref 'VaultDRPassword'
          - !Ref 'RetypeDRPassword'
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref 'VaultAdminPassword'
          - !Ref 'RetypeAdminPassword'
        AssertDescription: The password confirmation does not match.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Parameters
        Parameters:
          - EULA
          - KeyName
          - VaultFilesBucket
          - LicenseFile
          - RecoveryPublicKey
      - Label:
          default: Vault and DR Configuration
        Parameters:
          - VaultInstanceName
          - VaultMasterPassword
          - RetypeMasterPassword
          - VaultAdminPassword
          - RetypeAdminPassword
          - VaultDRPassword
          - RetypeDRPassword
          - VaultInstanceType
          - VaultInstanceSecurityGroups
          - VaultInstanceSubnetId
          - DRInstanceSubnetId
      - Label:
          default: Components Configuration
        Parameters:
          - ComponentsInstanceName
          - ComponentsInstanceType
          - ComponentsInstanceSecurityGroups
          - ComponentsInstanceSubnetId
    ParameterLabels:
      EULA:
        default: License Agreement
      KeyName:
        default: Key Pair
      VaultFilesBucket:
        default: Vault Files Bucket
      LicenseFile:
        default: License File
      RecoveryPublicKey:
        default: Recovery Public Key
      VaultInstanceName:
        default: Vault Instance Name
      VaultMasterPassword:
        default: Vault Master Password
      RetypeMasterPassword:
        default: Retype Master Password
      VaultAdminPassword:
        default: Vault Admin Password
      RetypeAdminPassword:
        default: Retype Admin Password
      VaultDRPassword:
        default: Vault DR Password
      RetypeDRPassword:
        default: Retype Vault DR Password
      VaultInstanceType:
        default: Vault Instance Type
      VaultInstanceSecurityGroups:
        default: Vault Instance Security Groups
      VaultInstanceSubnetId:
        default: Vault Instance Subnet Id
      DRInstanceSubnetId:
        default: Vault DR Instance Subnet Id
      ComponentsInstanceName:
        default: Components Instance Name
      ComponentsInstanceType:
        default: Components Instance Type
      ComponentsInstanceSecurityGroups:
        default: Components Instance Security Groups
      ComponentsInstanceSubnetId:
        default: Components Instance Subnet Id
Mappings:
  RegionMap:
    us-east-1:
      Vault: ami-01d4a7bd46088f700
      Components: ami-008819e4bd2bc224a
    us-east-2:
      Vault: ami-068bc4ecc92db8199
      Components: ami-0760243808377180b
    eu-west-2:
      Vault: ami-08e302bd203bff170
      Components: ami-03d08891a6821b530
    us-west-1:
      Vault: ami-0f1803a9c76472be5
      Components: ami-0863710cb43917155
    us-west-2:
      Vault: ami-01edee6e967c17628
      Components: ami-018feb9b22c05d200
    ca-central-1:
      Vault: ami-0582d8c1a70001244
      Components: ami-0894c7f96641784ad
    eu-west-1:
      Vault: ami-09397273b9046d5b9
      Components: ami-0ff819a9eaff529bc
    eu-central-1:
      Vault: ami-06f43402c6e002660
      Components: ami-0cf15ea5528530c06
    ap-southeast-1:
      Vault: ami-0872cf43e69e28466
      Components: ami-04f431192f05c65ae
    ap-southeast-2:
      Vault: ami-0a02581b7c2a55e6f
      Components: ami-0e9e29f304c5cda9e
    ap-northeast-2:
      Vault: ami-0ed3745003fa46976
      Components: ami-0c4ce79c5a137c32c
    ap-northeast-1:
      Vault: ami-02e14fe4621742bde
      Components: ami-09601db9cb2a5d387
    ap-south-1:
      Vault: ami-0ff8fe4a731baa07a
      Components: ami-0f7ab50ee1a191e45
    sa-east-1:
      Vault: ami-04b91be9198835fc8
      Components: ami-0eee7030bbc34d5d8
    us-gov-west-1:
      Vault: ami-0e87a36f
      Components: ami-e1220580
    us-gov-east-1:
      Vault: ami-00268514ee37890b9
      Components: ami-0311b01fc5b67d05f
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref 'LogGroup'
