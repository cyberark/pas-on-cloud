AWSTemplateFormatVersion: "2010-09-09"
Description: This template handles the deployment of a selected CyberArk single component to an existing network infrastructure
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  CPMUserDataLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/UserDataLog
    DeletionPolicy: Retain
  CPMConfigurationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMConfiguration
    DeletionPolicy: Retain
  CPMRegistrationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMRegistrationLog
    DeletionPolicy: Retain
  PSMUserDataLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/UserDataLog
    DeletionPolicy: Retain
  PSMConfigurationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMConfigurationLog
    DeletionPolicy: Retain
  PSMRegistrationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMRegistrationLog
    DeletionPolicy: Retain
  PVWAUserDataLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/UserDataLog
    DeletionPolicy: Retain
  PVWAConfigurationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWAConfigurationLog
    DeletionPolicy: Retain
  PVWARegistrationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWARegistrationLog
    DeletionPolicy: Retain
  PVWAAmi:
    Type: Custom::FindAMI
    Condition: PVWACustomImageEmpty
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "PVWA"
      OS: !Ref WinVersion
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
  CPMAmi:
    Type: Custom::FindAMI
    Condition: CPMCustomImageEmpty
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "CPM"
      OS: !Ref WinVersion
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
  PSMAmi:
    Type: Custom::FindAMI
    Condition: PSMCustomImageEmpty
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "PSM"
      OS: !Ref WinVersion
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
  PSMPAmi:
    Type: Custom::FindAMI
    Condition: PSMPCustomImageEmpty
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "PSMP"
      OS: "RHEL-9"
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
  PTAAmi:
    Type: Custom::FindAMI
    Condition: PTACustomImageEmpty
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "PTA"
      OS: "RHEL-9"
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
  StoreAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt
        - StorePasswordLambda
        - Arn
      Password: !Ref VaultAdminPassword
    DependsOn:
      - LambdaDeployRole
  CleanAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt
        - DeletePasswordLambda
        - Arn
      key: !GetAtt
        - StoreAdminPassword
        - SsmId
      dummyDependency: !If
        - CreateCPMCondition
        - !GetAtt
          - CPMMachine
          - PrivateIp
        - !If
          - CreatePVWACondition
          - !GetAtt
            - PVWAMachine
            - PrivateIp
          - !If
            - CreatePSMCondition
            - !GetAtt
              - PSMMachine
              - PrivateIp
            - !If
              - CreatePSMPCondition
              - !GetAtt
                - PSMPMachine
                - PrivateIp
              - !GetAtt
                - PTAMachine
                - PrivateIp
  LambdaDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
        - PolicyName: SSM
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:DeleteParameter'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
        - PolicyName: DescribeImages
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ec2:DescribeImages'
                Resource: "*"
  ComponentInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
  ComponentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ComponentInstancesRole
    DeletionPolicy: Retain
  StorePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Saves given password to parameter store as SecureString
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:
                  print ('The property Password must not be empty')
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
              try:
                  if event['RequestType'] == 'Delete':
                      ssmClient.delete_parameter(Name=physicalResourceId)
                      print ('Password successfully deleted. Id='+physicalResourceId)
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Create':
                      ssmClient.put_parameter(Name=physicalResourceId, Value=event['ResourceProperties']['Password'], Type='SecureString')
                      print ('The store parameter has been created. Id='+physicalResourceId)
                      response = {'SsmId': physicalResourceId}
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  DeletePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Delete password from parameter store
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      ssmClient.delete_parameter(Name=event['ResourceProperties']['key'])
                      print ('Password succesfully deleted. Id='+event['ResourceProperties']['key'])
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  GetLatestAMILambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback


          def handler(event, context):
            try:
              component = event['ResourceProperties']['Component']
              pas_ver= event['ResourceProperties']['Version']
              pas_ver_major= int(pas_ver.split(".")[0])
              pas_ver_minor= int(pas_ver.split(".")[1])
              response = {
                  "Images": []
              }

              pas_ver_without_os_filter = ['11.5','11.6','11.7','12.0','12.1','12.2']
              os_filter = '' if pas_ver in pas_ver_without_os_filter else \
              event['ResourceProperties']['OS']
              
              while (response['Images'] == []) and (pas_ver_major >= 0):
                while (response['Images'] == []) and (pas_ver_minor >= 0):
                  ami_name = 'CyberArk PAS ' + component + ' v'+str(pas_ver_major) + '.' + str(pas_ver_minor) +'*'+ os_filter
                  response = boto3.client('ec2').describe_images(
                      Owners= [event['ResourceProperties']['OwnerAccountId']],
                      Filters=[
                        {'Name': 'name', 'Values':  [ami_name]},
                      ],
                  )
                  pas_ver_minor -= 1
                pas_ver_major -= 1
                pas_ver_minor = 9
              amis = sorted(response['Images'],
                            key=lambda x: x['CreationDate'],
                            reverse=True)
              id = amis[0]['ImageId']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except IndexError:
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "Requested AMI not found")
            except:
              traceback.print_last()
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "An error occured, please refer to the last exception")
      Runtime: python3.11
      Handler: index.handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  PVWAMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: 
        Fn::If:
          - CustomImageEmpty
          - !Ref PVWAAmi
          - !Ref ComponentCustomAmi
      InstanceType: !Ref ComponentInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "Region"                        = "${AWS::Region}"
              "LogGroup"                      = "${LogGroup}"
              "UserDataLogStream"             = "${PVWAUserDataLogStream}"
              "PVWAConfigurationLogStream"   = "${PVWAConfigurationLogStream}"
              "PVWARegistrationLogStream"     = "${PVWARegistrationLogStream}"
              "VaultAdminUser"                = "${VaultAdminUser}"
              "SSMAdminPassParameterID"       = "${StoreAdminPassword.SsmId}"
              "VaultPrivateIP"                = "${VaultIpAddress}"
              "ComponentHostname"             = "${ComponentHostname}"
              "StackName"                     = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - VaultIpAddress: !If
              - DRValueEmpty
              - !Sub '${VaultPrivateIP}'
              - !Sub '${VaultPrivateIP},${DRPrivateIP}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Condition: CreatePVWACondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
  CPMMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: 
        Fn::If:
          - CustomImageEmpty
          - !Ref CPMAmi
          - !Ref ComponentCustomAmi
      InstanceType: !Ref ComponentInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "Region"                        = "${AWS::Region}"
              "LogGroup"                      = "${LogGroup}"
              "UserDataLogStream"             = "${CPMUserDataLogStream}"
              "CPMConfigurationLogStream"    = "${CPMConfigurationLogStream}"
              "CPMRegistrationLogStream"      = "${CPMRegistrationLogStream}"
              "VaultAdminUser"                = "${VaultAdminUser}"
              "SSMAdminPassParameterID"       = "${StoreAdminPassword.SsmId}"
              "VaultPrivateIP"                = "${VaultIpAddress}"
              "ComponentHostname"             = "${ComponentHostname}"
              "StackName"                     = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - VaultIpAddress: !If
              - DRValueEmpty
              - !Sub '${VaultPrivateIP}'
              - !Sub '${VaultPrivateIP},${DRPrivateIP}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Condition: CreateCPMCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
  PSMMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: 
        Fn::If:
          - CustomImageEmpty
          - !Ref PSMAmi
          - !Ref ComponentCustomAmi
      InstanceType: !Ref ComponentInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "Region"                        = "${AWS::Region}"
              "LogGroup"                      = "${LogGroup}"
              "UserDataLogStream"             = "${PSMUserDataLogStream}"
              "PSMConfigurationLogStream"     = "${PSMConfigurationLogStream}"
              "PSMRegistrationLogStream"      = "${PSMRegistrationLogStream}"
              "VaultAdminUser"                = "${VaultAdminUser}"
              "SSMAdminPassParameterID"       = "${StoreAdminPassword.SsmId}"
              "VaultPrivateIP"                = "${VaultIpAddress}"
              "ComponentHostname"             = "${ComponentHostname}"
              "StackName"                     = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - VaultIpAddress: !If
              - DRValueEmpty
              - !Sub '${VaultPrivateIP}'
              - !Sub '${VaultPrivateIP},${DRPrivateIP}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Condition: CreatePSMCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
  PSMPMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: 
        Fn::If:
          - CustomImageEmpty
          - !Ref PSMPAmi
          - !Ref ComponentCustomAmi
      InstanceType: !Ref ComponentInstanceType
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -e
          cfn-init -v --stack ${AWS::StackId} --resource PSMPMachine --configsets install_all --region ${AWS::Region}
          cfn-signal -e $? --stack ${AWS::StackId} --resource PSMPMachine --region ${AWS::Region}
          sudo hostnamectl set-hostname ${ComponentHostname}.localdomain
          sudo sed -i '0,/localhost localhost/ s//${ComponentHostname} ${ComponentHostname}/' /etc/hosts
          sudo reboot
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          install_all:
            - install_logs
            - install_psmp
        install_logs:
          files:
            /opt/aws/amazon-cloudwatch-agent/bin/config.json:
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 10,
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                    "run_as_user": "root"
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/cloud-init.log",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PSMPMachine/cloud-init",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cloud-init-output.log",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PSMPMachine/cloud-init-output",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cfn-init.log",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PSMPMachine/cfn-init",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          },
                          {
                            "file_path": "/tmp/temp/EnvManager.log",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PSMPMachine/EnvManager",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          },
                          {
                            "file_path": "/var/opt/CARKpsmp/temp/PSMPHardening_log.txt",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PSMPMachine/PSMPHardening_log",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          }
                        ]
                      }
                    }
                  }
                }
              mode: '000444'
              owner: root
              group: root
          commands:
            01_install_cwlogs:
              command: !Sub >-
                sudo rpm -U https://amazoncloudwatch-agent-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
            02_start_awslogs:
              command: sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
        install_psmp:
          commands:
            01-PSMPdeploy:
              command: !Sub 
                - >-
                  TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token"
                  -H "X-aws-ec2-metadata-token-ttl-seconds:3600") &&
                  /opt/CD-Image/register.sh aws "${VaultIpAddress}"
                  $(curl -H "X-aws-ec2-metadata-token:$TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)
                  ec2-user Administrator ${AWS::Region} "${StoreAdminPassword.SsmId}"
                - VaultIpAddress: !If
                  - DRValueEmpty
                  - !Sub '${VaultPrivateIP}'
                  - !Sub '${VaultPrivateIP},${DRPrivateIP}'
            02-PostInstall:
              command: sudo rm -rf /opt/CD-Image/
            99-SignalCompletion:
              command: !Sub >-
                cfn-signal -e $? --stack ${AWS::StackId} --resource PSMPMachine --region ${AWS::Region}
    Condition: CreatePSMPCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
  PTAMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: 
        Fn::If:
          - CustomImageEmpty
          - !Ref PTAAmi
          - !Ref ComponentCustomAmi
      InstanceType: !Ref ComponentInstanceType
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -e
          cfn-init -v --stack ${AWS::StackId} --resource PTAMachine --configsets install_all --region ${AWS::Region}
          cfn-signal -e $? --stack ${AWS::StackId} --resource PTAMachine --region ${AWS::Region}
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          install_all:
            - install_logs
            - install_pta
        install_logs:
          files:
            /opt/aws/amazon-cloudwatch-agent/bin/config.json:
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 10,
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                    "run_as_user": "root"
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/cloud-init.log",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PTAMachine/cloud-init",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cloud-init-output.log",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PTAMachine/cloud-init-output",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/cfn-init.log",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PTAMachine/cfn-init",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          },
                          {
                            "file_path": "/opt/tomcat/logs/ptaAutomaticConfiguration.log",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PTAMachine/ptaAutomaticConfiguration",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          },
                                                    {
                            "file_path": "/opt/tomcat/logs/diamond.log",
                            "log_group_name": "${LogGroup}",
                            "log_stream_name": "PTAMachine/diamond",
                            "timezone": "Local",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                          }
                        ]
                      }
                    }
                  }
                }
              mode: '000444'
              owner: root
              group: root
          commands:
            01_install_cloudwatch_agent:
              command: !Sub >-
                sudo rpm -U https://amazoncloudwatch-agent-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
            02_start_cloudwatch_agent:
              command: sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
        install_pta:
          commands:
            01-executeptaconfigurationscript: 
              command: !Sub >-
                sudo /tmp/register.sh aws "${VaultPrivateIP}" "${PVWAPrivateDNS}" "${VaultAdminUser}" "${StoreAdminPassword.SsmId}" ${AWS::Region} "${DRPrivateIP}"
            99-SignalCompletion:
              command: !Sub >-
                cfn-signal -e $? --stack ${AWS::StackId} --resource PTAMachine --region ${AWS::Region}
    Condition: CreatePTACondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  WinVersion:
    Type: String
    Description: Select a Windows Server version for all Windows-based components (field ignored for PSMP/PTA).
    AllowedValues:
      - Win2016
      - Win2019
    Default: Win2016
  CyberarkAccountId:
    Type: String
    Description: Enter the CyberArk Account ID (AMI Owner account ID).
    AllowedPattern: ^[\d]{12}$
    ConstraintDescription: Account ID must contain 12 digits
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  VaultPrivateIP:
    Type: String
    Description: Enter the IP of the Primary Vault instance.
  DRPrivateIP:
    Type: String
    Description: Enter the IP of the DR Vault instance. (Optional)
  VaultAdminUser:
    Type: String
    Description: Enter the Administrator Vault user.
    Default: Administrator
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
  ComponentToInstall:
    Type: String
    Description: Choose the Component to install.
    AllowedValues:
      - PVWA
      - CPM
      - PSM
      - PSMP
      - PTA
    Default: PVWA
  ComponentCustomAmi:
    Type: String
    Description: Enter the Component Image ID, if you wish to use a custom Component image.
    AllowedPattern: ^ami-[a-f\d]{8}(?:[a-f\d]{9})?$|.{0,0}
    ConstraintDescription: An Amazon EC2 image ID, such as ami-0ff8a91507f77f867
  ComponentInstanceName:
    Type: String
    Description: Enter a name for the PAS Component instance.
    Default: CyberArk Component
  ComponentHostname:
    Type: String
    Description: Enter the hostname for the PAS Component instance.
    AllowedPattern: ^((?!-)(?=.*[a-zA-Z])[A-Za-z0-9-]{3,15}(?<!-))$
    ConstraintDescription: Parameter must only contain uppercase and lowercase letters (at least one letter), hyphens and numbers. Hostname can't start or end with hyphen.
    MaxLength: 15
    MinLength: 3
    Default: pas-component
  PVWAPrivateDNS:
    Type: String
    Description: Enter the private DNS name of the PVWA instance.
  ComponentInstanceType:
    Type: String
    Description: Select the instance type of the Component instance.
    AllowedValues:
      - c5.xlarge
      - m5.xlarge
      - c5.2xlarge
      - m5.2xlarge
      - c5.4xlarge
      - m5.4xlarge
      - c5.9xlarge
      - m5.8xlarge
    Default: c5.xlarge
  ComponentInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the Component instance.
  ComponentInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet ID where the Component instance will reside.
Rules:
  EULAAcception:
    Assertions:
      - Assert: !Equals
          - !Ref EULA
          - Accept
        AssertDescription: You must accept EULA to continue.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: General parameters
        Parameters:
          - EULA
          - WinVersion
          - CyberarkAccountId
          - KeyName
      - Label:
          default: Primary Vault and DR information
        Parameters:
          - VaultPrivateIP
          - DRPrivateIP
          - VaultAdminUser
          - VaultAdminPassword
      - Label:
          default: Component configuration
        Parameters:
          - ComponentToInstall
          - ComponentCustomAmi
          - ComponentInstanceName
          - ComponentHostname
          - PVWAPrivateDNS
          - ComponentInstanceType
          - ComponentInstanceSecurityGroups
          - ComponentInstanceSubnetId
    ParameterLabels:
      EULA:
        default: License Agreement
      WinVersion:
        default: Windows Server Version
      CyberarkAccountId:
        default: CyberArk Account ID
      KeyName:
        default: Key Pair
      VaultPrivateIP:
        default: Primary Vault Private IP
      DRPrivateIP:
        default: DR Vault Private IP
      VaultAdminUser:
        default: Vault Admin User
      VaultAdminPassword:
        default: Vault Admin Password
      ComponentToInstall:
        default: Component To Install
      ComponentCustomAmi:
        default: Custom Component Image ID (Optional)
      ComponentInstanceName:
        default: Component Instance Name
      ComponentHostname:
        default: Component Host Name
      PVWAPrivateDNS:
        default: PVWA instance private DNS name (required only for PTA)
      ComponentInstanceType:
        default: Component Instance Type
      ComponentInstanceSecurityGroups:
        default: Component Instance Security Groups
      ComponentInstanceSubnetId:
        default: Component Instance Subnet ID
Conditions:
  CreateCPMCondition: !Equals
    - CPM
    - !Ref ComponentToInstall
  CreatePVWACondition: !Equals
    - PVWA
    - !Ref ComponentToInstall
  CreatePSMCondition: !Equals
    - PSM
    - !Ref ComponentToInstall
  CreatePSMPCondition: !Equals
    - PSMP
    - !Ref ComponentToInstall
  CreatePTACondition: !Equals
    - PTA
    - !Ref ComponentToInstall
  CustomImageEmpty: !Equals
    - ''
    - !Ref ComponentCustomAmi
  PVWACustomImageEmpty: !And
    - !Condition CreatePVWACondition
    - !Condition CustomImageEmpty
  CPMCustomImageEmpty: !And
    - !Condition CreateCPMCondition
    - !Condition CustomImageEmpty
  PSMCustomImageEmpty: !And
    - !Condition CreatePSMCondition
    - !Condition CustomImageEmpty
  PSMPCustomImageEmpty: !And
    - !Condition CreatePSMPCondition
    - !Condition CustomImageEmpty
  PTACustomImageEmpty: !And
    - !Condition CreatePTACondition
    - !Condition CustomImageEmpty
  DRValueEmpty: !Equals
    - ''
    - !Ref DRPrivateIP
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref LogGroup
