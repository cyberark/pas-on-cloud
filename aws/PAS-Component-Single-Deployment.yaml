Resources:
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 30
    DeletionPolicy: Retain
  CPMCfnInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMCfnInitLogStream
    DeletionPolicy: Retain
  CPMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMConfigurations
    DeletionPolicy: Retain
  CPMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMRegistrationLog
    DeletionPolicy: Retain
  CPMSetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMSetLocalServiceLog
    DeletionPolicy: Retain
  PSMCfnInitLogStreamLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMCfnInitLogStreamLog
    DeletionPolicy: Retain
  PSMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMConfigurationsLog
    DeletionPolicy: Retain
  PSMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMRegistrationLog
    DeletionPolicy: Retain
  PVWACfnInitLogStreamLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWACfnInitLogStreamLog
    DeletionPolicy: Retain
  PVWAConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWAConfigurationsLog
    DeletionPolicy: Retain
  PVWARegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWARegistrationLog
    DeletionPolicy: Retain
  PVWASetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWASetLocalServiceLog
    DeletionPolicy: Retain
  LambdaDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
        - PolicyName: SSM
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:DeleteParameter'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
  StorePasswordLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Saves given password to parameter store as SecureString
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:
                  print ('The property Password must not be empty')
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
              try:
                  if event['RequestType'] == 'Delete':
                      ssmClient.delete_parameter(Name=physicalResourceId)
                      print ('Password successfully deleted. Id='+physicalResourceId)
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Create':
                      ssmClient.put_parameter(Name=physicalResourceId, Value=event['ResourceProperties']['Password'], Type='SecureString')
                      print ('The store parameter has been created. Id='+physicalResourceId)
                      response = {'SsmId': physicalResourceId}
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt
        - LambdaDeployRole
        - Arn
    Condition: EULACondition
  DeletePasswordLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Delete password from parameter store
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      ssmClient.delete_parameter(Name=event['ResourceProperties']['key'])
                      print ('Password succesfully deleted. Id='+event['ResourceProperties']['key'])
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt
        - LambdaDeployRole
        - Arn
    Condition: EULACondition
  StoreAdminPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt
        - StorePasswordLambda
        - Arn
      Password: !Ref VaultAdminPassword
    Condition: EULACondition
    DependsOn:
      - LambdaDeployRole
  CleanAdminPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt
        - DeletePasswordLambda
        - Arn
      key: !GetAtt
        - StoreAdminPassword
        - SsmId
      dummyDependency: !If
        - CreateCPMCondition
        - !GetAtt
          - CPMMachine
          - PrivateIp
        - !If
          - CreatePVWACondition
          - !GetAtt
            - PVWAMachine
            - PrivateIp
          - !If
            - CreatePSMCondition
            - !GetAtt
              - PSMMachine
              - PrivateIp
            - !GetAtt
              - PSMPMachine
              - PrivateIp
    Condition: EULACondition
  ComponentInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ComponentInstanceRole
    Condition: EULACondition
  ComponentInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:*:*:*'
    Condition: EULACondition
  CPMMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - CPM
      InstanceType: !Ref ComponentInstanceType
      UserData: !Base64
        'Fn::Sub': >-
          <script>

          cfn-init.exe -v -s ${AWS::StackId} -r CPMMachine --configsets
          ascending --region ${AWS::Region}

          </script>
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ascending:
            - configSSMAndHostname
            - configServices
            - configSignal
        configSSMAndHostname:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - >-
                    C:\Program
                    Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-cloudwatch:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1
                -LogGroup ${LogGroup} -CPMCfnInitLogStream
                ${CPMCfnInitLogStream} -CPMConfiguration
                ${CPMConfigurationsLog} -CPMRegistration  ${CPMRegistrationLog}
                -CPMSetLocalService ${CPMSetLocalServiceLog} -Region
                ${AWS::Region}
            2-downloadLatestSSM:
              command: >
                powershell.exe -Command
                [Net.ServicePointManager]::SecurityProtocol =
                [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest
                "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe"
                -OutFile "$env:USERPROFILE\Desktop\SSMAgent_latest.exe"
                -UseBasicParsing
              waitAfterCompletion: 0
              ignoreErrors: true
            3-updateLatestSSM:
              command: >
                powershell.exe -Command Start-Process -FilePath
                $env:USERPROFILE\Desktop\SSMAgent_latest.exe -ArgumentList "/S"
                -Wait
              waitAfterCompletion: 0
              ignoreErrors: true
            4-removeLatestSSM:
              command: >
                powershell.exe -Command rm -Force
                $env:USERPROFILE\Desktop\SSMAgent_latest.exe
              waitAfterCompletion: 0
              ignoreErrors: true
            5-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 60
              ignoreErrors: true
        configServices:
          commands:
            1-configuration:
              command: !Sub
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\CPMConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser ${VaultAdminUser} -VaultPort
                  1858
                - VaultIpAddress: !If
                    - DRValueEmpty
                    - !Sub '${VaultPrivateIP}'
                    - !Sub '${VaultPrivateIP},${DRPrivateIP}'
              waitAfterCompletion: 0
            2-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CPMRegistration.ps1
                -VaultAdminUser ${VaultAdminUser} -SSMAdminPassParameterID
                ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            3-configureCPMService:
              command: >
                powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1
                -Username "PasswordManagerUser" -Services "CyberArk Central
                Policy Manager Scanner"
              waitAfterCompletion: 0
            4-configureCPMService:
              command: >-
                powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1
                -Username "PasswordManagerUser" -Services "CyberArk Password
                Manager"
              waitAfterCompletion: 0
            5-CPMserviceConfig:
              command: sc config "CyberArk Password Manager" start=auto
              waitAfterCompletion: 0
            6-CPMSserviceConfig:
              command: sc config "CyberArk Central Policy Manager Scanner" start=auto
              waitAfterCompletion: 0
            7-ChangeHostName:
              command: !Sub >
                powershell.exe -Command Rename-Computer -NewName
                ${ComponentHostName} -Force -Restart
              waitAfterCompletion: forever
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId}
                --resource CPMMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    Condition: CreateCPMCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
  PVWAMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - PVWA
      InstanceType: !Ref ComponentInstanceType
      UserData: !Base64
        'Fn::Sub': >-
          <script>

          cfn-init.exe -v -s ${AWS::StackId} -r PVWAMachine --configsets
          ascending --region ${AWS::Region}

          </script>
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ascending:
            - configSSMAndHostname
            - configServices
            - configSignal
        configSSMAndHostname:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - >-
                    C:\Program
                    Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-cloudwatch:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1
                -LogGroup ${LogGroup} -PVWACfnInitLogStream
                ${PVWACfnInitLogStreamLog} -PVWAConfiguration
                ${PVWAConfigurationsLog} -PVWARegistration
                ${PVWARegistrationLog} -PVWASetLocalService
                ${PVWASetLocalServiceLog} -Region ${AWS::Region}
            2-downloadLatestSSM:
              command: >
                powershell.exe -Command
                [Net.ServicePointManager]::SecurityProtocol =
                [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest
                "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe"
                -OutFile "$env:USERPROFILE\Desktop\SSMAgent_latest.exe"
                -UseBasicParsing
              waitAfterCompletion: 0
              ignoreErrors: true
            3-updateLatestSSM:
              command: >
                powershell.exe -Command Start-Process -FilePath
                $env:USERPROFILE\Desktop\SSMAgent_latest.exe -ArgumentList "/S"
                -Wait
              waitAfterCompletion: 0
              ignoreErrors: true
            4-removeLatestSSM:
              command: >
                powershell.exe -Command rm -Force
                $env:USERPROFILE\Desktop\SSMAgent_latest.exe
              waitAfterCompletion: 0
              ignoreErrors: true
            5-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 60
              ignoreErrors: true
            6-ChangeHostName:
              command: !Sub >
                powershell.exe -Command Rename-Computer -NewName
                ${ComponentHostName} -Force -Restart
              waitAfterCompletion: forever
        configServices:
          commands:
            1-configurePVWAService:
              command: >-
                powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1
                -Username "PVWAReportsUser" -Services "CyberArk Scheduled Tasks"
              waitAfterCompletion: 0
            2-configuration:
              command: !Sub
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\PVWAConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser ${VaultAdminUser} -VaultPort
                  1858 -HostName ${InputHostname}
                - VaultIpAddress: !If
                    - DRValueEmpty
                    - !Sub '${VaultPrivateIP}'
                    - !Sub '${VaultPrivateIP},${DRPrivateIP}'
                  InputHostname: !If
                    - PVWAHostNameEmpty
                    - empty
                    - !Sub '${PVWAHostName}'
              waitAfterCompletion: 0
            3-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\PVWARegistration.ps1
                -VaultAdminUser ${VaultAdminUser} -SSMAdminPassParameterID
                ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            4-startAppPool:
              command: >-
                powershell -Command "& {&'Import-Module' WebAdministration}"; "&
                {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}"; "&
                {&'Set-ItemProperty' -Path
                IIS:\AppPools\PasswordVaultWebAccessPool -Name autoStart -Value
                'true'}"
              waitAfterCompletion: 0
            5-CSTserviceConfig:
              command: sc config "CyberArk Scheduled Tasks" start=auto
              waitAfterCompletion: 0
            6-restart:
              command: powershell.exe -Command "Restart-Computer -Force"
              waitAfterCompletion: forever
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId}
                --resource PVWAMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    Condition: CreatePVWACondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
  PSMMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - PSM
      InstanceType: !Ref ComponentInstanceType
      UserData: !Base64
        'Fn::Sub': >-
          <script>

          cfn-init.exe -v -s ${AWS::StackId} -r PSMMachine --configsets
          ascending --region ${AWS::Region}

          </script>
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ascending:
            - configSSMAndHostname
            - configServices
            - configSignal
        configSSMAndHostname:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - >-
                    C:\Program
                    Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-cloudwatch:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1
                -LogGroup ${LogGroup} -PSMCfnInitLogStream
                ${PSMCfnInitLogStreamLog} -PSMConfiguration
                ${PSMConfigurationsLog} -PSMRegistration ${PSMRegistrationLog}
                -Region ${AWS::Region}
            2-downloadLatestSSM:
              command: >
                powershell.exe -Command
                [Net.ServicePointManager]::SecurityProtocol =
                [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest
                "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe"
                -OutFile "$env:USERPROFILE\Desktop\SSMAgent_latest.exe"
                -UseBasicParsing
              waitAfterCompletion: 0
              ignoreErrors: true
            3-updateLatestSSM:
              command: >
                powershell.exe -Command Start-Process -FilePath
                $env:USERPROFILE\Desktop\SSMAgent_latest.exe -ArgumentList "/S"
                -Wait
              waitAfterCompletion: 0
              ignoreErrors: true
            4-removeLatestSSM:
              command: >
                powershell.exe -Command rm -Force
                $env:USERPROFILE\Desktop\SSMAgent_latest.exe
              waitAfterCompletion: 0
              ignoreErrors: true
            5-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 60
              ignoreErrors: true
        configServices:
          commands:
            1-configuration:
              command: !Sub
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\PSMConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser ${VaultAdminUser} -VaultPort
                  1858
                - VaultIpAddress: !If
                    - DRValueEmpty
                    - !Sub '${VaultPrivateIP}'
                    - !Sub '${VaultPrivateIP},${DRPrivateIP}'
              waitAfterCompletion: 0
            2-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\PSMRegistration.ps1
                -VaultAdminUser ${VaultAdminUser} -SSMAdminPassParameterID
                ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            3-PSMserviceConfig:
              command: sc config "Cyber-Ark Privileged Session Manager" start=auto
              waitAfterCompletion: 0
            4-ChangeHostName:
              command: !Sub >
                powershell.exe -Command Rename-Computer -NewName
                ${ComponentHostName} -Force -Restart
              waitAfterCompletion: forever
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId}
                --resource PSMMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    Condition: CreatePSMCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
  PSMPMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - PSMP
      InstanceType: !Ref ComponentInstanceType
      UserData: !Base64
        'Fn::Sub': >
          #!/bin/bash -e

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource
          PSMPMachine --configsets ascending --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
          PSMPMachine --region ${AWS::Region}
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ascending:
            - update_ssmagent
            - install_cwlogs
            - install_psmp
        update_ssmagent:
          commands:
            01_download_ssmagent_update:
              command: >-
                sudo yum install -y
                https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              ignoreErrors: true
              waitAfterCompletion: 0
        install_cwlogs:
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state
                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${LogGroup}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format =
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${LogGroup}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format =
                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${LogGroup}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format =
                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${LogGroup}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format =
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
              waitAfterCompletion: 0
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/awslogs/awslogs.conf
        install_psmp:
          files:
            /root/CD-Image/preinstall.sh:
              content: |-
                #!/bin/bash -e

                hostname $1

                sed -i "s/localhost\\./$1./g" /etc/hosts

                sed -i "s/localhost /$1 /g" /etc/hosts

                chmod 646 /etc/sysconfig/network
                sed -i "s/HOSTNAME=localhost.localdomain/HOSTNAME=$1/g" \
                /etc/sysconfig/network

                chmod 644 /etc/hosts

                chmod 644 /etc/sysconfig/network
            /root/CD-Image/createCredFile.sh:
              content: |-
                #!/bin/bash -e
                adminpassword=`aws ssm get-parameters --names $2 --region $3 \
                --with-decryption --output text --query Parameters[0].Value`
                /opt/CARKpsmp/bin/createcredfile /root/CD-Image/user.cred \
                Password -Username $1 -Password $adminpassword -HostName
          commands:
            1-ScriptsPermissions:
              command: >-
                sudo chmod 700 /root/CD-Image/preinstall.sh
                /root/CD-Image/createCredFile.sh
              waitAfterCompletion: 0
            2-PreInstall:
              command: !Sub >
                sudo /root/CD-Image/preinstall.sh ${ComponentHostName}
                waitAfterCompletion: 0
            3-CreateCredFile:
              command: !Sub >
                sudo /root/CD-Image/createCredFile.sh ${VaultAdminUser}
                ${StoreAdminPassword.SsmId} ${AWS::Region} ${ComponentHostName}
                waitAfterCompletion: 0
            4-PSMPdeploy:
              command: !Sub
                - >-
                  hostname=`curl
                  http://169.254.169.254/latest/meta-data/instance-id` &&
                  /root/CD-Image/register_and_activation.sh
                  /root/CD-Image/user.cred ${VaultIpAddress} $hostname y
                - VaultIpAddress: !If
                    - DRValueEmpty
                    - !Sub '${VaultPrivateIP}'
                    - !Sub '${VaultPrivateIP},${DRPrivateIP}'
              waitAfterCompletion: 0
    Condition: CreatePSMPCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    DeletionPolicy: Retain
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  VaultPrivateIP:
    Type: String
    Description: Enter the IP of the Primary Vault instance.
  DRPrivateIP:
    Type: String
    Description: Enter the IP of the DR Vault instance. (Optional)
  VaultAdminUser:
    Type: String
    Description: Enter the Administrator Vault user.
    Default: Administrator
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
  ComponentToInstall:
    Type: String
    Description: Choose the Component to install.
    AllowedValues:
      - CPM
      - PVWA
      - PSM
      - PSMP
    Default: CPM
  ComponentInstanceName:
    Type: String
    Description: Enter a name for the PAS Component instance.
    Default: CyberArk Component
  ComponentHostName:
    Type: String
    Description: Enter the host name for the PAS Component instance.
  ComponentInstanceType:
    Type: String
    Description: Select the instance type of the Component instance.
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - t3.medium
      - c5.large
    Default: m5.large
  ComponentInstanceSecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: Assign Security Groups to the Component instance.
  ComponentInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet ID where the Component instance will reside.
  PVWAHostName:
    Type: String
    Description: IP or FQDN of PVWA server
Conditions:
  EULACondition: !Equals
    - Accept
    - !Ref EULA
  CreateCPMCondition: !Equals
    - CPM
    - !Ref ComponentToInstall
  CreatePVWACondition: !Equals
    - PVWA
    - !Ref ComponentToInstall
  CreatePSMCondition: !Equals
    - PSM
    - !Ref ComponentToInstall
  CreatePSMPCondition: !Equals
    - PSMP
    - !Ref ComponentToInstall
  DRValueEmpty: !Equals
    - ''
    - !Ref DRPrivateIP
  PVWAHostNameEmpty: !Equals
    - ''
    - !Ref PVWAHostName
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: General parameters
        Parameters:
          - EULA
          - KeyName
      - Label:
          default: Primary Vault and DR information
        Parameters:
          - VaultPrivateIP
          - DRPrivateIP
          - VaultAdminUser
          - VaultAdminPassword
      - Label:
          default: Component configuration
        Parameters:
          - ComponentToInstall
          - ComponentInstanceName
          - ComponentHostName
          - ComponentInstanceType
          - ComponentInstanceSecurityGroups
          - ComponentInstanceSubnetId
          - PVWAHostName
    ParameterLabels:
      EULA:
        default: License Agreement
      KeyName:
        default: Key Pair
      VaultPrivateIP:
        default: Primary Vault Private IP
      DRPrivateIP:
        default: DR Vault Private IP
      VaultAdminUser:
        default: Vault Admin User
      VaultAdminPassword:
        default: Vault Admin Password
      ComponentToInstall:
        default: Component To Install
      ComponentInstanceName:
        default: Component Instance Name
      ComponentHostName:
        default: Component Host Name
      ComponentInstanceType:
        default: Component Instance Type
      ComponentInstanceSecurityGroups:
        default: Component Instance Security Groups
      ComponentInstanceSubnetId:
        default: Component Instance Subnet ID
      PVWAHostName:
        default: PVWA FQDN (Optional)
Mappings:
  RegionMap:
    us-east-1:
      CPM: ami-00f590af64ade8748
      PVWA: ami-076593dcd726c23f5
      PSM: ami-00afadacdf17657f0
      PSMP: ami-0ff7d290a0a59e9af
    us-east-2:
      CPM: ami-08034c344a821dfe3
      PVWA: ami-01043d67e3e6169d2
      PSM: ami-0a47c55cf14be9f7b
      PSMP: ami-0d4b5aae1aa552bfe
    eu-west-2:
      CPM: ami-017a1d7c1d31faf98
      PVWA: ami-0f2db7e10644798a9
      PSM: ami-0ba248bd61d9355eb
      PSMP: ami-0e1313459871ac044
    us-west-1:
      CPM: ami-009902f6f4b0a60e9
      PVWA: ami-09b12de7c7fd321ab
      PSM: ami-00d4afe69a4959435
      PSMP: ami-0c4ca8b74492dca58
    us-west-2:
      CPM: ami-04c6ae8963c5763c3
      PVWA: ami-08aa2108685ac5ffd
      PSM: ami-08ace74fec7fa1293
      PSMP: ami-09cbbc97bd7632288
    ca-central-1:
      CPM: ami-0a083494453bfaa00
      PVWA: ami-0484b045a1b2df41d
      PSM: ami-0a1899f2db7879820
      PSMP: ami-0b7ee1d6dc4d46749
    eu-west-1:
      CPM: ami-00b9312293746ddc7
      PVWA: ami-0123945a30b4397a0
      PSM: ami-055797a51fd69f87a
      PSMP: ami-002907bd8a065f6d7
    eu-central-1:
      CPM: ami-00e48bb56cb48bcac
      PVWA: ami-0bbd7321ab1c8b40d
      PSM: ami-0e5cfcb7995396ece
      PSMP: ami-08f73d068b16dc6f7
    ap-southeast-1:
      CPM: ami-04bd4ea2c7ec7d6d3
      PVWA: ami-0fb4f39c13a43f229
      PSM: ami-03cdefc68513080f7
      PSMP: ami-0533ed0c9fb526e7b
    ap-southeast-2:
      CPM: ami-0344dde570a581fc8
      PVWA: ami-069c6d2dbbdd5bda7
      PSM: ami-07af05bb0f6125b00
      PSMP: ami-0fa8a8427040f0a7e
    ap-northeast-2:
      CPM: ami-05f57efc9ec12ae43
      PVWA: ami-0f78ff4ed43ef2c9d
      PSM: ami-027565ab508ddc064
      PSMP: ami-07b1a5ef1d315b8a4
    ap-northeast-1:
      CPM: ami-0a3d5480f8556d550
      PVWA: ami-0df0e9dfbec83202b
      PSM: ami-0b6eaa39085af85eb
      PSMP: ami-086b005ec5c41b129
    ap-south-1:
      CPM: ami-08bf8c691219ab111
      PVWA: ami-0694ec41a8b2f1682
      PSM: ami-08ef88d9c140f194e
      PSMP: ami-0e2d9d665cca9f4cd
    sa-east-1:
      CPM: ami-0b634c6b4a68c9575
      PVWA: ami-00f8d7dafdbb87942
      PSM: ami-0a929153b71f68464
      PSMP: ami-00fe192a8bafd3a51
    us-gov-west-1:
      CPM: ami-95093af4
      PVWA: ami-a50b38c4
      PSM: ami-f8063599
      PSMP: ami-20ebd841
    us-gov-east-1:
      CPM: ami-02323c1a259174c93
      PVWA: ami-08d70b8aa066991e6
      PSM: ami-0458a131fafcef33a
      PSMP: ami-04ea67f00fdea37ec
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref LogGroup