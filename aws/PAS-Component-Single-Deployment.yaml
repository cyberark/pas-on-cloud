AWSTemplateFormatVersion: "2010-09-09"
Description: This template handles the deployment of a selected CyberArk single component to an existing network infrastructure
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  CPMUserDataLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPM/UserDataLog
    DeletionPolicy: Retain
  CPMConfigurationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPM/CPMConfiguration
    DeletionPolicy: Retain
  CPMRegistrationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPM/CPMRegistrationLog
    DeletionPolicy: Retain
  CPMSetLocalServiceLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreateCPMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPM/CPMSetLocalServiceLog
    DeletionPolicy: Retain
  PSMUserDataLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSM/UserDataLog
    DeletionPolicy: Retain
  PSMConfigurationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSM/PSMConfigurationLog
    DeletionPolicy: Retain
  PSMRegistrationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSM/PSMRegistrationLog
    DeletionPolicy: Retain
  PSMHardeningLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePSMCondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSM/PSMHardeningLog
    DeletionPolicy: Retain
  PVWAUserDataLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWA/UserDataLog
    DeletionPolicy: Retain
  PVWAConfigurationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWA/PVWAConfigurationLog
    DeletionPolicy: Retain
  PVWARegistrationLogStream:
    Type: AWS::Logs::LogStream
    Condition: CreatePVWACondition
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWA/PVWARegistrationLog
    DeletionPolicy: Retain
  StoreAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt
        - StorePasswordLambda
        - Arn
      Password: !Ref VaultAdminPassword
    DependsOn:
      - LambdaDeployRole
  CleanAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt
        - DeletePasswordLambda
        - Arn
      key: !GetAtt
        - StoreAdminPassword
        - SsmId
      dummyDependency: !If
        - CreateCPMCondition
        - !GetAtt
          - CPMMachine
          - PrivateIp
        - !If
          - CreatePVWACondition
          - !GetAtt
            - PVWAMachine
            - PrivateIp
          - !If
            - CreatePSMCondition
            - !GetAtt
              - PSMMachine
              - PrivateIp
            - !If
              - CreatePSMPCondition
              - !GetAtt
                - PSMPMachine
                - PrivateIp
              - !GetAtt
                - PTAMachine
                - PrivateIp
  LambdaDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
        - PolicyName: SSM
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:DeleteParameter'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
  ComponentInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
  ComponentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ComponentInstancesRole
    DeletionPolicy: Retain
  StorePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Saves given password to parameter store as SecureString
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:
                  print ('The property Password must not be empty')
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
              try:
                  if event['RequestType'] == 'Delete':
                      ssmClient.delete_parameter(Name=physicalResourceId)
                      print ('Password successfully deleted. Id='+physicalResourceId)
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Create':
                      ssmClient.put_parameter(Name=physicalResourceId, Value=event['ResourceProperties']['Password'], Type='SecureString')
                      print ('The store parameter has been created. Id='+physicalResourceId)
                      response = {'SsmId': physicalResourceId}
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  DeletePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Delete password from parameter store
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      ssmClient.delete_parameter(Name=event['ResourceProperties']['key'])
                      print ('Password succesfully deleted. Id='+event['ResourceProperties']['key'])
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  PVWAMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: !Ref ComponentAmi
      InstanceType: !Ref ComponentInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "Region"                        = "${AWS::Region}"
              "LogGroup"                      = "${LogGroup}"
              "UserDataLogStream"             = "${PVWAUserDataLogStream}"
              "PVWAConfigurationLogStream"    = "${PVWAConfigurationLogStream}"
              "PVWARegistrationLogStream"     = "${PVWARegistrationLogStream}"
              "VaultAdminUser"                = "${VaultAdminUser}"
              "SSMAdminPassParameterID"       = "${StoreAdminPassword.SsmId}"
              "VaultPrivateIP"                = "${VaultIpAddress}"
              "ComponentHostname"             = "${ComponentHostname}"
              "StackName"                     = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - VaultIpAddress: !If
              - DRValueEmpty
              - !Sub '${VaultPrivateIP}'
              - !Sub '${VaultPrivateIP},${DRPrivateIP}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Condition: CreatePVWACondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
  CPMMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: !Ref ComponentAmi
      InstanceType: !Ref ComponentInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "Region"                        = "${AWS::Region}"
              "LogGroup"                      = "${LogGroup}"
              "UserDataLogStream"             = "${CPMUserDataLogStream}"
              "CPMConfigurationLogStream"     = "${CPMConfigurationLogStream}"
              "CPMRegistrationLogStream"      = "${CPMRegistrationLogStream}"
              "CPMSetLocalServiceLogStream"   = "${CPMSetLocalServiceLogStream}"
              "VaultAdminUser"                = "${VaultAdminUser}"
              "SSMAdminPassParameterID"       = "${StoreAdminPassword.SsmId}"
              "VaultPrivateIP"                = "${VaultIpAddress}"
              "PVWAPrivateIP"                 = "${PVWAPrivateEndpoint}"
              "ComponentHostname"             = "${ComponentHostname}"
              "StackName"                     = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - VaultIpAddress: !If
              - DRValueEmpty
              - !Sub '${VaultPrivateIP}'
              - !Sub '${VaultPrivateIP},${DRPrivateIP}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Condition: CreateCPMCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
  PSMMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: !Ref ComponentAmi
      InstanceType: !Ref ComponentInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "Region"                        = "${AWS::Region}"
              "LogGroup"                      = "${LogGroup}"
              "UserDataLogStream"             = "${PSMUserDataLogStream}"
              "PSMConfigurationLogStream"     = "${PSMConfigurationLogStream}"
              "PSMRegistrationLogStream"      = "${PSMRegistrationLogStream}"
              "PSMHardeningLogStream"         = "${PSMHardeningLogStream}"
              "VaultAdminUser"                = "${VaultAdminUser}"
              "SSMAdminPassParameterID"       = "${StoreAdminPassword.SsmId}"
              "VaultPrivateIP"                = "${VaultIpAddress}"
              "ComponentHostname"             = "${ComponentHostname}"
              "StackName"                     = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - VaultIpAddress: !If
              - DRValueEmpty
              - !Sub '${VaultPrivateIP}'
              - !Sub '${VaultPrivateIP},${DRPrivateIP}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Condition: CreatePSMCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
  PSMPMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: !Ref ComponentAmi
      InstanceType: !Ref ComponentInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            sudo /opt/CD-Image/register.sh \
              "aws" \
              "${VaultIpAddress}" \
              "${UniqueId}" \
              "ec2-user" \
              "${VaultAdminUser}" \
              "${StoreAdminPassword.SsmId}" \
              "${ComponentHostname}" \
              "${AWS::Region}" \
              "${LogGroup}" \
              "${AWS::StackName}"
          - VaultIpAddress: !If
            - DRValueEmpty
            - !Sub '${VaultPrivateIP}'
            - !Sub '${VaultPrivateIP},${DRPrivateIP}'
            UniqueId: !Select
                - 4
                - !Split
                    - '-'
                    - !Select
                        - 2
                        - !Split ["/", !Ref "AWS::StackId"]
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Condition: CreatePSMPCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
  PTAMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ComponentInstanceName
      SecurityGroupIds: !Ref ComponentInstanceSecurityGroups
      SubnetId: !Ref ComponentInstanceSubnetId
      ImageId: !Ref ComponentAmi
      InstanceType: !Ref ComponentInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            sudo /tmp/register.sh \
              "aws" \
              "${VaultIpAddress}" \
              "${PVWAPrivateEndpoint}" \
              "${VaultAdminUser}" \
              "${StoreAdminPassword.SsmId}" \
              "${ComponentHostname}" \
              "${AWS::Region}" \
              "${LogGroup}" \
              "${AWS::StackName}"
          - VaultIpAddress: !If
            - DRValueEmpty
            - !Sub '${VaultPrivateIP}'
            - !Sub '${VaultPrivateIP},${DRPrivateIP}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Condition: CreatePTACondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  VaultPrivateIP:
    Type: String
    Description: Enter the IP of the Primary Vault instance.
  DRPrivateIP:
    Type: String
    Description: Enter the IP of the DR Vault instance. (Optional)
  VaultAdminUser:
    Type: String
    Description: Enter the Administrator Vault user.
    Default: Administrator
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
  ComponentToInstall:
    Type: String
    Description: Choose the Component to install.
    AllowedValues:
      - PVWA
      - CPM
      - PSM
      - PSMP
      - PTA
    Default: PVWA
  ComponentAmi:
    Type: String
    Description: Enter the Component Image ID.
    AllowedPattern: ^ami-[a-f\d]{8}(?:[a-f\d]{9})?$
    ConstraintDescription: An Amazon EC2 image ID, such as ami-0ff8a91507f77f867
  ComponentInstanceName:
    Type: String
    Description: Enter a name for the PAS Component instance.
    Default: CyberArk Component
  ComponentHostname:
    Type: String
    Description: Enter the hostname for the PAS Component instance.
    AllowedPattern: ^((?!-)(?=.*[a-zA-Z])[A-Za-z0-9-]{3,15}(?<!-))$
    ConstraintDescription: Parameter must only contain uppercase and lowercase letters (at least one letter), hyphens and numbers. Hostname can't start or end with hyphen.
    MaxLength: 15
    MinLength: 3
    Default: pas-component
  PVWAPrivateEndpoint:
    Type: String
    Description: Enter the PVWA's private DNS name (for PTA) or private IP address of the PVWA instance (for CPM). Other components do not require this parameter.
  ComponentInstanceType:
    Type: String
    Description: Select the instance type of the Component instance.
    AllowedValues:
      - c5.xlarge
      - m5.xlarge
      - c5.2xlarge
      - m5.2xlarge
      - c5.4xlarge
      - m5.4xlarge
      - c5.9xlarge
      - m5.8xlarge
    Default: c5.xlarge
  ComponentInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the Component instance.
  ComponentInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet ID where the Component instance will reside.
Rules:
  EULAAcception:
    Assertions:
      - Assert: !Equals
          - !Ref EULA
          - Accept
        AssertDescription: You must accept EULA to continue.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: General parameters
        Parameters:
          - EULA
          - KeyName
      - Label:
          default: Primary Vault and DR information
        Parameters:
          - VaultPrivateIP
          - DRPrivateIP
          - VaultAdminUser
          - VaultAdminPassword
      - Label:
          default: Component configuration
        Parameters:
          - ComponentToInstall
          - ComponentAmi
          - ComponentInstanceName
          - ComponentHostname
          - PVWAPrivateEndpoint
          - ComponentInstanceType
          - ComponentInstanceSecurityGroups
          - ComponentInstanceSubnetId
    ParameterLabels:
      EULA:
        default: License Agreement
      KeyName:
        default: Key Pair
      VaultPrivateIP:
        default: Primary Vault Private IP
      DRPrivateIP:
        default: DR Vault Private IP
      VaultAdminUser:
        default: Vault Admin User
      VaultAdminPassword:
        default: Vault Admin Password
      ComponentToInstall:
        default: Component To Install
      ComponentAmi:
        default: Component Image ID
      ComponentInstanceName:
        default: Component Instance Name
      ComponentHostname:
        default: Component Host Name
      PVWAPrivateEndpoint:
        default: PVWA instance private DNS name/IP address
      ComponentInstanceType:
        default: Component Instance Type
      ComponentInstanceSecurityGroups:
        default: Component Instance Security Groups
      ComponentInstanceSubnetId:
        default: Component Instance Subnet ID
Conditions:
  CreateCPMCondition: !Equals
    - CPM
    - !Ref ComponentToInstall
  CreatePVWACondition: !Equals
    - PVWA
    - !Ref ComponentToInstall
  CreatePSMCondition: !Equals
    - PSM
    - !Ref ComponentToInstall
  CreatePSMPCondition: !Equals
    - PSMP
    - !Ref ComponentToInstall
  CreatePTACondition: !Equals
    - PTA
    - !Ref ComponentToInstall
  DRValueEmpty: !Equals
    - ''
    - !Ref DRPrivateIP
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref LogGroup
