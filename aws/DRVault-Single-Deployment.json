{
   "Resources":{
      "LogGroup":{
         "Type":"AWS::Logs::LogGroup",
         "Properties":{
            "RetentionInDays":30
         },
         "DeletionPolicy":"Retain"
      },
      "DeployBucket": {
         "Type": "AWS::S3::Bucket",
         "Properties": {
            "AccessControl": "Private"
         }
      },
      "LambdaDeployRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Policies":[
               {
                  "PolicyName":"CloudWatch",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "logs:CreateLogGroup",
                              "logs:CreateLogStream",
                              "logs:DescribeLogGroups",
                              "logs:DescribeLogStreams",
                              "logs:PutLogEvents"
                           ],
                           "Resource":[
                              "*"
                           ]
                        }
                     ]
                  }
               },
               {
                  "PolicyName":"SSM",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "ssm:PutParameter",
                              "ssm:DeleteParameter"
                           ],
                           "Resource":[
                              {
                                 "Fn::Sub":"arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                              }
                           ]
                        }
                     ]
                  }
               },
               {
                  "PolicyName": "S3",
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                           "s3:GetObject",
                           "s3:GetObjectVersion",
                           "s3:ListBucket",
                           "s3:PutObject",
                           "s3:DeleteObject",
                           "s3:DeleteObjectVersion"
                        ],
                        "Resource": [
                              {
                                 "Fn::Sub":"arn:${AWS::Partition}:s3:::${DeployBucket}/*"
                              },
                              {
                                 "Fn::Sub":"arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*"
                              }
                        ]
                     }]
                  }
               }
            ]
         },
         "Condition":"EULACondition"
      },
      "StorePasswordLambda":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Description":"Saves given password to parameter store as SecureString",
            "Code":{
               "ZipFile":{
                  "Fn::Join":[
                     "\n",
                     [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def storePassword(name, value):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.put_parameter(",
                        "        Name = name,",
                        "        Value = value,",
                        "        Type = 'SecureString'",
                        "    )",
                        "",
                        "def deletePassword(name):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.delete_parameter(",
                        "        Name = name",
                        "    )",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "",
                        "    if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:",
                        "            print 'The property Password must not be empty'",
                        "            return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)",
                        "",
                        "    try:",
                        "        if event['RequestType'] == 'Delete':",
                        "            deletePassword(physicalResourceId)",
                        "            print 'Password successfully deleted. Id='+physicalResourceId",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "        if event['RequestType'] == 'Create':",
                        "            storePassword(physicalResourceId, event['ResourceProperties']['Password'])",
                        "            print 'The store parameter has been created. Id='+physicalResourceId",
                        "            response = { 'SsmId': physicalResourceId }",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)",
                        "",
                        "    except client.exceptions.ParameterNotFound:",
                        "        print 'Item already removed'",
                        "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime":"python2.7",
            "Handler":"index.lambda_handler",
            "Role":{
               "Fn::GetAtt":[
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         },
         "Condition":"EULACondition"
      },
      "DeletePasswordLambda":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Description":"Delete password from parameter store",
            "Code":{
               "ZipFile":{
                  "Fn::Join":[
                     "\n",
                     [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def deletePassword(name):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.delete_parameter(",
                        "        Name = name",
                        "    )",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "    ",
                        "    try:",
                        "        if event['RequestType'] == 'Create':",
                        "            deletePassword(event['ResourceProperties']['key'])",
                        "            print 'Password succesfully deleted. Id='+event['ResourceProperties']['key']",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "        if event['RequestType'] == 'Delete':",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "    except client.exceptions.ParameterNotFound:",
                        "        print 'Item already removed'",
                        "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime":"python2.7",
            "Handler":"index.lambda_handler",
            "Role":{
               "Fn::GetAtt":[
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         },
         "Condition":"EULACondition"
      },
      "CopyfileFromBucketLambda": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Description": "Copy files from foreign region to local region",
            "Code": {
               "ZipFile": {
                  "Fn::Join": [
                     "\n", [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def CopyFileFromBucketToBucket(bucket, fileKey, destination, destBucket):",
                        "    s3Client = boto3.client('s3')",
                        "    copy_source = {'Bucket': bucket,'Key': fileKey}",
                        "    s3Client.copy_object(CopySource=copy_source, Bucket=destBucket, Key=destination)",
                        "",
                        "def DeleteObjectFromBucket(bucket, key):",
                        "    s3Client = boto3.client('s3')",
                        "    s3Client.delete_object(Bucket=bucket, Key=key)",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "",
                        "    try:",
                        "        if event['RequestType'] == 'Delete':",
                        "            DeleteObjectFromBucket(event['ResourceProperties']['DestBucket'], event['ResourceProperties']['FileKey'])",
                        "            print 'Object Deleted Successfully'",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "        if event['RequestType'] == 'Create':",
                        "            CopyFileFromBucketToBucket(event['ResourceProperties']['BucketName'],event['ResourceProperties']['FileKey'],event['ResourceProperties']['FileName'],event['ResourceProperties']['DestBucket'])",
                        "            print 'file copied successfully'",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime": "python2.7",
            "Handler": "index.lambda_handler",
            "Role": {
               "Fn::GetAtt": [
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         }
      },
      "StoreMasterPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Version":"1.0",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "StorePasswordLambda",
                  "Arn"
               ]
            },
            "Password":{
               "Ref":"VaultMasterPassword"
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole"
         ]
      },
      "StoreAdminPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "StorePasswordLambda",
                  "Arn"
               ]
            },
            "Password":{
               "Ref":"VaultAdminPassword"
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole"
         ]
      },
      "CopyLicenseToBucket": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Version": "1.0",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "CopyfileFromBucketLambda",
                  "Arn"
               ]
            },
            "BucketName": {
               "Ref": "VaultFilesBucket"
            },
            "FileKey": {
               "Ref": "LicenseFile"
            },
            "FileName": {
               "Ref": "LicenseFile"
            },
            "DestBucket": {
               "Ref": "DeployBucket"
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole",
            "StorePasswordLambda"
         ]
      },
      "CopyRecpubToBucket": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Version": "1.0",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "CopyfileFromBucketLambda",
                  "Arn"
               ]
            },
            "BucketName": {
               "Ref": "VaultFilesBucket"
            },
            "FileKey": {
               "Ref": "RecoveryPublicKey"
            },
            "FileName": {
               "Ref": "RecoveryPublicKey"
            },
            "DestBucket": {
               "Ref": "DeployBucket"
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole"
         ]
      },
      "VaultDRMachine":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "",
                        [
                           {
                              "Ref":"VaultInstanceName"
                           }
                        ]
                     ]
                  }
               }
            ],
            "SecurityGroupIds":{
               "Ref":"VaultInstanceSecurityGroups"
            },
            "SubnetId":{
               "Ref":"DRInstanceSubnetId"
            },
            "ImageId":{
               "Fn::FindInMap":[
                  "RegionMap",
                  {
                     "Ref":"AWS::Region"
                  },
                  "Vault"
               ]
            },
            "InstanceType":{
               "Ref":"VaultInstanceType"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r VaultDRMachine",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        "  --resource VaultDRMachine",
                        "  --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "IamInstanceProfile":{
               "Ref":"VaultInstancesProfile"
            }
         },
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "config":{
                  "files":{
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub":"        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub":"        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\deploy.py":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "def downloadFile(bucket,filePath,target):\n",
                                 "\ts3Client = boto3.client('s3', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\ts3Client.download_file(\n",
                                 "\t\tBucket = bucket,\n",
                                 "\t\tKey = filePath,\n",
                                 "\t\tFilename = target\n",
                                 "\t)\n",
                                 "\treturn target\n",
                                 "\n",
                                 "masterp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreMasterPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "drp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreDRPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "licensef = downloadFile('",
                                 {
                                    "Ref":"DeployBucket"
                                 },
                                 "','",
                                 {
                                    "Ref":"LicenseFile"
                                 },
                                 "','C:\\\\vaultLicense.xml')\n",
                                 "publickeyf = downloadFile('",
                                 {
                                    "Ref":"DeployBucket"
                                 },
                                 "','",
                                 {
                                    "Ref":"RecoveryPublicKey"
                                 },
                                 "','C:\\\\recoveryPublic.key')\n",
                                 "\n",
                                 "vaultIp = '",
                                 {
                                    "Ref":"VaultPrivateIP"
                                 },
                                 "'\n",
                                 "sys.exit(subprocess.call([",
                                 "'C:\\\\Program files (x86)\\\\PrivateArk\\\\Server\\\\CAVaultManager.exe',",
                                 "'PostInstall',",
                                 "'/AdminPass',",
                                 "adminp,",
                                 "'/MasterPass',",
                                 "masterp,",
                                 "'/RecPub',",
                                 "publickeyf,",
                                 "'/IsPrimaryOrDR',",
                                 "'DR',",
                                 "'/PrimaryVaultIP',",
                                 "vaultIp,",
                                 "'/DRPassword',",
                                 "drp,",
                                 "'/EnableFailOver',",
                                 "'/LicensePath',",
                                 "licensef,",
                                 "'/AcceptEULA',",
                                 "'yes',",
                                 "'/KMSRegion','",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "']))\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "AmazonSSMAgent":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands":{
                     "01-restartSSM":{
                        "command":"powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion":"30",
                        "ignoreErrors":"true"
                     },
                     "02-deploy":{
                        "command":"C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion":"0",
                        "ignoreErrors":"false"
                     },
                     "03-CheckVaultServiceStatus": {
                        "command": "powershell.exe -Command \" if ((Get-Service 'PrivateArk Server').Status -eq 'Stopped') {exit 0} else {exit 1} \"",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "04-CheckDRServiceStatus": {
                        "command": "powershell.exe -Command \" if ((Get-Service 'CyberArk Vault Disaster Recovery').Status -eq 'Running') {exit 0} else {exit 1} \"",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "05-ChangeHostName":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName ",
                                 {
                                    "Ref":"VaultHostName"
                                 },
                                 " -Force -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever",
                        "ignoreErrors":"false"
                     },
                     "99-SignalCompletion":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "         --resource VaultDRMachine ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT15M"
            }
         },
         "DependsOn":[
            "CopyLicenseToBucket",
            "CopyRecpubToBucket"
         ],
         "DeletionPolicy":"Retain"
      },
      "StoreDRPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "StorePasswordLambda",
                  "Arn"
               ]
            },
            "Password":{
               "Ref":"VaultDRPassword"
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole"
         ]
      },
      "CleanMasterPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Version":"1.0",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "DeletePasswordLambda",
                  "Arn"
               ]
            },
            "key":{
               "Fn::GetAtt":[
                  "StoreMasterPassword",
                  "SsmId"
               ]
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole",
            "StorePasswordLambda",
            "VaultDRMachine"
         ]
      },
      "CleanAdminPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Version":"1.0",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "DeletePasswordLambda",
                  "Arn"
               ]
            },
            "key":{
               "Fn::GetAtt":[
                  "StoreAdminPassword",
                  "SsmId"
               ]
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole",
            "StorePasswordLambda",
            "VaultDRMachine"
         ]
      },
      "CleanDRPassword":{
         "Type":"AWS::CloudFormation::CustomResource",
         "Version":"1.0",
         "Properties":{
            "ServiceToken":{
               "Fn::GetAtt":[
                  "DeletePasswordLambda",
                  "Arn"
               ]
            },
            "key":{
               "Fn::GetAtt":[
                  "StoreDRPassword",
                  "SsmId"
               ]
            }
         },
         "Condition":"EULACondition",
         "DependsOn":[
            "LambdaDeployRole",
            "StorePasswordLambda",
            "VaultDRMachine"
         ]
      },
      "VaultInstancesS3VaultFilesBucketPolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"VaultFilesBucketAccess",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "s3:GetObject",
                        "s3:GetObjectVersion"
                     ],
                     "Resource":{ "Fn::Sub": "arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*" }
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"VaultInstancesRole"
               }
            ]
         },
         "Condition":"EULACondition"
      },
      "VaultInstancesSSMPolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"VaultInstancesSsmAccess",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "ssm:GetParameter"
                     ],
                     "Resource":[
                        {
                           "Fn::Sub":"arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                        }
                     ]
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"VaultInstancesRole"
               }
            ]
         },
         "Condition":"EULACondition"
      },
      "VaultInstancesRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/",
            "ManagedPolicyArns":[
               {
                  "Fn::Sub":"arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
               }
            ],
            "Policies":[
               {
                  "PolicyName":"LogRolePolicy",
                  "PolicyDocument":{
                     "Version":"2012-10-17",
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "logs:CreateLogGroup",
                              "logs:CreateLogStream",
                              "logs:PutLogEvents",
                              "logs:DescribeLogStreams"
                           ],
                           "Resource":[
                              {
                                 "Fn::Sub":"arn:${AWS::Partition}:logs:*:*:*"
                              }
                           ]
                        }
                     ]
                  }
               }
            ]
         },
         "Condition":"EULACondition",
         "DeletionPolicy":"Retain"
      },
      "VaultInstancesProfile":{
         "Type":"AWS::IAM::InstanceProfile",
         "Properties":{
            "Path":"/",
            "Roles":[
               {
                  "Ref":"VaultInstancesRole"
               }
            ]
         },
         "Condition":"EULACondition",
         "DeletionPolicy":"Retain"
      },
      "VaultInstancesKMSPolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"VaultInstancesKMSAccess",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "kms:Encrypt",
                        "kms:Decrypt"
                     ],
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"VaultInstancesRole"
               }
            ]
         },
         "Condition":"EULACondition",
         "DeletionPolicy":"Retain"
      },
      "VaultBootstrapKMSPolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"VaultBootstrapKMSAccess",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "kms:CreateKey",
                        "kms:GenerateRandom"
                     ],
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"VaultInstancesRole"
               }
            ]
         }
      }
   },
   "Parameters":{
      "EULA":{
         "Type":"String",
         "Description":"I have read and agree to the Terms and Conditions.",
         "AllowedValues":[
            "Accept",
            "Decline"
         ],
         "Default":"Decline"
      },
      "KeyName":{
         "Type":"AWS::EC2::KeyPair::KeyName",
         "Description":"Select an existing Key Pair from your AWS account.",
         "ConstraintDescription":"Can contain only ASCII characters."
      },
      "VaultFilesBucket":{
         "Type":"String",
         "Description":"Enter the name of the bucket containing the license and recovery public key."
      },
      "LicenseFile":{
         "Type":"String",
         "Description":"Enter the path of the license file within the bucket.",
         "Default":"license.xml"
      },
      "RecoveryPublicKey":{
         "Type":"String",
         "Description":"Enter the path of the recovery public key file within the bucket.",
         "Default":"recpub.key"
      },
      "VaultPrivateIP":{
         "Type":"String",
         "Description":"Enter the Vault Private IP."
      },
      "VaultAdminPassword":{
         "Type":"String",
         "Description":"Enter a password for the Vault Administrator user.",
         "NoEcho":true,
         "MinLength":8
      },
      "VaultMasterPassword":{
         "Type":"String",
         "Description":"Enter a password for the Vault DR Master user.",
         "NoEcho":true,
         "MinLength":8,
         "AllowedPattern":"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
         "ConstraintDescription":"Vault DR Master password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
      },
      "RetypeMasterPassword":{
         "Type":"String",
         "Description":"Retype the password for the Vault DR Master user.",
         "NoEcho":true,
         "MinLength":8
      },
      "VaultDRPassword":{
         "Type":"String",
         "Description":"Enter a password for the Vault DR user.",
         "NoEcho":true,
         "MinLength":8,
         "AllowedPattern":"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
         "ConstraintDescription":"Vault DR password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
      },
      "RetypeDRPassword":{
         "Type":"String",
         "Description":"Retype the password for the Vault DR user.",
         "NoEcho":true,
         "MinLength":8
      },
      "VaultInstanceName":{
         "Type":"String",
         "Description":"Enter a name for the Vault DR instance.",
         "Default":"CyberArk Vault"
      },
      "VaultHostName":{
         "Type":"String",
         "Description":"Enter the host name for the Vault DR instance.",
         "MinLength":4
      },
      "VaultInstanceType":{
         "Type":"String",
         "Description":"Select the instance type of the Vault DR instance.",
         "AllowedValues":[
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge"
         ],
         "Default":"m4.large"
      },
      "VaultInstanceSecurityGroups":{
         "Type":"List<AWS::EC2::SecurityGroup::Id>",
         "Description":"Assign Security Groups to the Vault DR instance."
      },
      "DRInstanceSubnetId":{
         "Type":"AWS::EC2::Subnet::Id",
         "Description":"Select the Subnet Id where the Vault DR instance will reside."
      }
   },
   "Conditions":{
      "EULACondition":{
         "Fn::Equals":[
            "Accept",
            {
               "Ref":"EULA"
            }
         ]
      }
   },
   "Rules":{
      "PasswordConfirmation":{
         "Assertions":[
            {
               "Assert":{
                  "Fn::Equals":[
                     {
                        "Ref":"VaultMasterPassword"
                     },
                     {
                        "Ref":"RetypeMasterPassword"
                     }
                  ]
               },
               "AssertDescription":"The password confirmation does not match."
            },
            {
               "Assert":{
                  "Fn::Equals":[
                     {
                        "Ref":"VaultDRPassword"
                     },
                     {
                        "Ref":"RetypeDRPassword"
                     }
                  ]
               },
               "AssertDescription":"The password confirmation does not match."
            }
         ]
      }
   },
   "Metadata":{
      "AWS::CloudFormation::Interface":{
         "ParameterGroups":[
            {
               "Label":{
                  "default":"General parameters"
               },
               "Parameters":[
                  "EULA",
                  "KeyName",
                  "VaultFilesBucket",
                  "LicenseFile",
                  "RecoveryPublicKey"
               ]
            },
            {
               "Label":{
                  "default":"DR Vault information"
               },
               "Parameters":[
                  "VaultPrivateIP",
                  "VaultAdminPassword",
                  "VaultDRPassword",
                  "RetypeDRPassword",
                  "VaultMasterPassword",
                  "RetypeMasterPassword",
                  "VaultInstanceName",
                  "VaultHostName",
                  "VaultInstanceType",
                  "VaultInstanceSecurityGroups",
                  "DRInstanceSubnetId"
               ]
            }
         ],
         "ParameterLabels":{
            "EULA":{
               "default":"License Agreement"
            },
            "KeyName":{
               "default":"Key Pair"
            },
            "VaultFilesBucket":{
               "default":"Vault Files Bucket"
            },
            "LicenseFile":{
               "default":"License File"
            },
            "RecoveryPublicKey":{
               "default":"Recovery Public Key"
            },
            "VaultPrivateIP":{
               "default":"Vault Private IP"
            },
            "VaultAdminPassword":{
               "default":"Vault Admin Password"
            },
            "VaultMasterPassword":{
               "default":"Vault DR Master Password"
            },
            "RetypeMasterPassword":{
               "default":"Retype Vault DR Master Password"
            },
            "VaultDRPassword":{
               "default":"Vault DR Password"
            },
            "RetypeDRPassword":{
               "default":"Retype Vault DR Password"
            },
            "VaultInstanceName":{
               "default":"Vault DR Instance Name"
            },
            "VaultHostName":{
               "default":"Vault DR Host Name"
            },
            "VaultInstanceType":{
               "default":"Vault DR Instance Type"
            },
            "VaultInstanceSecurityGroups":{
               "default":"Vault DR Instance Security Groups"
            },
            "DRInstanceSubnetId":{
               "default":"Vault DR Instance Subnet Id"
            }
         }
      }
   },
   "Mappings":{
      "RegionMap":{
         "us-east-1":{
            "Vault":"ami-018dcc30a5b6d0974",
            "Components":"ami-05417e8b12c64bfa1",
            "CPM":"ami-07646c6185679e5d5",
            "PVWA":"ami-000f4626f01e06d93",
            "PSM":"ami-0f53dec622cdc03c2",
            "PSMP":"ami-0946eb0afc95a102a"
         },
         "us-east-2":{
            "Vault":"ami-04ecb6e7d7da6ae1a",
            "Components":"ami-08c31390fbeb8732a",
            "CPM":"ami-034b278d3d9bc9312",
            "PVWA":"ami-066c95d45a872adf7",
            "PSM":"ami-09abf16cb5b34d8bf",
            "PSMP":"ami-01f73800cc27a5151"
         },
         "eu-west-2":{
            "Vault":"ami-0ce0e830f7fddb65f",
            "Components":"ami-090ce7558bc8867b7",
            "CPM":"ami-0d8cb6cf3bd0d3a83",
            "PVWA":"ami-0d57d94bdabe94d24",
            "PSM":"ami-073e2cf7e9414193f",
            "PSMP":"ami-09f095e015b0ddbe7"
         },
         "us-west-1":{
            "Vault":"ami-04fd449619f121d21",
            "Components":"ami-052e4bebbf0be7f05",
            "CPM":"ami-044ab79beceab925f",
            "PVWA":"ami-05e7a9db745c4b359",
            "PSM":"ami-04eb7094f1a37eac6",
            "PSMP":"ami-0493e7e583195438d"
         },
         "us-west-2":{
            "Vault":"ami-0482128ff214efa3c",
            "Components":"ami-0463da183fbf9f14e",
            "CPM":"ami-04c788e6c4f10cedc",
            "PVWA":"ami-01dc049920d5a3037",
            "PSM":"ami-03eba5301a0b5aaae",
            "PSMP":"ami-056082a2a9489e6cf"
         },
         "ca-central-1":{
            "Vault":"ami-0f1c14a1e26c23d90",
            "Components":"ami-03a73055b45734232",
            "CPM":"ami-098de3eef3905577b",
            "PVWA":"ami-0fdc699dfae652962",
            "PSM":"ami-0fb1edb587bd1e741",
            "PSMP":"ami-08675faf83e6ce39f"
         },
         "eu-west-1":{
            "Vault":"ami-051d1f50baad27563",
            "Components":"ami-0790e84d50ae84b3a",
            "CPM":"ami-0e27c2bdcf84a03b9",
            "PVWA":"ami-08150b4bb4367c392",
            "PSM":"ami-0110c69be4954b393",
            "PSMP":"ami-0e2b35870f3ecad74"
         },
         "eu-central-1":{
            "Vault":"ami-0035ee5dd5c015b7e",
            "Components":"ami-018253abc3f2b4759",
            "CPM":"ami-0628403c07b77590f",
            "PVWA":"ami-0a3e1be676ef44e48",
            "PSM":"ami-0bab53dd300069d35",
            "PSMP":"ami-01d74946249f41943"
         },
         "ap-southeast-1":{
            "Vault":"ami-031adce649324e09a",
            "Components":"ami-0eae6d71749f44914",
            "CPM":"ami-077e67c7bdd798675",
            "PVWA":"ami-0b6c3c9c99e438862",
            "PSM":"ami-0cf0219e12531d236",
            "PSMP":"ami-01f1f464a17f7411d"
         },
         "ap-southeast-2":{
            "Vault":"ami-0fb200c807bd5318f",
            "Components":"ami-0a8f56e01e6eef821",
            "CPM":"ami-0bb5d2951e58984c8",
            "PVWA":"ami-050886d6a5a2f9c38",
            "PSM":"ami-0f3a0d3c3ebc1f8b3",
            "PSMP":"ami-04c019857dc357764"
         },
         "ap-northeast-2":{
            "Vault":"ami-0032c611dd75ecb35",
            "Components":"ami-0dd380729903df6cb",
            "CPM":"ami-0d33f439e18508b02",
            "PVWA":"ami-02ae076b22524e2d4",
            "PSM":"ami-029ee37bdfe5dc3c5",
            "PSMP":"ami-0b168c85880d2b143"
         },
         "ap-northeast-1":{
            "Vault":"ami-0b0fd33a938a63b77",
            "Components":"ami-0d40b9555876fc6d7",
            "CPM":"ami-0fa03acc103baa8aa",
            "PVWA":"ami-0b95329044ffe5205",
            "PSM":"ami-033905bd5bbf5e711",
            "PSMP":"ami-0053591c0cd12b08a"
         },
         "ap-south-1":{
            "Vault":"ami-056e46133acadbc37",
            "Components":"ami-04db78fdd08ead9e7",
            "CPM":"ami-015074a1966de6a3c",
            "PVWA":"ami-0e211ed39f401cb44",
            "PSM":"ami-08bce052d7d1effb8",
            "PSMP":"ami-0ddf98873c52bc4de"
         },
         "sa-east-1":{
            "Vault":"ami-093c3ca173bc1290c",
            "Components":"ami-0986c7bb751ccad7e",
            "CPM":"ami-0b778d1037294a539",
            "PVWA":"ami-086d821361c914e90",
            "PSM":"ami-008f6fc3bd823cf0a",
            "PSMP":"ami-0057b29abef2b981b"
         },
         "us-gov-west-1": {
            "Vault": "ami-73482912",
            "Components": "ami-a94425c8",
            "CPM": "ami-835b3ae2",
            "PVWA": "ami-4d5f3e2c",
            "PSM": "ami-e4a0c185",
            "PSMP": "ami-815f3ee0"
         }
      }
   },
   "Outputs":{
      "CloudWatchLogGroupName":{
         "Description":"The name of the CloudWatch log group",
         "Value":{
            "Ref":"LogGroup"
         }
      }
   }
}
