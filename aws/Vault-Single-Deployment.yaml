AWSTemplateFormatVersion: "2010-09-09"
Description: This template handles the deployment of CyberArk Vault to an existing network infrastructure
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
    DeletionPolicy: Retain
  DeployBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
  LambdaDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - '*'
        - PolicyName: S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${DeployBucket}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*'
    Condition: EULACondition
  CopyfileFromBucketLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copy files from foreign region to local region
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse

          def CopyFileFromBucketToBucket(bucket, fileKey, destination, destBucket):
              s3Client = boto3.client('s3')
              copy_source = {'Bucket': bucket,'Key': fileKey}
              s3Client.copy_object(CopySource=copy_source, Bucket=destBucket, Key=destination)

          def DeleteObjectFromBucket(bucket, key):
              s3Client = boto3.client('s3')
              s3Client.delete_object(Bucket=bucket, Key=key)

          def lambda_handler(event, context):

              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']

              try:
                  if event['RequestType'] == 'Delete':
                      DeleteObjectFromBucket(event['ResourceProperties']['DestBucket'], event['ResourceProperties']['FileKey'])
                      print 'Object Deleted Successfully'
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)

                  if event['RequestType'] == 'Create':
                      CopyFileFromBucketToBucket(event['ResourceProperties']['BucketName'],event['ResourceProperties']['FileKey'],event['ResourceProperties']['FileName'],event['ResourceProperties']['DestBucket'])
                      print 'file copied successfully'
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)

              except Exception as E:
                  print E
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python2.7
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaDeployRole.Arn'
  CopyLicenseToBucket:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'CopyfileFromBucketLambda.Arn'
      BucketName: !Ref 'VaultFilesBucket'
      FileKey: !Ref 'LicenseFile'
      FileName: !Ref 'LicenseFile'
      DestBucket: !Ref 'DeployBucket'
    Condition: EULACondition
    DependsOn:
      - LambdaDeployRole
  CopyRecpubToBucket:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'CopyfileFromBucketLambda.Arn'
      BucketName: !Ref 'VaultFilesBucket'
      FileKey: !Ref 'RecoveryPublicKey'
      FileName: !Ref 'RecoveryPublicKey'
      DestBucket: !Ref 'DeployBucket'
    Condition: EULACondition
    DependsOn:
      - LambdaDeployRole
  VaultInstancesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'VaultInstancesRole'
    Condition: EULACondition
    DeletionPolicy: Retain
  VaultInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:*:*:*'
    Condition: EULACondition
    DeletionPolicy: Retain
  VaultMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'VaultInstanceName'
      SecurityGroupIds: !Ref 'VaultInstanceSecurityGroups'
      SubnetId: !Ref 'VaultInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Vault
      InstanceType: !Ref 'VaultInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r VaultMachine --region ${AWS::Region}
          cfn-signal.exe -e %ERRORLEVEL%  --stack ${AWS::StackId} --resource VaultMachine --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'VaultInstancesProfile'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json:
              content:
                Fn::Sub: |-
                  {
                    "IsEnabled":true,
                    "EngineConfiguration":{
                      "PollInterval":"00:00:05",
                      "Components":[
                          {
                            "Id":"EC2ConfigLog",
                            "FullName":"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                            "Parameters":{
                                "LogDirectoryPath":"C:\\Program Files\\Amazon\\Ec2ConfigService\\Logs",
                                "TimestampFormat":"yyyy-MM-ddTHH:mm:ss.fffZ:",
                                "Encoding":"ASCII",
                                "Filter":"EC2ConfigLog.txt",
                                "CultureName":"en-US",
                                "TimeZoneKind":"UTC"
                            }
                          },
                          {
                            "Id":"CfnInitLog",
                            "FullName":"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                            "Parameters":{
                                "LogDirectoryPath":"C:\\cfn\\log",
                                "TimestampFormat":"yyyy-MM-dd HH:mm:ss,fff",
                                "Encoding":"ASCII",
                                "Filter":"cfn-init.log",
                                "CultureName":"en-US",
                                "TimeZoneKind":"Local"
                            }
                          },
                          {
                            "Id":"CfnInitCmdLog",
                            "FullName":"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                            "Parameters":{
                                "LogDirectoryPath":"C:\\cfn\\log",
                                "TimestampFormat":"yyyy-MM-dd HH:mm:ss,fff",
                                "Encoding":"ASCII",
                                "Filter":"cfn-init-cmd.log",
                                "CultureName":"en-US",
                                "TimeZoneKind":"Local"
                            }
                          },
                          {
                            "Id":"CfnWireLog",
                            "FullName":"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                            "Parameters":{
                                "LogDirectoryPath":"C:\\cfn\\log",
                                "TimestampFormat":"yyyy-MM-dd HH:mm:ss,fff",
                                "Encoding":"ASCII",
                                "Filter":"cfn-wire.log",
                                "CultureName":"en-US",
                                "TimeZoneKind":"Local"
                            }
                          },
                          {
                            "Id":"CloudWatchEC2ConfigLog",
                            "FullName":"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                            "Parameters":{
                                "AccessKey":"",
                                "SecretKey":"",
                                "Region": "${AWS::Region}",
                                "LogGroup": "${LogGroup}",
                                "LogStream":"{instance_id}/EC2ConfigLog"
                            }
                          },
                          {
                            "Id":"CloudWatchCfnInitLog",
                            "FullName":"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                            "Parameters":{
                                "AccessKey":"",
                                "SecretKey":"",
                                "Region": "${AWS::Region}",
                                "LogGroup": "${LogGroup}",
                                "LogStream":"{instance_id}/CfnInitLog"
                            }
                          },
                          {
                            "Id":"CloudWatchCfnInitCmdLog",
                            "FullName":"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                            "Parameters":{
                                "AccessKey":"",
                                "SecretKey":"",
                                "Region": "${AWS::Region}",
                                "LogGroup": "${LogGroup}",
                                "LogStream":"{instance_id}/CfnInitCmdLog"
                            }
                          },
                          {
                            "Id":"CloudWatchCfnWireLog",
                            "FullName":"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                            "Parameters":{
                                "AccessKey":"",
                                "SecretKey":"",
                                "Region": "${AWS::Region}",
                                "LogGroup": "${LogGroup}",
                                "LogStream":"{instance_id}/CfnWireLog"
                            }
                          }
                      ],
                      "Flows":{
                          "Flows":[
                            "EC2ConfigLog,CloudWatchEC2ConfigLog",
                            "CfnInitLog,CloudWatchCfnInitLog",
                            "CfnInitCmdLog,CloudWatchCfnInitCmdLog",
                            "CfnWireLog,CloudWatchCfnWireLog"
                          ]
                      }
                    }
                  }
            C:\deploy.py:
              content:
                Fn::Sub: |-
                  import boto3
                  import sys
                  import subprocess
                  import argparse

                  parser = argparse.ArgumentParser()
                  parser.add_argument("adminpass", type=str, help="vault administrator password")
                  parser.add_argument("masterpass", type=str, help="vault master password")
                  args = parser.parse_args()

                  def downloadFile(bucket,filePath,target):
                    s3Client = boto3.client('s3', region_name='${AWS::Region}')
                    s3Client.download_file(Bucket = bucket, Key = filePath, Filename = target)

                  downloadFile('${DeployBucket}','${LicenseFile}','C:\\vaultLicense.xml')
                  downloadFile('${DeployBucket}','${RecoveryPublicKey}','C:\\recoveryPublic.key')

                  sys.exit(subprocess.call('C:\\Program files (x86)\\PrivateArk\\Server\\CAVaultManager.exe PostInstall /AdminPass {} /MasterPass {} /RecPub C:\\recoveryPublic.key /IsPrimaryOrDR Primary /PrimaryVaultIP 1.1.1.1 /DRPassword {} /EnableFailOver /LicensePath C:\\vaultLicense.xml /AcceptEULA yes /CloudRegion ${AWS::Region} /CloudVendor AWS'.format(args.adminpass, args.masterpass, args.adminpass)))
          services:
            windows:
              AmazonSSMAgent:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: '30'
              ignoreErrors: 'true'
            2-deploy:
              command: !Sub 'C:\Python27\python.exe C:\deploy.py ${VaultAdminPassword} ${VaultMasterPassword}'
              waitAfterCompletion: '0'
              ignoreErrors: 'false'
            3-CheckVaultServiceStatus:
              command: powershell.exe -Command "if ((Get-Service 'PrivateArk Server').Status -eq 'Running') {exit 0} else {exit 1}"
              waitAfterCompletion: '0'
              ignoreErrors: 'false'
            4-ChangeHostName:
              command: !Sub 'powershell.exe -Command Rename-Computer -NewName ${VaultHostName} -Force -Restart'
              waitAfterCompletion: forever
              ignoreErrors: 'false'
            99-SignalCompletion:
              command: !Sub 'cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource VaultMachine --region ${AWS::Region}'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DependsOn:
      - CopyLicenseToBucket
      - CopyRecpubToBucket
    DeletionPolicy: Retain
  VaultInstancesKMSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultInstancesKMSAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'
      Roles:
        - !Ref 'VaultInstancesRole'
    Condition: EULACondition
    DeletionPolicy: Retain
  VaultInstancesS3VaultFilesBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultFilesBucketAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*'
      Roles:
        - !Ref 'VaultInstancesRole'
    Condition: EULACondition
  VaultBootstrapKMSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultBootstrapKMSAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - kms:CreateKey
              - kms:GenerateRandom
            Resource: '*'
      Roles:
        - !Ref 'VaultInstancesRole'
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  VaultFilesBucket:
    Type: String
    Description: Enter the name of the bucket containing the license and recovery
      public key.
  LicenseFile:
    Type: String
    Description: Enter the path of the license file within the bucket.
    Default: license.xml
  RecoveryPublicKey:
    Type: String
    Description: Enter the path of the recovery public key file within the bucket.
    Default: recpub.key
  VaultMasterPassword:
    Type: String
    Description: Enter a password for the Vault Master user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: Vault Master password must contain at least 1 lowercase
      letter, 1 uppercase letter, 1 digit and 1 special character
  RetypeMasterPassword:
    Type: String
    Description: Retype the password for the Vault Master user.
    NoEcho: true
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: Vault Administrator password must contain at least 1 lowercase
      letter, 1 uppercase letter, 1 digit and 1 special character
  RetypeAdminPassword:
    Type: String
    Description: Retype the password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
  VaultInstanceName:
    Type: String
    Description: Enter a name for the Vault instance.
    Default: CyberArk Vault
  VaultHostName:
    Type: String
    Description: Enter the host name for the Vault instance.
    MinLength: 4
  VaultInstanceType:
    Type: String
    Description: Select the instance type of the Vault instance.
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
    Default: m4.large
  VaultInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the Vault instance.
  VaultInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the Vault instance will reside.
Conditions:
  EULACondition: !Equals
    - Accept
    - !Ref 'EULA'
Rules:
  PasswordConfirmation:
    Assertions:
      - Assert: !Equals
          - !Ref 'VaultMasterPassword'
          - !Ref 'RetypeMasterPassword'
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref 'VaultAdminPassword'
          - !Ref 'RetypeAdminPassword'
        AssertDescription: The password confirmation does not match.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General parameters
        Parameters:
          - EULA
          - KeyName
          - VaultFilesBucket
          - LicenseFile
          - RecoveryPublicKey
      - Label:
          default: Vault information
        Parameters:
          - VaultAdminPassword
          - RetypeAdminPassword
          - VaultMasterPassword
          - RetypeMasterPassword
          - VaultInstanceName
          - VaultHostName
          - VaultInstanceType
          - VaultInstanceSecurityGroups
          - VaultInstanceSubnetId
    ParameterLabels:
      EULA:
        default: License Agreement
      KeyName:
        default: Key Pair
      VaultFilesBucket:
        default: Vault Files Bucket
      LicenseFile:
        default: License File
      RecoveryPublicKey:
        default: Recovery Public Key
      VaultMasterPassword:
        default: Vault Master Password
      RetypeMasterPassword:
        default: Retype Master Password
      VaultAdminPassword:
        default: Vault Admin Password
      RetypeAdminPassword:
        default: Retype Admin Password
      VaultInstanceName:
        default: Vault Instance Name
      VaultHostName:
        default: Vault Host Name
      VaultInstanceType:
        default: Vault Instance Type
      VaultInstanceSecurityGroups:
        default: Vault Instance Security Groups
      VaultInstanceSubnetId:
        default: Vault Instance Subnet Id
Mappings:
  RegionMap:
    us-east-1:
      Vault: ami-01d4a7bd46088f700
    us-east-2:
      Vault: ami-068bc4ecc92db8199
    eu-west-2:
      Vault: ami-0a559ff9a29efa431
    us-west-1:
      Vault: ami-0f1803a9c76472be5
    us-west-2:
      Vault: ami-01edee6e967c17628
    ca-central-1:
      Vault: ami-0582d8c1a70001244
    eu-west-1:
      Vault: ami-09397273b9046d5b9
    eu-central-1:
      Vault: ami-06f43402c6e002660
    ap-southeast-1:
      Vault: ami-0872cf43e69e28466
    ap-southeast-2:
      Vault: ami-0a02581b7c2a55e6f
    ap-northeast-2:
      Vault: ami-0ed3745003fa46976
    ap-northeast-1:
      Vault: ami-02e14fe4621742bde
    ap-south-1:
      Vault: ami-0ff8fe4a731baa07a
    sa-east-1:
      Vault: ami-04b91be9198835fc8
    us-gov-west-1:
      Vault: ami-0e87a36f
    us-gov-east-1:
      Vault: ami-00268514ee37890b9
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref 'LogGroup'
