{
   "Resources": {
      "LogGroup": {
         "Type": "AWS::Logs::LogGroup",
         "Properties": {
            "RetentionInDays": 30
         },
         "DeletionPolicy": "Retain"
      },
      "DeployBucket": {
         "Type": "AWS::S3::Bucket",
         "Properties": {
            "AccessControl": "Private"
         }
      },
      "LambdaDeployRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [{
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [
                        "lambda.amazonaws.com"
                     ]
                  },
                  "Action": [
                     "sts:AssumeRole"
                  ]
               }]
            },
            "Policies": [{
                  "PolicyName": "CloudWatch",
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                           "logs:CreateLogGroup",
                           "logs:CreateLogStream",
                           "logs:DescribeLogGroups",
                           "logs:DescribeLogStreams",
                           "logs:PutLogEvents"
                        ],
                        "Resource": [
                           "*"
                        ]
                     }]
                  }
               },
               {
                  "PolicyName": "SSM",
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                           "ssm:PutParameter",
                           "ssm:DeleteParameter"
                        ],
                        "Resource": [{
                           "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                        }]
                     }]
                  }
               },
               {
                  "PolicyName": "S3",
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                           "s3:GetObject",
                           "s3:GetObjectVersion",
                           "s3:PutObject",
                           "s3:DeleteObject",
                           "s3:DeleteObjectVersion"
                        ],
                        "Resource": [
						               { "Fn::Sub": "arn:${AWS::Partition}:s3:::${DeployBucket}/*" },
                           { "Fn::Sub": "arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*" }
                        ]
                     }]
                  }
               }
            ]
         },
         "Condition": "EULACondition"
      },
      "LambdaLogDenyRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "lambda.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            },
            "Policies": [
               {
                  "PolicyName": "denyLambdaLogging",
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [
                        {
                           "Effect": "Deny",
                           "Action": [
                              "logs:*"
                           ],
                           "Resource": "*"
                        }
                     ]
                  }
               }
            ]
         }
      },
      "StorePasswordLambda": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Description": "Saves given password to parameter store as SecureString",
            "Code": {
               "ZipFile": {
                  "Fn::Join": [
                     "\n", [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def storePassword(name, value):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.put_parameter(",
                        "        Name = name,",
                        "        Value = value,",
                        "        Type = 'SecureString'",
                        "    )",
                        "",
                        "def deletePassword(name):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.delete_parameter(",
                        "        Name = name",
                        "    )",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "",
                        "    if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:",
                        "            print 'The property Password must not be empty'",
                        "            return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)",
                        "",
                        "    try:",
                        "        if event['RequestType'] == 'Delete':",
                        "            deletePassword(physicalResourceId)",
                        "            print 'Password successfully deleted. Id='+physicalResourceId",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "        if event['RequestType'] == 'Create':",
                        "            storePassword(physicalResourceId, event['ResourceProperties']['Password'])",
                        "            print 'The store parameter has been created. Id='+physicalResourceId",
                        "            response = { 'SsmId': physicalResourceId }",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)",
                        "",
                        "    except client.exceptions.ParameterNotFound:",
                        "        print 'Item already removed'",
                        "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime": "python2.7",
            "Handler": "index.lambda_handler",
            "Timeout":60,
            "Role": {
               "Fn::GetAtt": [
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         },
         "Condition": "EULACondition"
      },
      "DeletePasswordLambda": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Description": "Delete password from parameter store",
            "Code": {
               "ZipFile": {
                  "Fn::Join": [
                     "\n", [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def deletePassword(name):",
                        "    ssmClient = boto3.client('ssm')",
                        "    return ssmClient.delete_parameter(",
                        "        Name = name",
                        "    )",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "    ",
                        "    try:",
                        "        if event['RequestType'] == 'Create':",
                        "            deletePassword(event['ResourceProperties']['key'])",
                        "            print 'Password succesfully deleted. Id='+event['ResourceProperties']['key']",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "        if event['RequestType'] == 'Delete':",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "    except client.exceptions.ParameterNotFound:",
                        "        print 'Item already removed'",
                        "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime": "python2.7",
            "Handler": "index.lambda_handler",
            "Timeout":60,
            "Role": {
               "Fn::GetAtt": [
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         },
         "Condition": "EULACondition"
      },
      "CopyfileFromBucketLambda": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Description": "Copy files from foreign region to local region",
            "Code": {
               "ZipFile": {
                  "Fn::Join": [
                     "\n", [
                        "import uuid",
                        "import boto3",
                        "import cfnresponse",
                        "",
                        "def CopyFileFromBucketToBucket(bucket, fileKey, destination, destBucket):",
                        "    s3Client = boto3.client('s3')",
                        "    copy_source = {'Bucket': bucket,'Key': fileKey}",
                        "    s3Client.copy_object(CopySource=copy_source, Bucket=destBucket, Key=destination)",
                        "",
                        "def DeleteObjectFromBucket(bucket, key):",
                        "    s3Client = boto3.client('s3')",
                        "    s3Client.delete_object(Bucket=bucket, Key=key)",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    physicalResourceId = str(uuid.uuid4())",
                        "    if 'PhysicalResourceId' in event:",
                        "        physicalResourceId = event['PhysicalResourceId']",
                        "",
                        "    try:",
                        "        if event['RequestType'] == 'Delete':",
                        "            DeleteObjectFromBucket(event['ResourceProperties']['DestBucket'], event['ResourceProperties']['FileKey'])",
                        "            print 'Object Deleted Successfully'",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "        if event['RequestType'] == 'Create':",
                        "            CopyFileFromBucketToBucket(event['ResourceProperties']['BucketName'],event['ResourceProperties']['FileKey'],event['ResourceProperties']['FileName'],event['ResourceProperties']['DestBucket'])",
                        "            print 'file copied successfully'",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                        "",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                     ]
                  ]
               }
            },
            "Runtime": "python2.7",
            "Handler": "index.lambda_handler",
            "Timeout":60,
            "Role": {
               "Fn::GetAtt": [
                  "LambdaDeployRole",
                  "Arn"
               ]
            }
         }
      },
      "StoreMasterPassword": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Version": "1.0",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "StorePasswordLambda",
                  "Arn"
               ]
            },
            "Password": {
               "Ref": "VaultMasterPassword"
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole"
         ]
      },
      "StoreAdminPassword": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "StorePasswordLambda",
                  "Arn"
               ]
            },
            "Password": {
               "Ref": "VaultAdminPassword"
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole"
         ]
      },
      "CleanMasterPassword": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Version": "1.0",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "DeletePasswordLambda",
                  "Arn"
               ]
            },
            "key": {
               "Fn::GetAtt": [
                  "StoreMasterPassword",
                  "SsmId"
               ]
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole",
            "StorePasswordLambda",
            "VaultDRMachine"
         ]
      },
      "CleanAdminPassword": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Version": "1.0",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "DeletePasswordLambda",
                  "Arn"
               ]
            },
            "key": {
               "Fn::GetAtt": [
                  "StoreAdminPassword",
                  "SsmId"
               ]
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole",
            "StorePasswordLambda",
            "PSMPMachine"
         ]
      },
      "CleanDRPassword": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Version": "1.0",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "DeletePasswordLambda",
                  "Arn"
               ]
            },
            "key": {
               "Fn::GetAtt": [
                  "StoreDRPassword",
                  "SsmId"
               ]
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole",
            "StorePasswordLambda",
            "VaultDRMachine"
         ]
      },
      "CopyLicenseToBucket": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Version": "1.0",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "CopyfileFromBucketLambda",
                  "Arn"
               ]
            },
            "BucketName": {
               "Ref": "VaultFilesBucket"
            },
            "FileKey": {
               "Ref": "LicenseFile"
            },
            "FileName": {
               "Ref": "LicenseFile"
            },
            "DestBucket": {
               "Ref": "DeployBucket"
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole",
            "StorePasswordLambda"
         ]
      },
      "CopyRecpubToBucket": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Version": "1.0",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "CopyfileFromBucketLambda",
                  "Arn"
               ]
            },
            "BucketName": {
               "Ref": "VaultFilesBucket"
            },
            "FileKey": {
               "Ref": "RecoveryPublicKey"
            },
            "FileName": {
               "Ref": "RecoveryPublicKey"
            },
            "DestBucket": {
               "Ref": "DeployBucket"
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole"
         ]
      },
      "RandomStringLambdaFunction": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
             "Code": {
                 "ZipFile": "const response = require(\"./cfn-response\");\nconst randomString = (length, chars) => {\n    var result = '';\n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\nexports.handler = (event, context) =>{\n\n  const str = randomString(1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') + randomString(1, 'abcdefghijklmnopqrstuvwxyz') + randomString(3, '0123456789') + randomString(11, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  const responseData = {RandomString: str};\n  response.send(event, context, response.SUCCESS, responseData);\n\n};\n"
             },
             "Handler": "index.handler",
             "Runtime": "nodejs10.x",
             "Role": {
                 "Fn::GetAtt": [
                     "LambdaLogDenyRole",
                     "Arn"
                 ]
             },
             "MemorySize": 128,
             "Timeout": 20
         }
      },
      "PVWASecretString": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "RandomStringLambdaFunction",
                  "Arn"
               ]
            }
         }
      },
      "CPMSecretString": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "Length": 15,
            "ServiceToken": {
               "Fn::GetAtt": [
                  "RandomStringLambdaFunction",
                  "Arn"
               ]
            }
         }
      },
      "VaultMachine": {
         "Type": "AWS::EC2::Instance",
         "Properties": {
            "Tags": [{
               "Key": "Name",
               "Value": {
                  "Ref": "VaultInstanceName"
               }
            }],
            "SecurityGroupIds": {
               "Ref": "VaultInstanceSecurityGroups"
            },
            "SubnetId": {
               "Ref": "VaultInstanceSubnetId"
            },
            "ImageId": {
               "Fn::FindInMap": [
                  "RegionMap",
                  {
                     "Ref": "AWS::Region"
                  },
                  "Vault"
               ]
            },
            "InstanceType": {
               "Ref": "VaultInstanceType"
            },
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "", [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        " -r VaultMachine",
                        " --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        "  --resource VaultMachine",
                        "  --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName": {
               "Ref": "KeyName"
            },
            "IamInstanceProfile": {
               "Ref": "VaultInstancesProfile"
            }
         },
         "Metadata": {
            "AWS::CloudFormation::Init": {
               "config": {
                  "files": {
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\deploy.py": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref": "AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "def downloadFile(bucket,filePath,target):\n",
                                 "\ts3Client = boto3.client('s3', region_name='",
                                 {
                                    "Ref": "AWS::Region"
                                 },
                                 "')\n",
                                 "\ts3Client.download_file(\n",
                                 "\t\tBucket = bucket,\n",
                                 "\t\tKey = filePath,\n",
                                 "\t\tFilename = target\n",
                                 "\t)\n",
                                 "\treturn target\n",
                                 "\n",
                                 "masterp = fetchPassword('",
                                 {
                                    "Fn::GetAtt": [
                                       "StoreMasterPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt": [
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "drp = fetchPassword('",
                                 {
                                    "Fn::GetAtt": [
                                       "StoreDRPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "licensef = downloadFile('",
                                 {
                                    "Ref": "DeployBucket"
                                 },
                                 "','",
                                 {
                                    "Ref": "LicenseFile"
                                 },
                                 "','C:\\\\vaultLicense.xml')\n",
                                 "publickeyf = downloadFile('",
                                 {
                                    "Ref": "DeployBucket"
                                 },
                                 "','",
                                 {
                                    "Ref": "RecoveryPublicKey"
                                 },
                                 "','C:\\\\recoveryPublic.key')\n",
                                 "\n",
                                 "sys.exit(subprocess.call([",
                                 "'C:\\\\Program files (x86)\\\\PrivateArk\\\\Server\\\\CAVaultManager.exe',",
                                 "'PostInstall',",
                                 "'/AdminPass',",
                                 "adminp,",
                                 "'/MasterPass',",
                                 "masterp,",
                                 "'/RecPub',",
                                 "publickeyf,",
                                 "'/IsPrimaryOrDR',",
                                 "'Primary',",
                                 "'/PrimaryVaultIP',",
                                 "'1.1.1.1',",
                                 "'/DRPassword',",
                                 "drp,",
                                 "'/EnableFailOver',",
                                 "'/LicensePath',",
                                 "licensef,",
                                 "'/AcceptEULA',",
                                 "'yes',",
                                 "'/CloudRegion','",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "','/CloudVendor',",
                                 "'AWS'",
                                 "]))\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services": {
                     "windows": {
                        "AmazonSSMAgent": {
                           "enabled": "true",
                           "ensureRunning": "true",
                           "files": [
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands": {
                     "01-restartSSM": {
                        "command": "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion": "30",
                        "ignoreErrors": "true"
                     },
                     "02-deploy": {
                        "command": "C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "03-CheckVaultServiceStatus": {
                        "command": "powershell.exe -Command \" if ((Get-Service 'PrivateArk Server').Status -eq 'Running') {exit 0} else {exit 1} \"",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "99-SignalCompletion": {
                        "command": {
                           "Fn::Join": [
                              "", [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref": "AWS::StackId"
                                 },
                                 "         --resource VaultMachine ",
                                 "         --region ",
                                 {
                                    "Ref": "AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "CreationPolicy": {
            "ResourceSignal": {
               "Timeout": "PT15M"
            }
         },
         "DependsOn": [
            "CopyLicenseToBucket",
            "CopyRecpubToBucket"
         ],
         "DeletionPolicy": "Retain"
      },
      "VaultDRMachine": {
         "Type": "AWS::EC2::Instance",
         "Properties": {
            "Tags": [{
               "Key": "Name",
               "Value": {
                  "Fn::Join": [
                     " ", [{
                           "Ref": "VaultInstanceName"
                        },
                        "DR"
                     ]
                  ]
               }
            }],
            "SecurityGroupIds": {
               "Ref": "VaultInstanceSecurityGroups"
            },
            "SubnetId": {
               "Ref": "DRInstanceSubnetId"
            },
            "ImageId": {
               "Fn::FindInMap": [
                  "RegionMap",
                  {
                     "Ref": "AWS::Region"
                  },
                  "Vault"
               ]
            },
            "InstanceType": {
               "Ref": "VaultInstanceType"
            },
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "", [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        " -r VaultDRMachine",
                        " --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        "  --resource VaultDRMachine",
                        "  --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName": {
               "Ref": "KeyName"
            },
            "IamInstanceProfile": {
               "Ref": "VaultInstancesProfile"
            }
         },
         "Metadata": {
            "AWS::CloudFormation::Init": {
               "config": {
                  "files": {
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\deploy.py": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref": "AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "def downloadFile(bucket,filePath,target):\n",
                                 "\ts3Client = boto3.client('s3', region_name='",
                                 {
                                    "Ref": "AWS::Region"
                                 },
                                 "')\n",
                                 "\ts3Client.download_file(\n",
                                 "\t\tBucket = bucket,\n",
                                 "\t\tKey = filePath,\n",
                                 "\t\tFilename = target\n",
                                 "\t)\n",
                                 "\treturn target\n",
                                 "\n",
                                 "masterp = fetchPassword('",
                                 {
                                    "Fn::GetAtt": [
                                       "StoreMasterPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt": [
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "drp = fetchPassword('",
                                 {
                                    "Fn::GetAtt": [
                                       "StoreDRPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "licensef = downloadFile('",
                                 {
                                    "Ref": "DeployBucket"
                                 },
                                 "','",
                                 {
                                    "Ref": "LicenseFile"
                                 },
                                 "','C:\\\\vaultLicense.xml')\n",
                                 "publickeyf = downloadFile('",
                                 {
                                    "Ref": "DeployBucket"
                                 },
                                 "','",
                                 {
                                    "Ref": "RecoveryPublicKey"
                                 },
                                 "','C:\\\\recoveryPublic.key')\n",
                                 "\n",
                                 "vaultIp = '",
                                 {
                                    "Fn::GetAtt": [
                                       "VaultMachine",
                                       "PrivateIp"
                                    ]
                                 },
                                 "'\n",
                                 "sys.exit(subprocess.call([",
                                 "'C:\\\\Program files (x86)\\\\PrivateArk\\\\Server\\\\CAVaultManager.exe',",
                                 "'PostInstall',",
                                 "'/AdminPass',",
                                 "adminp,",
                                 "'/MasterPass',",
                                 "masterp,",
                                 "'/RecPub',",
                                 "publickeyf,",
                                 "'/IsPrimaryOrDR',",
                                 "'DR',",
                                 "'/PrimaryVaultIP',",
                                 "vaultIp,",
                                 "'/DRPassword',",
                                 "drp,",
                                 "'/EnableFailOver',",
                                 "'/LicensePath',",
                                 "licensef,",
                                 "'/AcceptEULA',",
                                 "'yes',",
                                 "'/CloudRegion','",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "','/CloudVendor',",
                                 "'AWS'",
                                 "]))\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services": {
                     "windows": {
                        "AmazonSSMAgent": {
                           "enabled": "true",
                           "ensureRunning": "true",
                           "files": [
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands": {
                     "01-restartSSM": {
                        "command": "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion": "30",
                        "ignoreErrors": "true"
                     },
                     "02-deploy": {
                        "command": "C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "03-CheckVaultServiceStatus": {
                        "command": "powershell.exe -Command \" if ((Get-Service 'PrivateArk Server').Status -eq 'Stopped') {exit 0} else {exit 1} \"",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "04-CheckDRServiceStatus": {
                        "command": "powershell.exe -Command \" if ((Get-Service 'CyberArk Vault Disaster Recovery').Status -eq 'Running') {exit 0} else {exit 1} \"",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "99-SignalCompletion": {
                        "command": {
                           "Fn::Join": [
                              "", [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref": "AWS::StackId"
                                 },
                                 "         --resource VaultDRMachine ",
                                 "         --region ",
                                 {
                                    "Ref": "AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "CreationPolicy": {
            "ResourceSignal": {
               "Timeout": "PT15M"
            }
         },
         "DeletionPolicy": "Retain"
      },
      "StoreDRPassword": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "StorePasswordLambda",
                  "Arn"
               ]
            },
            "Password": {
               "Ref": "VaultDRPassword"
            }
         },
         "Condition": "EULACondition",
         "DependsOn": [
            "LambdaDeployRole"
         ]
      },
      "VaultInstancesProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [{
               "Ref": "VaultInstancesRole"
            }]
         },
         "Condition": "EULACondition",
         "DeletionPolicy": "Retain"
      },
      "ComponentInstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Roles": [{
               "Ref": "ComponentInstanceRole"
            }]
         },
         "Condition": "EULACondition",
         "DeletionPolicy": "Retain"
      },
      "ComponentInstanceRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Statement": [{
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [
                        "ec2.amazonaws.com"
                     ]
                  },
                  "Action": [
                     "sts:AssumeRole"
                  ]
               }]
            },
            "Path": "/",
            "ManagedPolicyArns": [{
               "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
            }],
            "Policies": [{
               "PolicyName": "LogRolePolicy",
               "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [{
                     "Effect": "Allow",
                     "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:DescribeLogStreams"
                     ],
                     "Resource": [{
                        "Fn::Sub": "arn:${AWS::Partition}:logs:*:*:*"
                     }]
                  }]
               }
            }]
         },
         "Condition": "EULACondition",
         "DeletionPolicy": "Retain"
      },
      "PVWAMachine": {
         "Type": "AWS::EC2::Instance",
         "Properties": {
            "Tags": [{
               "Key": "Name",
               "Value": {
                  "Ref": "PVWAInstanceName"
               }
            }],
            "SecurityGroupIds": {
               "Ref": "PVWAInstanceSecurityGroups"
            },
            "SubnetId": {
               "Ref": "PVWAInstanceSubnetId"
            },
            "ImageId": {
               "Fn::FindInMap": [
                  "RegionMap",
                  {
                     "Ref": "AWS::Region"
                  },
                  "PVWA"
               ]
            },
            "InstanceType": {
               "Ref": "PVWAInstanceType"
            },
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "", [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        " -r PVWAMachine",
                        " --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        "  --resource PVWAMachine",
                        "  --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName": {
               "Ref": "KeyName"
            },
            "IamInstanceProfile": {
               "Ref": "ComponentInstanceProfile"
            }
         },
         "Metadata": {
            "AWS::CloudFormation::Init": {
               "config": {
                  "files": {
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\Set-LocalAccountPassword.ps1": {
                        "content": {
                            "Fn::Join": [
                                "", [
                                    "[CmdletBinding()]\n",
                                    "Param(\n",
                                    "  [Parameter(Mandatory=$true)][string]$Username,\n",
                                    "  [Parameter(Mandatory=$true)][string]$Password\n",
                                    ")\n",
                                    "$adsi = [ADSI]\"WinNT://$env:COMPUTERNAME\"\n",
                                    "$existing = $adsi.Children | where {$_.SchemaClassName -eq 'user' -and $_.Name -eq $Username }\n",
                                    "if ($existing -eq $null) {\n",
                                    "    Write-Error \"User $Username does not exist\"\n",
                                    "    return\n",
                                    "}\n",
                                    "$existing.SetPassword($Password)"
                                ]
                            ]
                        }
                     },
                     "C:\\Set-ServiceLogon.ps1": {
                        "content": {
                            "Fn::Join": [
                                "", [
                                    "[CmdletBinding()]\n",
                                    "Param(\n",
                                    "  [Parameter(Mandatory=$true)][string]$Service,\n",
                                    "  [Parameter(Mandatory=$true)][string]$Password\n",
                                    ")\n",
                                    "$filter = 'Name=' + \"'\" + $Service + \"'\" + ''\n",
                                    "$s = Get-WMIObject -class Win32_Service -Filter $filter\n",
                                    "$s.Change($Null,$Null,$Null,$Null,$Null,$Null,$Null,$Password,$Null,$Null,$Null)\n"
                                ]
                            ]
                        }
                     },
                     "C:\\deploy.py": {
                        "content": {
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "import urllib2\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
								 "inputHostname='",
                                 {"Ref":"PVWAHostName"},
                                 "'\n",
                                 "if not inputHostname:\n",
                                 "\thostname = urllib2.urlopen('http://169.254.169.254/latest/meta-data/hostname').read()\n",
                                 "\tpvwaurl = 'https://{0}/PasswordVault'.format(hostname)\n",
                                 "else:\n",
                                 "\tpvwaurl = 'https://{0}/PasswordVault'.format(inputHostname)\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "p = subprocess.check_output([",
								 "'powershell.exe',",
                                 "'C:\\\\CyberArk\\\\CloudRegisterToVault.ps1 ",
                                 "-PVWA ",
                                 "-PVWAVaultIP \"",
                                 {
                                    "Fn::GetAtt": [
                                       "VaultMachine",
                                       "PrivateIp"
                                    ]
                                 },
								         ",",
                                 {
                                    "Fn::GetAtt": [
                                       "VaultDRMachine",
                                       "PrivateIp"
                                    ]
                                 },
                                 "\"",
                                 " -PVWAVaultPort ",
                                 "1858 ",
                                 "-PVWAVaultUser Administrator",
                                 " ",
                                 "-PVWAVaultPassword '+",
                                 "adminp ",
								 "+ ' -PVWAUrl '+",
								 "pvwaurl",
                                 "],",
								 "stderr=subprocess.STDOUT)"
                              ]
                           ]
                        }
                     }
                  },
                  "services": {
                     "windows": {
                        "AmazonSSMAgent": {
                           "enabled": "true",
                           "ensureRunning": "true",
                           "files": [
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands": {
                     "01-restartSSM": {
                        "command": "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion": "30",
                        "ignoreErrors": "true"
                     },
                     "02-deploy": {
                        "command": "C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "03-startAppPool": {
                        "command": "powershell -command \"& {&'Import-Module' WebAdministration}\"; \"& {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}\"; \"& {&'Set-ItemProperty' -Path IIS:\\AppPools\\PasswordVaultWebAccessPool -Name autoStart -Value 'true'}\"",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "04-configurePVWAUser": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-LocalAccountPassword.ps1 -Username \"PVWAReportsUser\" -Password \"", { "Fn::GetAtt": ["PVWASecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "05-configurePVWAService": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-ServiceLogon.ps1 -Service \"CyberArk Scheduled Tasks\" -Password \"", { "Fn::GetAtt": ["PVWASecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "06-CSTserviceConfig": {
                        "command": "sc config \"CyberArk Scheduled Tasks\" start=auto",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "99-SignalCompletion": {
                        "command": {
                           "Fn::Join": [
                              "", [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref": "AWS::StackId"
                                 },
                                 "         --resource PVWAMachine ",
                                 "         --region ",
                                 {
                                    "Ref": "AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "CreationPolicy": {
            "ResourceSignal": {
               "Timeout": "PT15M"
            }
         },
         "DeletionPolicy": "Retain"
      },
      "CPMMachine": {
         "Type": "AWS::EC2::Instance",
         "Properties": {
            "Tags": [{
               "Key": "Name",
               "Value": {
                  "Ref": "CPMInstanceName"
               }
            }],
            "SecurityGroupIds": {
               "Ref": "CPMInstanceSecurityGroups"
            },
            "SubnetId": {
               "Ref": "CPMInstanceSubnetId"
            },
            "ImageId": {
               "Fn::FindInMap": [
                  "RegionMap",
                  {
                     "Ref": "AWS::Region"
                  },
                  "CPM"
               ]
            },
            "InstanceType": {
               "Ref": "CPMInstanceType"
            },
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "", [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        " -r CPMMachine",
                        " --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        "  --resource CPMMachine",
                        "  --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName": {
               "Ref": "KeyName"
            },
            "IamInstanceProfile": {
               "Ref": "ComponentInstanceProfile"
            }
         },
         "Metadata": {
            "AWS::CloudFormation::Init": {
               "config": {
                  "files": {
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\Set-LocalAccountPassword.ps1": {
                        "content": {
                            "Fn::Join": [
                                "", [
                                    "[CmdletBinding()]\n",
                                    "Param(\n",
                                    "  [Parameter(Mandatory=$true)][string]$Username,\n",
                                    "  [Parameter(Mandatory=$true)][string]$Password\n",
                                    ")\n",
                                    "$adsi = [ADSI]\"WinNT://$env:COMPUTERNAME\"\n",
                                    "$existing = $adsi.Children | where {$_.SchemaClassName -eq 'user' -and $_.Name -eq $Username }\n",
                                    "if ($existing -eq $null) {\n",
                                    "    Write-Error \"User $Username does not exist\"\n",
                                    "    return\n",
                                    "}\n",
                                    "$existing.SetPassword($Password)"
                                ]
                            ]
                        }
                     },
                     "C:\\Set-ServiceLogon.ps1": {
                        "content": {
                            "Fn::Join": [
                                "", [
                                    "[CmdletBinding()]\n",
                                    "Param(\n",
                                    "  [Parameter(Mandatory=$true)][string]$Service,\n",
                                    "  [Parameter(Mandatory=$true)][string]$Password\n",
                                    ")\n",
                                    "$filter = 'Name=' + \"'\" + $Service + \"'\" + ''\n",
                                    "$s = Get-WMIObject -class Win32_Service -Filter $filter\n",
                                    "$s.Change($Null,$Null,$Null,$Null,$Null,$Null,$Null,$Password,$Null,$Null,$Null)\n"
                                ]
                            ]
                        }
                     },
                     "C:\\deploy.py": {
                        "content": {
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
                                 "p = subprocess.check_output([",
								 "'powershell.exe',",
                                 "'C:\\\\CyberArk\\\\CloudRegisterToVault.ps1 ",
                                 "-CPM ",
                                 "-CPMVaultIP \"",
                                 {
                                    "Fn::GetAtt": [
                                       "VaultMachine",
                                       "PrivateIp"
                                    ]
                                 },
                                 ",",
                                 {
                                    "Fn::GetAtt": [
                                       "VaultDRMachine",
                                       "PrivateIp"
                                    ]
                                 },
                                 "\"",
                                 " -CPMVaultPort ",
                                 "1858 ",
                                 "-CPMVaultUser Administrator",
                                 " ",
                                 "-CPMVaultPassword '+",
                                 "adminp",
								 "],",
								 "stderr=subprocess.STDOUT)"
                              ]
                           ]
                        }
                     }
                  },
                  "services": {
                     "windows": {
                        "AmazonSSMAgent": {
                           "enabled": "true",
                           "ensureRunning": "true",
                           "files": [
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands": {
                     "01-restartSSM": {
                        "command": "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion": "30",
                        "ignoreErrors": "true"
                     },
                     "02-deploy": {
                        "command": "C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "03-configureCPMUser": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-LocalAccountPassword.ps1 -Username \"PasswordManagerUser\" -Password \"", { "Fn::GetAtt": ["CPMSecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "04-configureCPMService": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-ServiceLogon.ps1 -Service \"CyberArk Password Manager\" -Password \"", { "Fn::GetAtt": ["CPMSecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "05-configureCPMScannerService": {
                        "command": {
                           "Fn::Join": [
                               "",
                               [
                                   "powershell.exe -File C:\\Set-ServiceLogon.ps1 -Service \"CyberArk Central Policy Manager Scanner\" -Password \"", { "Fn::GetAtt": ["CPMSecretString", "RandomString"] } , "\""
                               ]
                           ]
                        },
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "06-CPMserviceConfig": {
                        "command": "sc config \"CyberArk Password Manager\" start=auto",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "07-CPMSserviceConfig": {
                        "command": "sc config \"CyberArk Central Policy Manager Scanner\" start=auto",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "99-SignalCompletion": {
                        "command": {
                           "Fn::Join": [
                              "", [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref": "AWS::StackId"
                                 },
                                 "         --resource CPMMachine ",
                                 "         --region ",
                                 {
                                    "Ref": "AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "DependsOn": [
            "PVWAMachine"
         ],
         "CreationPolicy": {
            "ResourceSignal": {
               "Timeout": "PT15M"
            }
         },
         "DeletionPolicy": "Retain"
      },
      "PSMMachine": {
         "Type": "AWS::EC2::Instance",
         "Properties": {
            "Tags": [{
               "Key": "Name",
               "Value": {
                  "Ref": "PSMInstanceName"
               }
            }],
            "SecurityGroupIds": {
               "Ref": "PSMInstanceSecurityGroups"
            },
            "SubnetId": {
               "Ref": "PSMInstanceSubnetId"
            },
            "ImageId": {
               "Fn::FindInMap": [
                  "RegionMap",
                  {
                     "Ref": "AWS::Region"
                  },
                  "PSM"
               ]
            },
            "InstanceType": {
               "Ref": "PSMInstanceType"
            },
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "", [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        " -r PSMMachine",
                        " --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        "  --resource PSMMachine",
                        "  --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            },
            "KeyName": {
               "Ref": "KeyName"
            },
            "IamInstanceProfile": {
               "Ref": "ComponentInstanceProfile"
            }
         },
         "Metadata": {
            "AWS::CloudFormation::Init": {
               "config": {
                  "files": {
                     "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "{",
                                 "  \"IsEnabled\" : true,",
                                 "  \"EngineConfiguration\" : {",
                                 "    \"PollInterval\" : \"00:00:05\",",
                                 "    \"Components\" : [",
                                 "    {",
                                 "      \"Id\" : \"EC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"EC2ConfigLog.txt\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"UTC\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-init-cmd.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                 "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                 "        \"Encoding\": \"ASCII\",",
                                 "        \"Filter\": \"cfn-wire.log\",",
                                 "        \"CultureName\": \"en-US\",",
                                 "        \"TimeZoneKind\": \"Local\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                 "      }",
                                 "    },",
                                 "    {",
                                 "      \"Id\": \"CloudWatchCfnWireLog\",",
                                 "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                 "      \"Parameters\": {",
                                 "        \"AccessKey\": \"\",",
                                 "        \"SecretKey\": \"\",",
                                 {
                                    "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                 },
                                 {
                                    "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                 },
                                 "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                 "      }",
                                 "    }],",
                                 "    \"Flows\": {",
                                 "      \"Flows\": [",
                                 "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                 "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                 "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                 "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                 "      ]",
                                 "    }",
                                 "  }",
                                 "}"
                              ]
                           ]
                        }
                     },
                     "C:\\deploy.py": {
                        "content": {
                           "Fn::Join":[
                              "",
                              [
                                 "import boto3\n",
                                 "import sys\n",
                                 "import subprocess\n",
                                 "import urllib2\n",
                                 "\n",
                                 "def fetchPassword(name):\n",
                                 "\tssmClient = boto3.client('ssm', region_name='",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "')\n",
                                 "\tobjectResponse = ssmClient.get_parameter(\n",
                                 "\t\tName = name,\n",
                                 "\t\tWithDecryption = True\n",
                                 "\t)\n",
                                 "\treturn objectResponse['Parameter']['Value']\n",
                                 "\n",
                                 "adminp = fetchPassword('",
                                 {
                                    "Fn::GetAtt":[
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 "')\n",
                                 "\n",
								 "p = subprocess.check_output([",
								 "'powershell.exe',",
                                 "'C:\\\\CyberArk\\\\CloudRegisterToVault.ps1 ",
                                 "-PSM ",
                                 "-PSMAcceptEula ",
                                 "Yes ",
                                 "-PSMVaultIP \"",
                                 {
                                    "Fn::GetAtt": [
                                       "VaultMachine",
                                       "PrivateIp"
                                    ]
                                 },
                                 ",",
                                 {
                                    "Fn::GetAtt": [
                                       "VaultDRMachine",
                                       "PrivateIp"
                                    ]
                                 },
                                 "\"",
                                 " -PSMVaultPort ",
                                 "1858 ",
                                 "-PSMVaultUser Administrator",
                                 " ",
                                 "-PSMVaultPassword '+",
                                 "adminp",
                                 "],",
								 "stderr=subprocess.STDOUT)"
								 ]
                           ]
                        }
                     }
                  },
                  "services": {
                     "windows": {
                        "AmazonSSMAgent": {
                           "enabled": "true",
                           "ensureRunning": "true",
                           "files": [
                              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"
                           ]
                        }
                     }
                  },
                  "commands": {
                     "01-restartSSM": {
                        "command": "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                        "waitAfterCompletion": "30",
                        "ignoreErrors": "true"
                     },
                     "02-deploy": {
                        "command": "C:\\Python27\\python.exe C:\\deploy.py",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "03-PSMserviceConfig": {
                        "command": "sc config \"Cyber-Ark Privileged Session Manager\" start=auto",
                        "waitAfterCompletion": "0",
                        "ignoreErrors": "false"
                     },
                     "99-SignalCompletion": {
                        "command": {
                           "Fn::Join": [
                              "", [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref": "AWS::StackId"
                                 },
                                 "         --resource PSMMachine ",
                                 "         --region ",
                                 {
                                    "Ref": "AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "DependsOn": [
            "CPMMachine"
         ],
         "CreationPolicy": {
            "ResourceSignal": {
               "Timeout": "PT15M"
            }
         },
         "DeletionPolicy": "Retain"
      },
      "PSMPMachine": {
         "Type": "AWS::EC2::Instance",
         "Properties": {
            "Tags": [{
               "Key": "Name",
               "Value": {
                  "Ref": "PSMPInstanceName"
               }
            }],
            "SecurityGroupIds": {
               "Ref": "PSMPInstanceSecurityGroups"
            },
            "SubnetId": {
               "Ref": "PSMPInstanceSubnetId"
            },
            "ImageId": {
               "Fn::FindInMap": [
                  "RegionMap",
                  {
                     "Ref": "AWS::Region"
                  },
                  "PSMP"
               ]
            },
            "InstanceType": {
               "Ref": "PSMPInstanceType"
            },
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "", [
                        "#!/bin/bash -e\n",
                        "/opt/aws/bin/cfn-init -v ",
                        "         --stack ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        "         --resource PSMPMachine ",
                        "         --configsets install_all ",
                        "         --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        "         --stack ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        "         --resource PSMPMachine ",
                        "         --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n"
                     ]
                  ]
               }
            },
            "KeyName": {
               "Ref": "KeyName"
            },
            "IamInstanceProfile": {
               "Ref": "ComponentInstanceProfile"
            }
         },
         "Metadata": {
            "AWS::CloudFormation::Init": {
               "configSets": {
                  "install_all": [
                     "install_cfn",
                     "install_logs",
                     "install_psmp"
                  ]
               },
               "install_cfn": {
                  "files": {
                     "/etc/cfn/cfn-hup.conf": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref": "AWS::StackId"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref": "AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode": "000400",
                        "owner": "root",
                        "group": "root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.PSMPMachine.Metadata.AWS::CloudFormation::Init\n",
                                 "action=/opt/aws/bin/cfn-init -v ",
                                 "         --stack ",
                                 {
                                    "Ref": "AWS::StackName"
                                 },
                                 "         --resource PSMPMachine ",
                                 "         --configsets install_all ",
                                 "         --region ",
                                 {
                                    "Ref": "AWS::Region"
                                 },
                                 "\n",
                                 "runas=root\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services": {
                     "sysvinit": {
                        "cfn-hup": {
                           "enabled": "true",
                           "ensureRunning": "true",
                           "files": [
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "install_logs": {
                  "files": {
                     "/etc/awslogs/awslogs.conf": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "[general]\n",
                                 "state_file= /var/awslogs/state/agent-state\n",
                                 "[/var/log/cloud-init.log]\n",
                                 "file = /var/log/cloud-init.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref": "LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cloud-init.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cloud-init-output.log]\n",
                                 "file = /var/log/cloud-init-output.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref": "LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cloud-init-output.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cfn-init.log]\n",
                                 "file = /var/log/cfn-init.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref": "LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cfn-init.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cfn-hup.log]\n",
                                 "file = /var/log/cfn-hup.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref": "LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cfn-hup.log\n",
                                 "datetime_format = \n",
                                 "[/var/log/cfn-wire.log]\n",
                                 "file = /var/log/cfn-wire.log\n",
                                 "log_group_name = ",
                                 {
                                    "Ref": "LogGroup"
                                 },
                                 "\n",
                                 "log_stream_name = {instance_id}/cfn-wire.log\n",
                                 "datetime_format = \n"
                              ]
                           ]
                        },
                        "mode": "000444",
                        "owner": "root",
                        "group": "root"
                     },
                     "/etc/awslogs/awscli.conf": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "[plugins]\n",
                                 "cwlogs = cwlogs\n",
                                 "[default]\n",
                                 "region = ",
                                 {
                                    "Ref": "AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode": "000444",
                        "owner": "root",
                        "group": "root"
                     }
                  },
                  "commands": {
                     "01_create_state_directory": {
                        "command": "mkdir -p /var/awslogs/state"
                     }
                  },
                  "services": {
                     "sysvinit": {
                        "awslogs": {
                           "enabled": "true",
                           "ensureRunning": "true",
                           "files": [
                              "/etc/awslogs/awslogs.conf"
                           ]
                        }
                     }
                  }
               },
               "install_psmp": {
                  "files": {
                     "/root/CD-Image/activatePSMP": {
                        "content": {
                           "Fn::Join": [
                              "", [
                                 "#!/bin/bash -e\n",
                                 "chmod 700 /root/CD-Image/register_and_activation.sh\n",
                                 "temppassword=`aws ssm get-parameter --name ",
                                 {
                                    "Fn::GetAtt": [
                                       "StoreAdminPassword",
                                       "SsmId"
                                    ]
                                 },
                                 " --region=",
                                 {
                                    "Ref": "AWS::Region"
                                 },
                                 " --with-decryption --output text --query Parameter.Value`\n",
                                 "echo Object successfully retrieved from ssm.\n",
                                 "/opt/CARKpsmp/bin/createcredfile /root/CD-Image/user.cred Password -Username Administrator -Password $temppassword -Hostname\n",
                                 "echo Credentials file successfully created.\n",
                                 "/root/CD-Image/register_and_activation.sh /root/CD-Image/user.cred ",
                                 {
                                    "Fn::GetAtt": [
                                       "VaultMachine",
                                       "PrivateIp"
                                    ]
                                 },
                                 ",",
                                 {
                                    "Fn::GetAtt": [
                                       "VaultDRMachine",
                                       "PrivateIp"
                                    ]
                                 },
                                 " $(curl http://169.254.169.254/latest/meta-data/instance-id) y\n"
                              ]
                           ]
                        }
                     }
                  },
                  "commands": {
                     "01-Chmod": {
                        "command": "sudo chmod 700 /root/CD-Image/activatePSMP"
                     },
                     "02-PSMPdeploy": {
                        "command": "sudo /root/CD-Image/activatePSMP"
                     },
                     "03-ClearData": {
                        "command": "sudo shred -u /root/CD-Image/activatePSMP"
                     },
                     "04-RemoveInstallationFolder": {
                        "command": "sudo rm -rf /root/CD-Image"
                     },
                     "99-SignalCompletion": {
                        "command": {
                           "Fn::Join": [
                              "", [
                                 "/opt/aws/bin/cfn-signal -e $? ",
                                 "         --stack ",
                                 {
                                    "Ref": "AWS::StackId"
                                 },
                                 "         --resource PSMPMachine ",
                                 "         --region ",
                                 {
                                    "Ref": "AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },
         "DependsOn": [
            "PSMMachine"
         ],
         "CreationPolicy": {
            "ResourceSignal": {
               "Timeout": "PT10M"
            }
         },
         "DeletionPolicy": "Retain"
      },
      "VaultInstancesRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Statement": [{
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [
                        "ec2.amazonaws.com"
                     ]
                  },
                  "Action": [
                     "sts:AssumeRole"
                  ]
               }]
            },
            "Path": "/",
            "ManagedPolicyArns": [{
               "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
            }],
            "Policies": [{
               "PolicyName": "LogRolePolicy",
               "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [{
                     "Effect": "Allow",
                     "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:DescribeLogStreams"
                     ],
                     "Resource": [{
                        "Fn::Sub": "arn:${AWS::Partition}:logs:*:*:*"
                     }]
                  }]
               }
            }]
         },
         "Condition": "EULACondition",
         "DeletionPolicy": "Retain"
      },
      "InstancesSSMPolicy": {
         "Type": "AWS::IAM::Policy",
         "Properties": {
            "PolicyName": "InstancesSsmAccess",
            "PolicyDocument": {
               "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                     "ssm:GetParameter"
                  ],
                  "Resource": [{
                     "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                  }]
               }]
            },
            "Roles": [{
                  "Ref": "ComponentInstanceRole"
               },
               {
                  "Ref": "VaultInstancesRole"
               }
            ]
         },
         "Condition": "EULACondition"
      },
      "VaultInstancesKMSPolicy": {
         "Type": "AWS::IAM::Policy",
         "Properties": {
            "PolicyName": "VaultInstancesKMSAccess",
            "PolicyDocument": {
               "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                     "kms:Encrypt",
                     "kms:Decrypt"
                  ],
                  "Resource": "*"
               }]
            },
            "Roles": [{
               "Ref": "VaultInstancesRole"
            }]
         },
         "Condition": "EULACondition",
         "DeletionPolicy": "Retain"
      },
      "VaultInstancesS3VaultFilesBucketPolicy": {
         "Type": "AWS::IAM::Policy",
         "Properties": {
            "PolicyName": "VaultFilesBucketAccess",
            "PolicyDocument": {
               "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                     "s3:GetObject",
                     "s3:GetObjectVersion"
                  ],
                  "Resource": { "Fn::Sub": "arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*" }
               }]
            },
            "Roles": [{
               "Ref": "VaultInstancesRole"
            }]
         },
         "Condition": "EULACondition"
      },
      "VaultBootstrapKMSPolicy": {
         "Type": "AWS::IAM::Policy",
         "Properties": {
            "PolicyName": "VaultBootstrapKMSAccess",
            "PolicyDocument": {
               "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                     "kms:CreateKey",
                     "kms:GenerateRandom"
                  ],
                  "Resource": "*"
               }]
            },
            "Roles": [{
               "Ref": "VaultInstancesRole"
            }]
         }
      }
   },
   "Parameters": {
      "EULA": {
         "Type": "String",
         "Description": "I have read and agree to the Terms and Conditions.",
         "AllowedValues": [
            "Accept",
            "Decline"
         ],
         "Default": "Decline"
      },
      "KeyName": {
         "Type": "AWS::EC2::KeyPair::KeyName",
         "Description": "Select an existing Key Pair from your AWS account.",
         "ConstraintDescription": "Can contain only ASCII characters."
      },
      "VaultFilesBucket": {
         "Type": "String",
         "Description": "Enter the name of the bucket containing the license and recovery public key."
      },
      "LicenseFile": {
         "Type": "String",
         "Description": "Enter the path of the license file within the bucket.",
         "Default": "license.xml"
      },
      "RecoveryPublicKey": {
         "Type": "String",
         "Description": "Enter the path of the recovery public key file within the bucket.",
         "Default": "recpub.key"
      },
      "VaultInstanceName": {
         "Type": "String",
         "Description": "Enter a name for the Vault instance.",
         "Default": "CyberArk Vault"
      },
      "VaultMasterPassword": {
         "Type": "String",
         "Description": "Enter a password for the Vault Master user.",
         "NoEcho": true,
         "MinLength": 8,
         "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
         "ConstraintDescription": "Vault Master password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
      },
      "RetypeMasterPassword": {
         "Type": "String",
         "Description": "Retype the password for the Vault Master user.",
         "NoEcho": true,
         "MinLength": 8
      },
      "VaultAdminPassword": {
         "Type": "String",
         "Description": "Enter a password for the Vault Administrator user.",
         "NoEcho": true,
         "MinLength": 8,
         "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
         "ConstraintDescription": "Vault Administrator password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
      },
      "RetypeAdminPassword": {
         "Type": "String",
         "Description": "Retype the password for the Vault Administrator user.",
         "NoEcho": true,
         "MinLength": 8
      },
      "VaultDRPassword": {
         "Type": "String",
         "Description": "Enter a password for the Vault DR user.",
         "NoEcho": true,
         "MinLength": 8,
         "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
         "ConstraintDescription": "Vault DR password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
      },
      "RetypeDRPassword": {
         "Type": "String",
         "Description": "Retype the password for the Vault DR user.",
         "NoEcho": true,
         "MinLength": 8
      },
      "VaultInstanceType": {
         "Type": "String",
         "Description": "Select the instance type of the Vault instance.",
         "AllowedValues": [
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge"
         ],
         "Default": "m4.large"
      },
      "VaultInstanceSecurityGroups": {
         "Type": "List<AWS::EC2::SecurityGroup::Id>",
         "Description": "Assign Security Groups to the Vault and Vault DR instances."
      },
      "VaultInstanceSubnetId": {
         "Type": "AWS::EC2::Subnet::Id",
         "Description": "Select the Subnet Id where the Vault instance will reside."
      },
      "DRInstanceSubnetId": {
         "Type": "AWS::EC2::Subnet::Id",
         "Description": "Select the Subnet Id where the Vault DR instance will reside."
      },
      "CPMInstanceName": {
         "Type": "String",
         "Description": "Enter a name for the CPM instance.",
         "Default": "CyberArk CPM"
      },
      "CPMInstanceType": {
         "Type": "String",
         "Description": "Select the instance type of the CPM instance.",
         "AllowedValues": [
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge"
         ],
         "Default": "c4.large"
      },
      "CPMInstanceSecurityGroups": {
         "Type": "List<AWS::EC2::SecurityGroup::Id>",
         "Description": "Assign Security Groups to the CPM instance."
      },
      "CPMInstanceSubnetId": {
         "Type": "AWS::EC2::Subnet::Id",
         "Description": "Select the Subnet Id where the CPM instance will reside."
      },
      "PVWAInstanceName": {
         "Type": "String",
         "Description": "Enter a name for the PVWA instance.",
         "Default": "CyberArk PVWA"
      },
      "PVWAInstanceType": {
         "Type": "String",
         "Description": "Select the instance type of the PVWA instance.",
         "AllowedValues": [
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge"
         ],
         "Default": "t2.medium"
      },
      "PVWAInstanceSecurityGroups": {
         "Type": "List<AWS::EC2::SecurityGroup::Id>",
         "Description": "Assign Security Groups to the PVWA instance."
      },
      "PVWAInstanceSubnetId": {
         "Type": "AWS::EC2::Subnet::Id",
         "Description": "Select the Subnet Id where the PVWA instance will reside."
      },
      "PVWAHostName":{
         "Type":"String",
         "Description":"IP or FQDN of PVWA server"
      },
      "PSMInstanceName": {
         "Type": "String",
         "Description": "Enter a name for the PSM instance.",
         "Default": "CyberArk PSM"
      },
      "PSMInstanceType": {
         "Type": "String",
         "Description": "Select the instance type of the PSM instance.",
         "AllowedValues": [
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge"
         ],
         "Default": "c4.2xlarge"
      },
      "PSMInstanceSecurityGroups": {
         "Type": "List<AWS::EC2::SecurityGroup::Id>",
         "Description": "Assign Security Groups to the PSM instance."
      },
      "PSMInstanceSubnetId": {
         "Type": "AWS::EC2::Subnet::Id",
         "Description": "Select the Subnet Id where the PSM instance will reside."
      },
      "PSMPInstanceName": {
         "Type": "String",
         "Description": "Enter a name for the PSM SSH Proxy instance.",
         "Default": "CyberArk PSM SSH Proxy"
      },
      "PSMPInstanceType": {
         "Type": "String",
         "Description": "Select the instance type of the PSM SSH Proxy instance.",
         "AllowedValues": [
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge"
         ],
         "Default": "m4.large"
      },
      "PSMPInstanceSecurityGroups": {
         "Type": "List<AWS::EC2::SecurityGroup::Id>",
         "Description": "Assign Security Groups to the PSM SSH Proxy instance."
      },
      "PSMPInstanceSubnetId": {
         "Type": "AWS::EC2::Subnet::Id",
         "Description": "Select the Subnet Id where the PSM SSH Proxy instance will reside."
      }
   },
   "Conditions": {
      "EULACondition": {
         "Fn::Equals": [
            "Accept",
            {
               "Ref": "EULA"
            }
         ]
      }
   },
   "Rules": {
      "PasswordConfirmation": {
         "Assertions": [{
               "Assert": {
                  "Fn::Equals": [{
                        "Ref": "VaultMasterPassword"
                     },
                     {
                        "Ref": "RetypeMasterPassword"
                     }
                  ]
               },
               "AssertDescription": "The password confirmation does not match."
            },
            {
               "Assert": {
                  "Fn::Equals": [{
                        "Ref": "VaultAdminPassword"
                     },
                     {
                        "Ref": "RetypeAdminPassword"
                     }
                  ]
               },
               "AssertDescription": "The password confirmation does not match."
            },
            {
               "Assert": {
                  "Fn::Equals": [{
                        "Ref": "VaultDRPassword"
                     },
                     {
                        "Ref": "RetypeDRPassword"
                     }
                  ]
               },
               "AssertDescription": "The password confirmation does not match."
            }
         ]
      }
   },
   "Metadata": {
      "AWS::CloudFormation::Interface": {
         "ParameterGroups": [{
               "Label": {
                  "default": "General parameters"
               },
               "Parameters": [
                  "EULA",
                  "KeyName",
                  "VaultFilesBucket",
                  "LicenseFile",
                  "RecoveryPublicKey"
               ]
            },
            {
               "Label": {
                  "default": "Vault and Vault DR configuration"
               },
               "Parameters": [
                  "VaultInstanceName",
                  "VaultMasterPassword",
                  "RetypeMasterPassword",
                  "VaultAdminPassword",
                  "RetypeAdminPassword",
                  "VaultDRPassword",
                  "RetypeDRPassword",
                  "VaultInstanceType",
                  "VaultInstanceSecurityGroups",
                  "VaultInstanceSubnetId",
                  "DRInstanceSubnetId"
               ]
            },
            {
               "Label": {
                  "default": "CPM configuration"
               },
               "Parameters": [
                  "CPMInstanceName",
                  "CPMInstanceType",
                  "CPMInstanceSecurityGroups",
                  "CPMInstanceSubnetId"
               ]
            },
            {
               "Label": {
                  "default": "PVWA configuration"
               },
               "Parameters": [
                  "PVWAInstanceName",
                  "PVWAInstanceType",
                  "PVWAInstanceSecurityGroups",
                  "PVWAInstanceSubnetId",
                  "PVWAHostName"
               ]
            },
            {
               "Label": {
                  "default": "PSM configuration"
               },
               "Parameters": [
                  "PSMInstanceName",
                  "PSMInstanceType",
                  "PSMInstanceSecurityGroups",
                  "PSMInstanceSubnetId"
               ]
            },
            {
               "Label": {
                  "default": "PSM SSH Proxy configuration"
               },
               "Parameters": [
                  "PSMPInstanceName",
                  "PSMPInstanceType",
                  "PSMPInstanceSecurityGroups",
                  "PSMPInstanceSubnetId"
               ]
            }
         ],
         "ParameterLabels": {
            "EULA": {
               "default": "License Agreement"
            },
            "KeyName": {
               "default": "Key Pair"
            },
            "VaultFilesBucket": {
               "default": "Vault Files Bucket"
            },
            "LicenseFile": {
               "default": "License File"
            },
            "RecoveryPublicKey": {
               "default": "Recovery Public Key"
            },
            "VaultInstanceName": {
               "default": "Vault Instance Name"
            },
            "VaultMasterPassword": {
               "default": "Vault Master Password"
            },
            "RetypeMasterPassword": {
               "default": "Retype Master Password"
            },
            "VaultAdminPassword": {
               "default": "Vault Admin Password"
            },
            "RetypeAdminPassword": {
               "default": "Retype Admin Password"
            },
            "VaultDRPassword": {
               "default": "DR Password"
            },
            "RetypeDRPassword": {
               "default": "Retype DR Password"
            },
            "VaultInstanceType": {
               "default": "Vault and Vault DR Instance Type"
            },
            "VaultInstanceSecurityGroups": {
               "default": "Vault Security Groups"
            },
            "VaultInstanceSubnetId": {
               "default": "Vault Instance Subnet Id"
            },
            "DRInstanceSubnetId": {
               "default": "Vault DR Instance Subnet Id"
            },
            "CPMInstanceName": {
               "default": "CPM Instance Name"
            },
            "CPMInstanceType": {
               "default": "CPM Instance Type"
            },
            "CPMInstanceSecurityGroups": {
               "default": "CPM Instance Security Groups"
            },
            "CPMInstanceSubnetId": {
               "default": "CPM Instance Subnet Id"
            },
            "PVWAInstanceName": {
               "default": "PVWA Instance Name"
            },
            "PVWAInstanceType": {
               "default": "PVWA Instance Type"
            },
            "PVWAInstanceSecurityGroups": {
               "default": "PVWA Instance Security Groups"
            },
            "PVWAInstanceSubnetId": {
               "default": "PVWA Instance Subnet Id"
            },
            "PVWAHostName":{
               "default":"PVWA FQDN (Optional)"
            },
            "PSMInstanceName": {
               "default": "PSM Instance Name"
            },
            "PSMInstanceType": {
               "default": "PSM Instance Type"
            },
            "PSMInstanceSecurityGroups": {
               "default": "PSM Instance Security Groups"
            },
            "PSMInstanceSubnetId": {
               "default": "PSM Instance Subnet Id"
            },
            "PSMPInstanceName": {
               "default": "PSM SSH Proxy Instance Name"
            },
            "PSMPInstanceType": {
               "default": "PSM SSH Proxy Instance Type"
            },
            "PSMPInstanceSecurityGroups": {
               "default": "PSM SSH Proxy Instance Security Groups"
            },
            "PSMPInstanceSubnetId": {
               "default": "PSM SSH Proxy Instance Subnet Id"
            }
         }
      }
   },
   "Mappings": {
      "RegionMap": {
         "us-east-1": {
            "Vault": "ami-01d4a7bd46088f700",
            "CPM": "ami-0c5048832f0ba342b",
            "PVWA": "ami-01512e92898f7ba04",
            "PSM": "ami-08e096c0a3522f356",
            "PSMP": "ami-0bb8f4622a32ccbbe"
         },
         "us-east-2":{
            "Vault":"ami-068bc4ecc92db8199",
            "CPM":"ami-083b0f4f9d741d954",
            "PVWA":"ami-0f945da6e23f077a9",
            "PSM":"ami-09b4ac3bdeae933c0",
            "PSMP":"ami-022c7e173b0e6e7c4"
         },
         "eu-west-2": {
            "Vault": "ami-0a559ff9a29efa431",
            "CPM": "ami-07fd173db280acdd4",
            "PVWA": "ami-08304728cfc488809",
            "PSM": "ami-08f851be28facba76",
            "PSMP": "ami-0e5eb6dfb2ad55e05"
         },
         "us-west-1": {
            "Vault": "ami-0f1803a9c76472be5",
            "CPM": "ami-099bcb5ad7933f4ea",
            "PVWA": "ami-04696a8ab6b72e55c",
            "PSM": "ami-01eb3fb9c9c81365d",
            "PSMP": "ami-056229e9b60431969"
         },
         "us-west-2": {
            "Vault": "ami-01edee6e967c17628",
            "CPM": "ami-0e217872421f388da",
            "PVWA": "ami-08d239a59b430d34e",
            "PSM": "ami-08ee313797af3001f",
            "PSMP": "ami-02643903bb58ccd9b"
         },
         "ca-central-1": {
            "Vault": "ami-0582d8c1a70001244",
            "CPM": "ami-0d30069a5fefbb76b",
            "PVWA": "ami-0609dcbfc67c0ff0b",
            "PSM": "ami-0ac9ec0e3a84f7d2f",
            "PSMP": "ami-0169b158e5aedf114"
         },
         "eu-west-1": {
            "Vault": "ami-09397273b9046d5b9",
            "CPM": "ami-0e7871f260cff49cd",
            "PVWA": "ami-06b533e49a82d0eaf",
            "PSM": "ami-0c1aab51f2b76b3f3",
            "PSMP": "ami-0fcc0e1d2a564297c"
         },
         "eu-central-1": {
            "Vault": "ami-06f43402c6e002660",
            "CPM": "ami-0d80700930f21c822",
            "PVWA": "ami-0f9f83f225903fa54",
            "PSM": "ami-0d25e8bcf7b72ddc4",
            "PSMP": "ami-0646e73bd35827fd3"
         },
         "ap-southeast-1": {
            "Vault": "ami-0872cf43e69e28466",
            "CPM": "ami-0f4c5e5d997518a87",
            "PVWA": "ami-0cb6d24dcd607ec98",
            "PSM": "ami-08f7c51d67091747f",
            "PSMP": "ami-0e39d0b84ebb54e1a"
         },
         "ap-southeast-2": {
            "Vault": "ami-0a02581b7c2a55e6f",
            "CPM": "ami-0ba04d0de7e57e96a",
            "PVWA": "ami-03f90659c438a56c8",
            "PSM": "ami-0221aac7e5aa4877e",
            "PSMP": "ami-0d13566385aaaa992"
         },
         "ap-northeast-2": {
            "Vault": "ami-0ed3745003fa46976",
            "CPM": "ami-089d652381509cb91",
            "PVWA": "ami-0d40187c0f8c4b8db",
            "PSM": "ami-08ac621e8106f7ece",
            "PSMP": "ami-04401539a5f3afc5c"
         },
         "ap-northeast-1": {
            "Vault": "ami-02e14fe4621742bde",
            "CPM": "ami-0e8fa7121b8b46482",
            "PVWA": "ami-0fcb9f4bfab7f1b64",
            "PSM": "ami-03de5e42ad5435e97",
            "PSMP": "ami-0320b8464c30d2df8"
         },
         "ap-south-1": {
            "Vault": "ami-0ff8fe4a731baa07a",
            "CPM": "ami-06abf8d5e4c0f3ba1",
            "PVWA": "ami-076964d92284f16fa",
            "PSM": "ami-000f302e84175b8ab",
            "PSMP": "ami-02dc87adaa5c196da"
         },
         "sa-east-1": {
            "Vault": "ami-04b91be9198835fc8",
            "CPM": "ami-0c4d646f214dc2565",
            "PVWA": "ami-0f7517ec36ced0752",
            "PSM": "ami-0a0688382df21b7fa",
            "PSMP": "ami-02129f1be6a069a69"
         },
         "us-gov-west-1": {
            "Vault": "ami-fdbff49c",
            "CPM": "ami-5483c835",
            "PVWA": "ami-6abbf00b",
            "PSM": "ami-56bff437",
            "PSMP": "ami-95b6fdf4"
         },
         "us-gov-east-1": {
            "Vault": "ami-027579ab26d55ef87",
            "CPM": "ami-005676d3d8ddc47bc",
            "PVWA": "ami-061762cafdb68d4ab",
            "PSM": "ami-0a25e30f22418a0d4",
            "PSMP": "ami-038b1bf791cd3a266"
         }
      }
   },
   "Outputs": {
      "CloudWatchLogGroupName": {
         "Description": "The name of the CloudWatch log group",
         "Value": {
            "Ref": "LogGroup"
         }
      }
   }
}
