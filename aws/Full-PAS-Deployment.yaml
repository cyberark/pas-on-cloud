AWSTemplateFormatVersion: "2010-09-09"
Description: This template handles the deployment of CyberArk PAS solution to an existing network infrastructure
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  CPMUserDataLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/UserDataLog
    DeletionPolicy: Retain
  CPMConfigurationLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMConfigurationLog
    DeletionPolicy: Retain
  CPMRegistrationLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMRegistrationLog
    DeletionPolicy: Retain
  CPMSetLocalServiceLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMSetLocalServiceLog
    DeletionPolicy: Retain
  PSMUserDataLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/UserDataLog
    DeletionPolicy: Retain
  PSMConfigurationLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMConfigurationLog
    DeletionPolicy: Retain
  PSMRegistrationLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMRegistrationLog
    DeletionPolicy: Retain
  PVWAUserDataLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/UserDataLog
    DeletionPolicy: Retain
  PVWAConfigurationLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWAConfigurationLog
    DeletionPolicy: Retain
  PVWARegistrationLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWARegistrationLog
    DeletionPolicy: Retain
  VaultUserDataLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/UserDataLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultInitLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/VaultInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultPostInstallLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/VaultPostInstallLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRUserDataLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/UserDataLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRInitLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/VaultInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRPostInstallLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/VaultPostInstallLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "Vault"
      OS: !Ref WinVersion
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
    Condition: VaultCustomImageEmpty
  PVWAAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "PVWA"
      OS: !Ref WinVersion
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
    Condition: PVWACustomImageEmpty
  CPMAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "CPM"
      OS: !Ref WinVersion
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
    Condition: CPMCustomImageEmpty
  PSMAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "PSM"
      OS: !Ref WinVersion
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
    Condition: PSMCustomImageEmpty
  PSMPAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "PSMP"
      OS: "RHEL-9"
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
    Condition: PSMPCustomImageEmpty
  PTAAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: "14.2"
      Component: "PTA"
      OS: "RHEL-9"
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
    Condition: PTACustomImageEmpty
  StoreMasterPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt StorePasswordLambda.Arn
      Password: !Ref VaultMasterPassword
    DependsOn:
      - LambdaDeployRole
  StoreAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StorePasswordLambda.Arn
      Password: !Ref VaultAdminPassword
    DependsOn:
      - LambdaDeployRole
  StoreDRPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StorePasswordLambda.Arn
      Password: !Ref VaultDRPassword
    DependsOn:
      - LambdaDeployRole
  StoreSecret:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'StorePasswordLambda.Arn'
      Password: !Ref 'Secret'
    DependsOn:
      - LambdaDeployRole
  CleanMasterPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt DeletePasswordLambda.Arn
      key: !GetAtt StoreMasterPassword.SsmId
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  CleanAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt DeletePasswordLambda.Arn
      key: !GetAtt StoreAdminPassword.SsmId
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - CPMMachine
      - PSMPMachine
      - PTAMachine
  CleanDRPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt DeletePasswordLambda.Arn
      key: !GetAtt StoreDRPassword.SsmId
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  CleanSecret:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeletePasswordLambda.Arn'
      key: !GetAtt 'StoreSecret.SsmId'
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  RemovePermissionVault:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'RemovePermissionLambda.Arn'
      vault_role_name: !Ref 'VaultInstancesRole'
      lambda_role_name: !Ref 'LambdaRemovePermissionsRole'
      instance: !Ref 'VaultMachine'
      region: !Ref 'AWS::Region'
  RemovePermissionVaultDR:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'RemovePermissionLambda.Arn'
      vault_role_name: !Ref 'VaultDRInstancesRole'
      lambda_role_name: !Ref 'LambdaRemovePermissionsRole'
      instance: !Ref 'VaultDRMachine'
      region: !Ref 'AWS::Region'
  RemovePermissionsKMSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: KMSPolicy
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action:
              - '*'
            Resource:
              - '*'
      Roles:
        - !Ref LambdaRemovePermissionsRole
    DependsOn:
      - RemovePermissionVaultDR
  RemovePermissionsVaultBootstrapIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultBootstrapIAMPolicy
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action:
              - '*'
            Resource:
              - '*'
      Roles:
        - !Ref LambdaRemovePermissionsRole
    DependsOn:
      - RemovePermissionVaultDR
  VaultBootstrapIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultBootstrapIAMPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - iam:GetRole
              - iam:DeleteRolePolicy
              - iam:PutRolePolicy
            Resource:
              - !GetAtt VaultInstancesRole.Arn
              - !GetAtt VaultDRInstancesRole.Arn
              - !GetAtt LambdaRemovePermissionsRole.Arn
      Roles:
        - !Ref 'LambdaRemovePermissionsRole'
  InstancesSSMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancesSsmAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:GetParameters'
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
      Roles:
        - !Ref ComponentInstancesRole
    DeletionPolicy: Retain
  LambdaDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
        - PolicyName: SSM
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:DeleteParameter'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
        - PolicyName: DescribeImages
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ec2:DescribeImages'
                Resource: "*"
  LambdaLogDenyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: denyLambdaLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Deny
                Action:
                  - 'logs:*'
                Resource: '*'
  LambdaRemovePermissionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - '*'
        - PolicyName: KMSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                Resource:
                  - '*'
  VaultInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: VaultSSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreMasterPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreAdminPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreDRPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreSecret.SsmId}'
        - PolicyName: VaultFilesBucketAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${LicenseFile}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${RecoveryPublicKey}'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}'
        - PolicyName: VaultInstancesKMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateKey
                  - kms:GenerateRandom
                  - kms:TagResource
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:EnableKeyRotation
                  - kms:UpdateKeyDescription
                  - kms:CreateAlias
                Resource: '*'
        - PolicyName: VaultBootstrapIAMPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                Resource: '*'
    DeletionPolicy: Retain
  VaultDRInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: VaultSSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreDRPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreSecret.SsmId}'
        - PolicyName: VaultInstancesKMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateKey
                  - kms:GenerateRandom
                  - kms:TagResource
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:EnableKeyRotation
                  - kms:UpdateKeyDescription
                  - kms:CreateAlias
                Resource: '*'
        - PolicyName: VaultBootstrapIAMPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                Resource: '*'
    DeletionPolicy: Retain
  ComponentInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
    DeletionPolicy: Retain
  VaultInstancesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref VaultInstancesRole
    DeletionPolicy: Retain
  VaultDRInstancesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref VaultDRInstancesRole
    DeletionPolicy: Retain
  ComponentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ComponentInstancesRole
    DeletionPolicy: Retain
  StorePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Saves given password to parameter store as SecureString
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:
                  print ('The property Password must not be empty')
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
              try:
                  if event['RequestType'] == 'Delete':
                      ssmClient.delete_parameter(Name=physicalResourceId)
                      print ('Password successfully deleted. Id='+physicalResourceId)
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Create':
                      ssmClient.put_parameter(Name=physicalResourceId, Value=event['ResourceProperties']['Password'], Type='SecureString')
                      print ('The store parameter has been created. Id='+physicalResourceId)
                      response = {'SsmId': physicalResourceId}
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  DeletePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Delete password from parameter store
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      ssmClient.delete_parameter(Name=event['ResourceProperties']['key'])
                      print ('Password succesfully deleted. Id='+event['ResourceProperties']['key'])
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  RemovePermissionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Change Policies of VaultInstancesRole IAM Role
      Code:
        ZipFile: |-
          import json
          import boto3
          import uuid
          import cfnresponse


          def lambda_handler(event, context):
            physicalResourceId = str(uuid.uuid4())
            if 'PhysicalResourceId' in event:
              physicalResourceId = event['PhysicalResourceId']
            if event['RequestType'] == 'Create':
              try:
                print("Creating AWS CloudFormation")
                print("Start RemovePermissionLambda execution")
                client = boto3.client('iam')

                # Get vault role info
                vault_role = client.get_role(RoleName=event['ResourceProperties']['vault_role_name'])['Role']
                print("Retrieve IAM Role ID: {0}".format(vault_role["RoleId"]))

                # Delete old Policies
                list = [event['ResourceProperties']['vault_role_name']]
                inline_policies = ["VaultInstancesKMSPolicy","VaultBootstrapIAMPolicy","VaultSSMPolicy","VaultFilesBucketAccess"]
                print("Trying to delete inline policies from {0} IAM Role".format(vault_role["RoleId"]))
                for role in list:
                  print("Delete policies in {0} IAM Role".format(role))
                  for inline_policy in inline_policies:
                    try:
                      delete = client.delete_role_policy(RoleName=role, PolicyName=inline_policy)
                      print("Delete policy: {0}".format(inline_policy))
                    except:
                      print("Didn\'t find policy: {0}".format(inline_policy))
                print("Finish to delete inline policies from {0} IAM Role".format(vault_role["RoleId"]))

                # Get KMS ID
                kms = boto3.client('kms', region_name=event['ResourceProperties']['region'])
                kms_arn = kms.describe_key(KeyId="alias/vault/{0}".format(event['ResourceProperties']['instance']))['KeyMetadata']['Arn']
                print("Retrieve KMS ARN: {0}".format(kms_arn))

                # Create inline policy
                kms_policy =  {
                  "Statement": [
                    {
                      "Action": [
                        "kms:Encrypt",
                        "kms:Decrypt"
                        ],
                        "Resource": kms_arn,
                        "Effect": "Allow"
                    }
                  ]
                }

                response = client.put_role_policy(RoleName=vault_role['RoleName'], PolicyName="VaultInstancesKMSPolicy", PolicyDocument=json.dumps(kms_policy))
                print("Add inline policy VaultInstancesKMSRestrictedPolicy to {0} IAM Role".format(vault_role["RoleId"]))

                return cfnresponse.send(event, context, cfnresponse.SUCCESS, None, {}, physicalResourceId)
              except Exception as E:
                print("Error in Lambda execution: {0}".format(E))
                return cfnresponse.send(event, context, cfnresponse.FAILED,E,{}, physicalResourceId)
            elif event['RequestType'] == 'Delete':
              print("Deleting AWS CloudFormation")
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaRemovePermissionsRole.Arn'
  GetLatestAMILambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback


          def handler(event, context):
            try:
              component = event['ResourceProperties']['Component']
              pas_ver= event['ResourceProperties']['Version']
              pas_ver_major= int(pas_ver.split(".")[0])
              pas_ver_minor= int(pas_ver.split(".")[1])
              response = {
                  "Images": []
              }

              pas_ver_without_os_filter = ['11.5','11.6','11.7','12.0','12.1','12.2']
              os_filter = '' if pas_ver in pas_ver_without_os_filter else \
              event['ResourceProperties']['OS']
              
              while (response['Images'] == []) and (pas_ver_major >= 0):
                while (response['Images'] == []) and (pas_ver_minor >= 0):
                  ami_name = 'CyberArk PAM ' + component + ' v'+str(pas_ver_major) + '.' + str(pas_ver_minor) +'*'+ os_filter
                  response = boto3.client('ec2').describe_images(
                      Owners= [event['ResourceProperties']['OwnerAccountId']],
                      Filters=[
                        {'Name': 'name', 'Values':  [ami_name]},
                      ],
                  )
                  pas_ver_minor -= 1
                pas_ver_major -= 1
                pas_ver_minor = 9
              amis = sorted(response['Images'],
                            key=lambda x: x['CreationDate'],
                            reverse=True)
              id = amis[0]['ImageId']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except IndexError:
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "Requested AMI not found")
            except:
              traceback.print_last()
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "An error occured, please refer to the last exception")
      Runtime: python3.11
      Handler: index.handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  VaultMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'VaultInstanceName'
      SecurityGroupIds: !Ref 'VaultInstanceSecurityGroups'
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 30
            Encrypted: true
        - DeviceName: "/dev/sdb"
          Ebs:
            VolumeSize: 30
            Encrypted: true
      SubnetId: !Ref 'VaultInstanceSubnetId'
      ImageId:
        Fn::If:
          - VaultCustomImageEmpty
          - !Ref VaultAmi
          - !Ref VaultCustomAmi
      InstanceType: !Ref 'VaultInstanceType'
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "IsPrimaryOrDR"             = "Primary"
              "VaultFilesBucket"          = "${VaultFilesBucket}"
              "LicenseFileKey"            = "${LicenseFile}"
              "RecoveryPublicKey"         = "${RecoveryPublicKey}"
              "Region"                    = "${AWS::Region}"
              "LogGroup"                  = "${LogGroup}"
              "UserDataLogStream"         = "${VaultUserDataLogStream}"
              "VaultInitLogStream"        = "${VaultInitLogStream}"
              "VaultPostInstallLogStream" = "${VaultPostInstallLogStream}"
              "SSMMasterPassParameterID"  = "${StoreMasterPassword.SsmId}"
              "SSMAdminPassParameterID"   = "${StoreAdminPassword.SsmId}"
              "SSMDRPassParameterID"      = "${StoreDRPassword.SsmId}"
              "SSMSecretParameterID"      = "${SecretSsmId}"
              "VaultInstancesRole"        = "${VaultInstancesRole}"
              "VaultHostname"             = "${VaultHostname}"
              "StackName"                 = "${AWS::StackName}"
            }

            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - SecretSsmId: !If
              - SecretProvided
              - !GetAtt StoreSecret.SsmId
              - ''
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'VaultInstancesProfile'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
  VaultDRMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VaultInstanceName} DR'
      SecurityGroupIds: !Ref 'VaultInstanceSecurityGroups'
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 30
            Encrypted: true
        - DeviceName: "/dev/sdb"
          Ebs:
            VolumeSize: 30
            Encrypted: true
      SubnetId: !Ref 'DRInstanceSubnetId'
      ImageId:
        Fn::If:
          - VaultCustomImageEmpty
          - !Ref VaultAmi
          - !Ref VaultCustomAmi
      InstanceType: !Ref 'VaultInstanceType'
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "IsPrimaryOrDR"             = "DR"
              "Region"                    = "${AWS::Region}"
              "LogGroup"                  = "${LogGroup}"
              "UserDataLogStream"         = "${VaultDRUserDataLogStream}"
              "VaultInitLogStream"        = "${VaultDRInitLogStream}"
              "VaultPostInstallLogStream" = "${VaultDRPostInstallLogStream}"
              "SSMDRPassParameterID"      = "${StoreDRPassword.SsmId}"
              "SSMSecretParameterID"      = "${SecretSsmId}"
              "VaultPrivateIP"            = "${VaultMachine.PrivateIp}"
              "VaultInstancesRole"        = "${VaultDRInstancesProfile}"
              "VaultHostname"             = "${VaultHostname}"
              "StackName"                 = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - SecretSsmId: !If
              - SecretProvided
              - !GetAtt StoreSecret.SsmId
              - ''
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'VaultDRInstancesProfile'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
    DependsOn:
      - VaultMachine
  PVWAMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PVWAInstanceName
      SecurityGroupIds: !Ref PVWAInstanceSecurityGroups
      SubnetId: !Ref PVWAInstanceSubnetId
      ImageId:
        Fn::If:
          - PVWACustomImageEmpty
          - !Ref PVWAAmi
          - !Ref PVWACustomAmi
      InstanceType: !Ref PVWAInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "Region"                        = "${AWS::Region}"
              "LogGroup"                      = "${LogGroup}"
              "UserDataLogStream"             = "${PVWAUserDataLogStream}"
              "PVWAConfigurationLogStream"    = "${PVWAConfigurationLogStream}"
              "PVWARegistrationLogStream"     = "${PVWARegistrationLogStream}"
              "VaultAdminUser"                = "Administrator"
              "SSMAdminPassParameterID"       = "${StoreAdminPassword.SsmId}"
              "VaultPrivateIP"                = "${VaultIpAddress}"
              "ComponentHostname"             = "${PVWAHostname}"
              "StackName"                     = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
    DependsOn:
      - VaultDRMachine
  CPMMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref CPMInstanceName
      SecurityGroupIds: !Ref CPMInstanceSecurityGroups
      SubnetId: !Ref CPMInstanceSubnetId
      ImageId:
        Fn::If:
          - CPMCustomImageEmpty
          - !Ref CPMAmi
          - !Ref CPMCustomAmi
      InstanceType: !Ref CPMInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "Region"                        = "${AWS::Region}"
              "LogGroup"                      = "${LogGroup}"
              "UserDataLogStream"             = "${CPMUserDataLogStream}"
              "CPMConfigurationLogStream"     = "${CPMConfigurationLogStream}"
              "CPMRegistrationLogStream"      = "${CPMRegistrationLogStream}"
              "CPMSetLocalServiceLogStream"   = "${CPMSetLocalServiceLogStream}"
              "VaultAdminUser"                = "Administrator"
              "SSMAdminPassParameterID"       = "${StoreAdminPassword.SsmId}"
              "VaultPrivateIP"                = "${VaultIpAddress}"
              "ComponentHostname"             = "${CPMHostname}"
              "StackName"                     = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
    DependsOn:
      - PVWAMachine
  PSMMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PSMInstanceName
      SecurityGroupIds: !Ref PSMInstanceSecurityGroups
      SubnetId: !Ref PSMInstanceSubnetId
      ImageId:
        Fn::If:
          - PSMCustomImageEmpty
          - !Ref PSMAmi
          - !Ref PSMCustomAmi
      InstanceType: !Ref PSMInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            $UserDataParams = @{
              "Region"                        = "${AWS::Region}"
              "LogGroup"                      = "${LogGroup}"
              "UserDataLogStream"             = "${PSMUserDataLogStream}"
              "PSMConfigurationLogStream"     = "${PSMConfigurationLogStream}"
              "PSMRegistrationLogStream"      = "${PSMRegistrationLogStream}"
              "VaultAdminUser"                = "Administrator"
              "SSMAdminPassParameterID"       = "${StoreAdminPassword.SsmId}"
              "VaultPrivateIP"                = "${VaultIpAddress}"
              "ComponentHostname"             = "${PSMHostname}"
              "StackName"                     = "${AWS::StackName}"
            }
            C:\CyberArk\Deployment\UserDataScript.ps1 @UserDataParams
            </powershell>
          - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
    DependsOn:
      - CPMMachine
  PSMPMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PSMPInstanceName
      SecurityGroupIds: !Ref PSMPInstanceSecurityGroups
      SubnetId: !Ref PSMPInstanceSubnetId
      ImageId:
        Fn::If:
          - PSMPCustomImageEmpty
          - !Ref PSMPAmi
          - !Ref PSMPCustomAmi
      InstanceType: !Ref PSMPInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            sudo /opt/CD-Image/register.sh \
              "aws" \
              "${VaultIpAddress}" \
              "${UniqueId}" \
              "ec2-user" \
              "Administrator" \
              "${StoreAdminPassword.SsmId}" \
              "${PSMPHostname}" \
              "${AWS::Region}" \
              "${LogGroup}" \
              ${AWS::StackName}
          - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
            UniqueId: !Select
                - 4
                - !Split
                    - '-'
                    - !Select
                        - 2
                        - !Split ["/", !Ref "AWS::StackId"]
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
    DependsOn:
      - CPMMachine
  PTAMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PTAInstanceName
      SecurityGroupIds: !Ref PTAInstanceSecurityGroups
      SubnetId: !Ref PTAInstanceSubnetId
      ImageId:
        Fn::If:
          - PTACustomImageEmpty
          - !Ref PTAAmi
          - !Ref PTACustomAmi
      InstanceType: !Ref PTAInstanceType
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            sudo /tmp/register.sh \
              "aws" \
              "${VaultIpAddress}" \
              "${PVWAMachine.PrivateDnsName}" \
              "Administrator" \
              "${StoreAdminPassword.SsmId}" \
              "${PTAHostname}" \
              "${AWS::Region}" \
              "${LogGroup}" \
              "${AWS::StackName}"
          - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
    DependsOn:
      - PVWAMachine
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  WinVersion:
    Type: String
    Description: Select a Windows Server version for all Windows-based components.
    AllowedValues:
      - Win2019
      - Win2022
    Default: Win2019
  CyberarkAccountId:
    Type: String
    Description: Enter the CyberArk Account ID (AMI Owner account ID).
    AllowedPattern: ^[\d]{12}$
    ConstraintDescription: Account ID must contain 12 digits
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  VaultFilesBucket:
    Type: String
    Description: Enter the name of the S3 bucket containing the license and recovery public key.
  LicenseFile:
    Type: String
    Description: Enter the path of the Vault license file within the bucket.
    Default: license.xml
  RecoveryPublicKey:
    Type: String
    Description: Enter the path of the recovery public key file within the bucket.
    Default: recpub.key
  VaultCustomAmi:
    Type: String
    Description: Enter the Vault Image ID, if you wish to use a custom Vault image.
    AllowedPattern: ^ami-[a-f\d]{8}(?:[a-f\d]{9})?$|.{0,0}
    ConstraintDescription: An Amazon EC2 image ID, such as ami-0ff8a91507f77f867
  VaultInstanceName:
    Type: String
    Description: Enter a name for the Vault instance.
    Default: CyberArk Vault
  VaultHostname:
    Type: String
    Description: Enter the hostname for Vault servers ("-dr" will be added as suffix for Vault DR).
    AllowedPattern: ^((?!-)(?=.*[a-zA-Z])[A-Za-z0-9-]{3,15}(?<!-))$
    ConstraintDescription: Parameter must only contain uppercase and lowercase letters (at least one letter), hyphens and numbers. Hostname can't start or end with hyphen.
    MaxLength: 15
    MinLength: 3
    Default: vault
  VaultMasterPassword:
    Type: String
    Description: Enter a password for the Primary Vault Master user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!?@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: >-
      Vault Master password must contain at least 1 lowercase letter, 1
      uppercase letter, 1 digit and 1 special character
  RetypeMasterPassword:
    Type: String
    Description: Retype the password for the Primary Vault Master user.
    NoEcho: true
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Primary Vault Administrator user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!?@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: >-
      Vault Administrator password must contain at least 1 lowercase letter, 1
      uppercase letter, 1 digit and 1 special character
  RetypeAdminPassword:
    Type: String
    Description: Retype the password for the Primary Vault Administrator user.
    NoEcho: true
    MinLength: 8
  VaultDRPassword:
    Type: String
    Description: Enter the DR User Password.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!?@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: >-
      Vault DR password must contain at least 1 lowercase letter, 1 uppercase
      letter, 1 digit and 1 special character
  RetypeDRPassword:
    Type: String
    Description: Retype the DR User Password.
    NoEcho: true
    MinLength: 8
  Secret:
    Type: String
    Description: Enter a secret string for the DR user.
    NoEcho: true
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!?@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$|.{0,0}
    ConstraintDescription: Secret must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special characters,
      Minimum 10 characters, Allowed A-Z,a-z,0-9,all special characters, Cannot except / \ - ; and controlled characters.
    MinLength: 10
  SecretRetype:
    Type: String
    Description: Retype the secret string for the DR User.
    NoEcho: true
  VaultInstanceType:
    Type: String
    Description: Select the instance type of the Vault instances.
    AllowedValues:
      - m5.2xlarge
      - c5.4xlarge
      - m5.4xlarge
      - c5.9xlarge
      - m5.8xlarge
      - c5.12xlarge
      - m5.12xlarge
      - c5.18xlarge
      - m5.16xlarge
      - c5.24xlarge
      - m5.24xlarge
    Default: m5.2xlarge
  VaultInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the Vault instances.
  VaultInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the Primary Vault instance will reside.
  DRInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the DR Vault instance will reside.
  PVWACustomAmi:
    Type: String
    Description: Enter the PVWA Image ID, if you wish to use a custom PVWA image.
    AllowedPattern: ^ami-[a-f\d]{8}(?:[a-f\d]{9})?$|.{0,0}
    ConstraintDescription: An Amazon EC2 image ID, such as ami-0ff8a91507f77f867
  PVWAInstanceName:
    Type: String
    Description: Enter a name for the PVWA instance.
    Default: CyberArk PVWA
  PVWAHostname:
    Type: String
    Description: Enter the hostname for PVWA server.
    AllowedPattern: ^((?!-)(?=.*[a-zA-Z])[A-Za-z0-9-]{3,15}(?<!-))$
    ConstraintDescription: Parameter must only contain uppercase and lowercase letters (at least one letter), hyphens and numbers. Hostname can't start or end with hyphen.
    MaxLength: 15
    MinLength: 3
    Default: pvwa
  PVWAInstanceType:
    Type: String
    Description: Select the instance type of the PVWA instance.
    AllowedValues:
      - c5.xlarge
      - m5.xlarge
      - c5.2xlarge
      - m5.2xlarge
      - c5.4xlarge
      - m5.4xlarge
      - c5.9xlarge
      - m5.8xlarge
    Default: c5.xlarge
  PVWAInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the PVWA instance.
  PVWAInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the PVWA instance will reside.
  CPMCustomAmi:
    Type: String
    Description: Enter the CPM Image ID, if you wish to use a custom CPM image.
    AllowedPattern: ^ami-[a-f\d]{8}(?:[a-f\d]{9})?$|.{0,0}
    ConstraintDescription: An Amazon EC2 image ID, such as ami-0ff8a91507f77f867
  CPMInstanceName:
    Type: String
    Description: Enter a name for the CPM instance.
    Default: CyberArk CPM
  CPMHostname:
    Type: String
    Description: Enter the hostname for CPM server.
    AllowedPattern: ^((?!-)(?=.*[a-zA-Z])[A-Za-z0-9-]{3,15}(?<!-))$
    ConstraintDescription: Parameter must only contain uppercase and lowercase letters (at least one letter), hyphens and numbers. Hostname can't start or end with hyphen.
    MaxLength: 15
    MinLength: 3
    Default: cpm
  CPMInstanceType:
    Type: String
    Description: Select the instance type of the CPM instance.
    AllowedValues:
      - c5.xlarge
      - m5.xlarge
      - c5.2xlarge
      - m5.2xlarge
      - c5.4xlarge
      - m5.4xlarge
      - c5.9xlarge
      - m5.8xlarge
    Default: c5.xlarge
  CPMInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the CPM instance.
  CPMInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the CPM instance will reside.
  PSMCustomAmi:
    Type: String
    Description: Enter the PSM Image ID, if you wish to use a custom PSM image.
    AllowedPattern: ^ami-[a-f\d]{8}(?:[a-f\d]{9})?$|.{0,0}
    ConstraintDescription: An Amazon EC2 image ID, such as ami-0ff8a91507f77f867
  PSMInstanceName:
    Type: String
    Description: Enter a name for the PSM instance.
    Default: CyberArk PSM
  PSMHostname:
    Type: String
    Description: Enter the hostname for PSM server.
    AllowedPattern: ^((?!-)(?=.*[a-zA-Z])[A-Za-z0-9-]{3,15}(?<!-))$
    ConstraintDescription: Parameter must only contain uppercase and lowercase letters (at least one letter), hyphens and numbers. Hostname can't start or end with hyphen.
    MaxLength: 15
    MinLength: 3
    Default: psm
  PSMInstanceType:
    Type: String
    Description: Select the instance type of the PSM instance.
    AllowedValues:
      - c5.2xlarge
      - m5.2xlarge
      - c5.4xlarge
      - m5.4xlarge
      - c5.9xlarge
      - m5.8xlarge
    Default: c5.2xlarge
  PSMInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the PSM instance.
  PSMInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the PSM instance will reside.
  PSMPCustomAmi:
    Type: String
    Description: Enter the PSMP Image ID, if you wish to use a custom PSMP image.
    AllowedPattern: ^ami-[a-f\d]{8}(?:[a-f\d]{9})?$|.{0,0}
    ConstraintDescription: An Amazon EC2 image ID, such as ami-0ff8a91507f77f867
  PSMPInstanceName:
    Type: String
    Description: Enter a name for the PSMP instance.
    Default: CyberArk PSMP
  PSMPHostname:
    Type: String
    Description: Enter the hostname for PSMP server.
    AllowedPattern: ^((?!-)(?=.*[a-zA-Z])[A-Za-z0-9-]{3,15}(?<!-))$
    ConstraintDescription: Parameter must only contain uppercase and lowercase letters (at least one letter), hyphens and numbers. Hostname can't start or end with hyphen.
    MaxLength: 15
    MinLength: 3
    Default: psmp
  PSMPInstanceType:
    Type: String
    Description: Select the instance type of the PSMP instance.
    AllowedValues:
      - c5.xlarge
      - m5.xlarge
      - c5.2xlarge
      - m5.2xlarge
      - c5.4xlarge
      - m5.4xlarge
    Default: c5.xlarge
  PSMPInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the PSMP instance.
  PSMPInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the PSMP instance will reside.
  PTACustomAmi:
    Type: String
    Description: Enter the PTA Image ID, if you wish to use a custom PTA image.
    AllowedPattern: ^ami-[a-f\d]{8}(?:[a-f\d]{9})?$|.{0,0}
    ConstraintDescription: An Amazon EC2 image ID, such as ami-0ff8a91507f77f867
  PTAInstanceName:
    Type: String
    Description: Enter a name for the PTA instance.
    Default: CyberArk PTA
  PTAHostname:
    Type: String
    Description: Enter the hostname for PTA server.
    AllowedPattern: ^((?!-)(?=.*[a-zA-Z])[A-Za-z0-9-]{3,15}(?<!-))$
    ConstraintDescription: Parameter must only contain uppercase and lowercase letters (at least one letter), hyphens and numbers. Hostname can't start or end with hyphen.
    MaxLength: 15
    MinLength: 3
    Default: ptaserver
  PTAInstanceType:
    Type: String
    Description: Select the instance type of the PTA instance.
    AllowedValues:
      - m5.xlarge
      - c5.2xlarge
      - m5.2xlarge
      - c5.4xlarge
    Default: m5.xlarge
  PTAInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the PTA instance.
  PTAInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the PTA instance will reside.
Rules:
  PasswordConfirmation:
    Assertions:
      - Assert: !Equals
          - !Ref VaultMasterPassword
          - !Ref RetypeMasterPassword
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref VaultAdminPassword
          - !Ref RetypeAdminPassword
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref VaultDRPassword
          - !Ref RetypeDRPassword
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref 'Secret'
          - !Ref 'SecretRetype'
        AssertDescription: The secret confirmation does not match.
  EULAAcception:
    Assertions:
      - Assert: !Equals
          - !Ref EULA
          - Accept
        AssertDescription: You must accept EULA to continue.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: General parameters
        Parameters:
          - EULA
          - WinVersion
          - CyberarkAccountId
          - KeyName
          - VaultFilesBucket
          - LicenseFile
          - RecoveryPublicKey
      - Label:
          default: Primary Vault and DR Vault configuration
        Parameters:
          - VaultCustomAmi
          - VaultInstanceName
          - VaultHostname
          - VaultAdminPassword
          - RetypeAdminPassword
          - VaultMasterPassword
          - RetypeMasterPassword
          - VaultDRPassword
          - RetypeDRPassword
          - Secret
          - SecretRetype
          - VaultInstanceType
          - VaultInstanceSecurityGroups
          - VaultInstanceSubnetId
          - DRInstanceSubnetId
      - Label:
          default: PVWA configuration
        Parameters:
          - PVWACustomAmi
          - PVWAInstanceName
          - PVWAHostname
          - PVWAInstanceType
          - PVWAInstanceSecurityGroups
          - PVWAInstanceSubnetId
      - Label:
          default: CPM configuration
        Parameters:
          - CPMCustomAmi
          - CPMInstanceName
          - CPMHostname
          - CPMInstanceType
          - CPMInstanceSecurityGroups
          - CPMInstanceSubnetId
      - Label:
          default: PSM configuration
        Parameters:
          - PSMCustomAmi
          - PSMInstanceName
          - PSMHostname
          - PSMInstanceType
          - PSMInstanceSecurityGroups
          - PSMInstanceSubnetId
      - Label:
          default: PSMP configuration
        Parameters:
          - PSMPCustomAmi
          - PSMPInstanceName
          - PSMPHostname
          - PSMPInstanceType
          - PSMPInstanceSecurityGroups
          - PSMPInstanceSubnetId
      - Label:
          default: PTA configuration
        Parameters:
          - PTACustomAmi
          - PTAInstanceName
          - PTAHostname
          - PTAInstanceType
          - PTAInstanceSecurityGroups
          - PTAInstanceSubnetId
    ParameterLabels:
      EULA:
        default: License Agreement
      WinVersion:
        default: Windows Server Version
      CyberarkAccountId:
        default: CyberArk Account ID
      KeyName:
        default: Key Pair
      VaultFilesBucket:
        default: S3 Bucket
      LicenseFile:
        default: Vault License File
      RecoveryPublicKey:
        default: Recovery Public Key
      VaultCustomAmi:
        default: Custom Vault Image ID (Optional)
      VaultInstanceName:
        default: Vault Instance Name
      VaultHostname:
        default: Vault Hostname
      VaultAdminPassword:
        default: Primary Vault Admin Password
      RetypeAdminPassword:
        default: Retype Primary Vault Admin Password
      VaultMasterPassword:
        default: Primary Vault Master Password
      RetypeMasterPassword:
        default: Retype Primary Vault Master Password
      VaultDRPassword:
        default: DR User Password
      RetypeDRPassword:
        default: Retype DR User Password
      Secret:
        default: DR User Secret
      SecretRetype:
        default: Retype DR User Secret
      VaultInstanceType:
        default: Primary Vault and Vault DR Instance Type
      VaultInstanceSecurityGroups:
        default: Vault Instance Security Groups
      VaultInstanceSubnetId:
        default: Primary Vault Instance Subnet Id
      DRInstanceSubnetId:
        default: Vault DR Instance Subnet Id
      PVWACustomAmi:
        default: Custom PVWA Image ID (Optional)
      PVWAInstanceName:
        default: PVWA Instance Name
      PVWAHostname:
        default: PVWA Hostname
      PVWAInstanceType:
        default: PVWA Instance Type
      PVWAInstanceSecurityGroups:
        default: PVWA Instance Security Groups
      PVWAInstanceSubnetId:
        default: PVWA Instance Subnet Id
      CPMCustomAmi:
        default: Custom CPM Image ID (Optional)
      CPMInstanceName:
        default: CPM Instance Name
      CPMHostname:
        default: CPM Hostname
      CPMInstanceType:
        default: CPM Instance Type
      CPMInstanceSecurityGroups:
        default: CPM Instance Security Groups
      CPMInstanceSubnetId:
        default: CPM Instance Subnet Id
      PSMCustomAmi:
        default: Custom PSM Image ID (Optional)
      PSMInstanceName:
        default: PSM Instance Name
      PSMHostname:
        default: PSM Hostname
      PSMInstanceType:
        default: PSM Instance Type
      PSMInstanceSecurityGroups:
        default: PSM Instance Security Groups
      PSMInstanceSubnetId:
        default: PSM Instance Subnet Id
      PSMPCustomAmi:
        default: Custom PSMP Image ID (Optional)
      PSMPInstanceName:
        default: PSMP Instance Name
      PSMPHostname:
        default: PSMP Hostname
      PSMPInstanceType:
        default: PSMP Instance Type
      PSMPInstanceSecurityGroups:
        default: PSMP Instance Security Groups
      PSMPInstanceSubnetId:
        default: PSMP Instance Subnet Id
      PTACustomAmi:
        default: Custom PTA Image ID (Optional)
      PTAInstanceName:
        default: PTA Instance Name
      PTAHostname:
        default: PTA Hostname
      PTAInstanceType:
        default: PTA Instance Type
      PTAInstanceSecurityGroups:
        default: PTA Instance Security Groups
      PTAInstanceSubnetId:
        default: PTA Instance Subnet Id
Conditions:
  SecretProvided: !Not
    - !Equals
      - ''
      - !Ref Secret
  VaultCustomImageEmpty: !Equals
    - ''
    - !Ref VaultCustomAmi
  PVWACustomImageEmpty: !Equals
    - ''
    - !Ref PVWACustomAmi
  CPMCustomImageEmpty: !Equals
    - ''
    - !Ref CPMCustomAmi
  PSMCustomImageEmpty: !Equals
    - ''
    - !Ref PSMCustomAmi
  PSMPCustomImageEmpty: !Equals
    - ''
    - !Ref PSMPCustomAmi
  PTACustomImageEmpty: !Equals
    - ''
    - !Ref PTACustomAmi
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref LogGroup
