Resources:
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 30
    DeletionPolicy: Retain
  CPMCfnInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMCfnInitLogStream
    DeletionPolicy: Retain
  CPMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMConfigurationsLog
    DeletionPolicy: Retain
  CPMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMRegistrationLog
    DeletionPolicy: Retain
  CPMSetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: CPMMachine/CPMSetLocalServiceLog
    DeletionPolicy: Retain
  PSMCfnInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMCfnInitLogStream
    DeletionPolicy: Retain
  PSMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMConfigurationsLog
    DeletionPolicy: Retain
  PSMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PSMMachine/PSMRegistrationLog
    DeletionPolicy: Retain
  PVWACfnInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWACfnInitLogStream
    DeletionPolicy: Retain
  PVWAConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWAConfigurationsLog
    DeletionPolicy: Retain
  PVWARegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWARegistrationLog
    DeletionPolicy: Retain
  PVWASetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: PVWAMachine/PVWASetLocalServiceLog
    DeletionPolicy: Retain
  VaultCfnInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/CfnInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/VaultInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultPostInstallLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/VaultPostInstallLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRCfnInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/CfnInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRInitLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/VaultInitLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  VaultDRPostInstallLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultDRMachine/VaultPostInstallLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  StoreMasterPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt StorePasswordLambda.Arn
      Password: !Ref VaultMasterPassword
    DependsOn:
      - LambdaDeployRole
  StoreAdminPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt StorePasswordLambda.Arn
      Password: !Ref VaultAdminPassword
    DependsOn:
      - LambdaDeployRole
  StoreDRPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt StorePasswordLambda.Arn
      Password: !Ref VaultDRPassword
    DependsOn:
      - LambdaDeployRole
  StoreSecret:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'StorePasswordLambda.Arn'
      Password: !Ref 'Secret'
    DependsOn:
      - LambdaDeployRole
  CleanMasterPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt DeletePasswordLambda.Arn
      key: !GetAtt StoreMasterPassword.SsmId
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  CleanAdminPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt DeletePasswordLambda.Arn
      key: !GetAtt StoreAdminPassword.SsmId
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - PSMPMachine
  CleanDRPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt DeletePasswordLambda.Arn
      key: !GetAtt StoreDRPassword.SsmId
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  CleanSecret:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeletePasswordLambda.Arn'
      key: !GetAtt 'StoreSecret.SsmId'
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultDRMachine
  RemovePermissionVault:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'RemovePermissionLambda.Arn'
      vault_role_name: !Ref 'VaultInstancesRole'
      lambda_role_name: !Ref 'LambdaRemovePermissionsRole'
      instance: !Ref 'VaultMachine'
      region: !Ref 'AWS::Region'
  RemovePermissionVaultDR:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'RemovePermissionLambda.Arn'
      vault_role_name: !Ref 'VaultDRInstancesRole'
      lambda_role_name: !Ref 'LambdaRemovePermissionsRole'
      instance: !Ref 'VaultDRMachine'
      region: !Ref 'AWS::Region'
  RemovePermissionsKMSPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: KMSPolicy
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action:
              - '*'
            Resource:
              - '*'
      Roles:
        - !Ref LambdaRemovePermissionsRole
    DependsOn:
      - RemovePermissionVaultDR
  RemovePermissionsVaultBootstrapIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: VaultBootstrapIAMPolicy
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action:
              - '*'
            Resource:
              - '*'
      Roles:
        - !Ref LambdaRemovePermissionsRole
    DependsOn:
      - RemovePermissionVaultDR
  LambdaDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
        - PolicyName: SSM
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:DeleteParameter'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
  StorePasswordLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Saves given password to parameter store as SecureString
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse
          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:
                  print ('The property Password must not be empty')
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
              try:
                  if event['RequestType'] == 'Delete':
                      ssmClient.delete_parameter(Name=physicalResourceId)
                      print ('Password successfully deleted. Id='+physicalResourceId)
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Create':
                      ssmClient.put_parameter(Name=physicalResourceId, Value=event['ResourceProperties']['Password'], Type='SecureString')
                      print ('The store parameter has been created. Id='+physicalResourceId)
                      response = {'SsmId': physicalResourceId}
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  DeletePasswordLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Delete password from parameter store
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse
          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      ssmClient.delete_parameter(Name=event['ResourceProperties']['key'])
                      print ('Password succesfully deleted. Id='+event['ResourceProperties']['key'])
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  LambdaLogDenyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: denyLambdaLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Deny
                Action:
                  - 'logs:*'
                Resource: '*'
  LambdaRemovePermissionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - '*'
        - PolicyName: KMSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                Resource:
                  - '*'
  VaultBootstrapIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VaultBootstrapIAMPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - iam:GetRole
              - iam:DeleteRolePolicy
              - iam:PutRolePolicy
            Resource:
              - !GetAtt VaultInstancesRole.Arn
              - !GetAtt VaultDRInstancesRole.Arn
              - !GetAtt LambdaRemovePermissionsRole.Arn
      Roles:
        - !Ref 'LambdaRemovePermissionsRole'
  RemovePermissionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Change Policies of VaultInstancesRole IAM Role
      Code:
        ZipFile: |-
          import json
          import boto3
          import uuid
          import cfnresponse
          
          def lambda_handler(event, context):
            physicalResourceId = str(uuid.uuid4())
            if 'PhysicalResourceId' in event:
              physicalResourceId = event['PhysicalResourceId']
            if event['RequestType'] == 'Create':
              try:
                print("Creating AWS CloudFormation")
                print("Start RemovePermissionLambda execution")
                client = boto3.client('iam')
                
                # Get vault role info
                vault_role = client.get_role(RoleName=event['ResourceProperties']['vault_role_name'])['Role']
                print("Retrieve IAM Role ID: {0}".format(vault_role["RoleId"]))
                
                # Delete old Policies
                list = [event['ResourceProperties']['vault_role_name']]
                inline_policies = ["VaultInstancesKMSPolicy","VaultBootstrapIAMPolicy","VaultSSMPolicy","VaultFilesBucketAccess"]
                print("Trying to delete inline policies from {0} IAM Role".format(vault_role["RoleId"]))
                for role in list:
                  print("Delete policies in {0} IAM Role".format(role))
                  for inline_policy in inline_policies:
                    try:
                      delete = client.delete_role_policy(RoleName=role, PolicyName=inline_policy)
                      print("Delete policy: {0}".format(inline_policy))
                    except:
                      print("Didn\'t find policy: {0}".format(inline_policy))
                print("Finish to delete inline policies from {0} IAM Role".format(vault_role["RoleId"]))
  
                # Get KMS ID
                kms = boto3.client('kms', region_name=event['ResourceProperties']['region'])
                kms_arn = kms.describe_key(KeyId="alias/vault/{0}".format(event['ResourceProperties']['instance']))['KeyMetadata']['Arn']
                print("Retrieve KMS ARN: {0}".format(kms_arn))
                
                # Create inline policy
                kms_policy =  {
                  "Statement": [
                    {
                      "Action": [
                        "kms:Encrypt",
                        "kms:Decrypt"
                        ],
                        "Resource": kms_arn,
                        "Effect": "Allow"
                    }
                  ]
                }
                
                response = client.put_role_policy(RoleName=vault_role['RoleName'], PolicyName="VaultInstancesKMSPolicy", PolicyDocument=json.dumps(kms_policy))
                print("Add inline policy VaultInstancesKMSRestrictedPolicy to {0} IAM Role".format(vault_role["RoleId"]))
                
                return cfnresponse.send(event, context, cfnresponse.SUCCESS, None, {}, physicalResourceId)
              except Exception as E:
                print("Error in Lambda execution: {0}".format(E))
                return cfnresponse.send(event, context, cfnresponse.FAILED,E,{}, physicalResourceId)
            elif event['RequestType'] == 'Delete':
              print("Deleting AWS CloudFormation")
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaRemovePermissionsRole.Arn'
  VaultMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'VaultInstanceName'
      SecurityGroupIds: !Ref 'VaultInstanceSecurityGroups'
      SubnetId: !Ref 'VaultInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Vault
      InstanceType: !Ref 'VaultInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r VaultMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'VaultInstancesProfile'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - configSSMAndServerAndTagKMS
            - configServices
            - configSignal
        configSSMAndServerAndTagKMS:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-configcw:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -LogGroup ${LogGroup} -CfnInitLogStream ${VaultCfnInitLogStream} -VaultInitLogStream ${VaultInitLogStream} -VaultPostInstallLogStream ${VaultPostInstallLogStream} -Region ${AWS::Region}
              waitAfterCompletion: 10
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 60
        configServices:
          commands:
            1-download:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultInit.ps1 -VaultFilesBucket ${VaultFilesBucket} -LicenseFileKey ${LicenseFile} -RecoveryPublicKey ${RecoveryPublicKey} -Region ${AWS::Region}
              waitAfterCompletion: 0
            2-postInstallWithDR:
              command: !Sub
              - >-
                powershell.exe -File C:\CyberArk\Deployment\VaultPostInstall.ps1 -IsPrimaryOrDR "Primary" -SSMMasterPassParameterID 
                ${StoreMasterPassword.SsmId} -SSMAdminPassParameterID ${StoreAdminPassword.SsmId} -SSMDRPassParameterID ${StoreDRPassword.SsmId} 
                -LicensePath "C:\CyberArk\Deployment\vaultLicense.xml" -RecoveryPublicKeyPath "C:\CyberArk\Deployment\recoveryPublic.key" 
                -Region ${AWS::Region} ${Secret}
              - Secret: !If 
                  - SecretEmpty
                  - ''
                  - !Sub '-SSMSecretParameterID ${StoreSecret.SsmId}'
              waitAfterCompletion: 0
            3-changeKMSTag:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultTagKMS.ps1 -Role ${VaultInstancesRole} -Region ${AWS::Region}
              waitAfterCompletion: 0
            4-restart:
              command: powershell.exe -Command Restart-Computer
              waitAfterCompletion: forever
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource VaultMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
  VaultDRMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VaultInstanceName} DR'
      SecurityGroupIds: !Ref 'VaultInstanceSecurityGroups'
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 30
            Encrypted: true
      SubnetId: !Ref 'DRInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Vault
      InstanceType: !Ref 'VaultInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r VaultDRMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'VaultDRInstancesProfile'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - configSSMAndHostnameAndTagKMS
            - configServices
            - configSignal
        configSSMAndHostnameAndTagKMS:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-configCloudWatch:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -LogGroup ${LogGroup} -CfnInitLogStream ${VaultDRCfnInitLogStream} -VaultInitLogStream ${VaultDRInitLogStream} -VaultPostInstallLogStream ${VaultDRPostInstallLogStream} -Region ${AWS::Region}
              waitAfterCompletion: 10
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 0
        configServices:
          commands:
            1-postInstall:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultPostInstall.ps1 -SSMDRPassParameterID ${StoreDRPassword.SsmId} -IsPrimaryOrDR "DR" -PrimaryVaultIP ${VaultMachine.PrivateIp} -LicensePath "C:\CyberArk\Deployment\vaultLicense.xml" -Region ${AWS::Region} -SSMSecretParameterID ${StoreSecret.SsmId}
              waitAfterCompletion: 0
            2-changeKMSTag:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultTagKMS.ps1 -Role ${VaultDRInstancesRole} -Region ${AWS::Region}
              waitAfterCompletion: 0
            3-restart:
              command: powershell.exe -Command Restart-Computer
              waitAfterCompletion: forever
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource VaultDRMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DeletionPolicy: Retain
  VaultInstancesProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref VaultInstancesRole
    DeletionPolicy: Retain
  VaultDRInstancesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'VaultDRInstancesRole'
    DeletionPolicy: Retain
  VaultInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VaultLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultCfnInitLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultPostInstallLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultInitLogStream}'
        - PolicyName: VaultSSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreMasterPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreAdminPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreDRPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreSecret.SsmId}'
        - PolicyName: VaultFilesBucketAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${LicenseFile}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${RecoveryPublicKey}'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}'
        - PolicyName: VaultInstancesKMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateKey
                  - kms:GenerateRandom
                  - kms:TagResource
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:EnableKeyRotation
                  - kms:UpdateKeyDescription
                  - kms:CreateAlias
                Resource: '*'
        - PolicyName: VaultBootstrapIAMPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                Resource: '*'
    DeletionPolicy: Retain
  VaultDRInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VaultLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultDRInitLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultDRCfnInitLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultDRPostInstallLogStream}'
        - PolicyName: VaultSSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreDRPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreSecret.SsmId}'
        - PolicyName: VaultInstancesKMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateKey
                  - kms:GenerateRandom
                  - kms:TagResource
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:EnableKeyRotation
                  - kms:UpdateKeyDescription
                  - kms:CreateAlias
                Resource: '*'
        - PolicyName: VaultBootstrapIAMPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                Resource: '*'
    DeletionPolicy: Retain
  ComponentInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ComponentInstanceRole
    DeletionPolicy: Retain
  ComponentInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:*:*:*'
    DeletionPolicy: Retain
  PVWAMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PVWAInstanceName
      SecurityGroupIds: !Ref PVWAInstanceSecurityGroups
      SubnetId: !Ref PVWAInstanceSubnetId
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - PVWA
      InstanceType: !Ref PVWAInstanceType
      UserData: !Base64
        'Fn::Sub': >-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r PVWAMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ascending:
            - configSSMAndHostname
            - configServices
            - configSignal
        configSSMAndHostname:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-cloudwatch:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1
                -LogGroup ${LogGroup} -PVWACfnInitLogStream
                ${PVWACfnInitLogStream} -PVWAConfiguration
                ${PVWAConfigurationsLog} -PVWARegistration
                ${PVWARegistrationLog} -PVWASetLocalService
                ${PVWASetLocalServiceLog} -Region ${AWS::Region}
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 60
              ignoreErrors: true
        configServices:
          commands:
            1-configurePVWAService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Username "PVWAReportsUser" -Services "CyberArk Scheduled Tasks"
              waitAfterCompletion: 0
            2-configuration:
              command: !Sub
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\PVWAConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser Administrator -VaultPort 1858 -HostName ${InputHostname}
                - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
                  InputHostname: !If
                    - PVWAHostNameEmpty
                    - empty
                    - !Sub '${PVWAHostName}'
              waitAfterCompletion: 0
            3-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\PVWARegistration.ps1
                -VaultAdminUser Administrator -SSMAdminPassParameterID ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            4-startAppPool:
              command: >-
                powershell -Command "& {&'Import-Module' WebAdministration}"; "&
                {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}"; "&
                {&'Set-ItemProperty' -Path
                IIS:\AppPools\PasswordVaultWebAccessPool -Name autoStart -Value
                'true'}"
              waitAfterCompletion: 0
            5-CSTserviceConfig:
              command: sc config "CyberArk Scheduled Tasks" start=auto
              waitAfterCompletion: 0
            6-restart:
              command: powershell.exe -Command "Restart-Computer -Force"
              waitAfterCompletion: forever
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource PVWAMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
  CPMMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref CPMInstanceName
      SecurityGroupIds: !Ref CPMInstanceSecurityGroups
      SubnetId: !Ref CPMInstanceSubnetId
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - CPM
      InstanceType: !Ref CPMInstanceType
      UserData: !Base64
        'Fn::Sub': >-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r CPMMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ascending:
            - configSSMAndHostname
            - configServices
            - configSignal
        configSSMAndHostname:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-cloudwatch:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1
                -LogGroup ${LogGroup} -CPMCfnInitLogStream
                ${CPMCfnInitLogStream} -CPMConfiguration ${CPMConfigurationsLog}
                -CPMRegistration ${CPMRegistrationLog} -CPMSetLocalService
                ${CPMSetLocalServiceLog} -Region ${AWS::Region}
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 60
              ignoreErrors: true
        configServices:
          commands:
            1-configuration:
              command: !Sub
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\CPMConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser Administrator -VaultPort 1858
                - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
              waitAfterCompletion: 0
            2-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CPMRegistration.ps1
                -VaultAdminUser Administrator -SSMAdminPassParameterID ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            3-configureCPMService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Username "PasswordManagerUser" -Services "CyberArk Central Policy Manager Scanner"
              waitAfterCompletion: 0
            4-configureCPMService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Username "PasswordManagerUser" -Services "CyberArk Password Manager"
              waitAfterCompletion: 0
            5-CPMserviceConfig:
              command: sc config "CyberArk Password Manager" start=auto
              waitAfterCompletion: 0
            6-CPMSserviceConfig:
              command: sc config "CyberArk Central Policy Manager Scanner" start=auto
              waitAfterCompletion: 0
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource CPMMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
    DependsOn:
      - PVWAMachine
  PSMMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PSMInstanceName
      SecurityGroupIds: !Ref PSMInstanceSecurityGroups
      SubnetId: !Ref PSMInstanceSubnetId
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - PSM
      InstanceType: !Ref PSMInstanceType
      UserData: !Base64
        'Fn::Sub': >-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r PSMMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ascending:
            - configSSMAndHostname
            - configServices
            - configSignal
        configSSMAndHostname:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-cloudwatch:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1
                -LogGroup ${LogGroup} -PSMCfnInitLogStream
                ${PSMCfnInitLogStream} -PSMConfiguration ${PSMConfigurationsLog}
                -PSMRegistration ${PSMRegistrationLog} -Region ${AWS::Region}
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 60
              ignoreErrors: true
        configServices:
          commands:
            1-configuration:
              command: !Sub
                - >-
                  powershell.exe -File
                  C:\CyberArk\Deployment\PSMConfiguration.ps1 -VaultIpAddress
                  ${VaultIpAddress} -VaultAdminUser Administrator -VaultPort 1858
                - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
              waitAfterCompletion: 0
            2-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\PSMRegistration.ps1
                -VaultAdminUser Administrator -SSMAdminPassParameterID ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            3-PSMserviceConfig:
              command: sc config "Cyber-Ark Privileged Session Manager" start=auto
              waitAfterCompletion: 0
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource PSMMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DeletionPolicy: Retain
    DependsOn:
      - CPMMachine
  PSMPMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PSMPInstanceName
      SecurityGroupIds: !Ref PSMPInstanceSecurityGroups
      SubnetId: !Ref PSMPInstanceSubnetId
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - PSMP
      InstanceType: !Ref PSMPInstanceType
      UserData: !Base64
        'Fn::Sub': >
          #!/bin/bash -e

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource
          PSMPMachine --configsets install_all --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource
          PSMPMachine --region ${AWS::Region}
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          install_all:
            - install_logs
            - install_psmp
        install_logs:
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state
                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${LogGroup}
                log_stream_name = PSMSSHMachine/cloud-init.log
                datetime_format =
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${LogGroup}
                log_stream_name = PSMSSHMachine/cloud-init-output.log
                datetime_format =
                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${LogGroup}
                log_stream_name = PSMSSHMachine/cfn-init.log
                datetime_format =
                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${LogGroup}
                log_stream_name = PSMSSHMachine/cfn-wire.log
                datetime_format =
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/awslogs/awslogs.conf
        install_psmp:
          commands:
            01-CreateCredFile:
              command: !Sub >-
                sudo /opt/CARKpsmp/bin/createcredfile /root/CD-Image/user.cred
                Password -Username Administrator -Password ${VaultAdminPassword} -Hostname
            02-PSMPdeploy:
              command:
                'Fn::Sub':
                  - >-
                    /root/CD-Image/register_and_activation.sh
                    /root/CD-Image/user.cred ${VaultIpAddress} $(curl
                    http://169.254.169.254/latest/meta-data/instance-id) y
                  - VaultIpAddress: !Sub '${VaultMachine.PrivateIp},${VaultDRMachine.PrivateIp}'
            03-PostInstall:
              command: sudo rm -rf /root/CD-Image/
            99-SignalCompletion:
              command: !Sub >-
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource PSMPMachine --region ${AWS::Region}
    DependsOn:
      - PSMMachine
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    DeletionPolicy: Retain
  InstancesSSMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: InstancesSsmAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:GetParameters'
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
      Roles:
        - !Ref ComponentInstanceRole
    DeletionPolicy: Retain
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  VaultFilesBucket:
    Type: String
    Description: Enter the name of the S3 bucket containing the license and recovery public key.
  LicenseFile:
    Type: String
    Description: Enter the path of the Vault license file within the bucket.
    Default: license.xml
  RecoveryPublicKey:
    Type: String
    Description: Enter the path of the recovery public key file within the bucket.
    Default: recpub.key
  VaultInstanceName:
    Type: String
    Description: Enter a name for the Vault instance.
    Default: CyberArk Vault
  VaultMasterPassword:
    Type: String
    Description: Enter a password for the Primary Vault Master user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: >-
      Vault Master password must contain at least 1 lowercase letter, 1
      uppercase letter, 1 digit and 1 special character
  RetypeMasterPassword:
    Type: String
    Description: Retype the password for the Primary Vault Master user.
    NoEcho: true
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Primary Vault Administrator user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: >-
      Vault Administrator password must contain at least 1 lowercase letter, 1
      uppercase letter, 1 digit and 1 special character
  RetypeAdminPassword:
    Type: String
    Description: Retype the password for the Primary Vault Administrator user.
    NoEcho: true
    MinLength: 8
  VaultDRPassword:
    Type: String
    Description: Enter the DR User Password.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: >-
      Vault DR password must contain at least 1 lowercase letter, 1 uppercase
      letter, 1 digit and 1 special character
  RetypeDRPassword:
    Type: String
    Description: Retype the DR User Password.
    NoEcho: true
    MinLength: 8
  Secret:
    Type: String
    Description: Enter a secret string for the DR user.
    NoEcho: true
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$|.{0,0}
    ConstraintDescription: Secret must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special characters,
      Minimum 10 characters, Allowed A-Z,a-z,0-9,all special characters, Cannot except / \ - ; and controlled characters.
    MinLength: 10
  SecretRetype:
    Type: String
    Description: Retype the secret string for the DR User.
    NoEcho: true
  VaultInstanceType:
    Type: String
    Description: Select the instance type of the Vault instances.
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    Default: m5.large
  VaultInstanceSecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: Assign Security Groups to the Vault instances.
  VaultInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet Id where the Primary Vault instance will reside.
  DRInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet Id where the DR Vault instance will reside.
  CPMInstanceName:
    Type: String
    Description: Enter a name for the CPM instance.
    Default: CyberArk CPM
  CPMInstanceType:
    Type: String
    Description: Select the instance type of the CPM instance.
    AllowedValues:
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
    Default: c5.large
  CPMInstanceSecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: Assign Security Groups to the CPM instance.
  CPMInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet Id where the CPM instance will reside.
  PVWAInstanceName:
    Type: String
    Description: Enter a name for the PVWA instance.
    Default: CyberArk PVWA
  PVWAInstanceType:
    Type: String
    Description: Select the instance type of the PVWA instance.
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    Default: t3.medium
  PVWAInstanceSecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: Assign Security Groups to the PVWA instance.
  PVWAInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet Id where the PVWA instance will reside.
  PVWAHostName:
    Type: String
    Description: IP or FQDN of PVWA server
  PSMInstanceName:
    Type: String
    Description: Enter a name for the PSM instance.
    Default: CyberArk PSM
  PSMInstanceType:
    Type: String
    Description: Select the instance type of the PSM instance.
    AllowedValues:
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
    Default: m5.2xlarge
  PSMInstanceSecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: Assign Security Groups to the PSM instance.
  PSMInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet Id where the PSM instance will reside.
  PSMPInstanceName:
    Type: String
    Description: Enter a name for the PSM SSH Proxy instance.
    Default: CyberArk PSM SSH Proxy
  PSMPInstanceType:
    Type: String
    Description: Select the instance type of the PSM SSH Proxy instance.
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    Default: m5.large
  PSMPInstanceSecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: Assign Security Groups to the PSM SSH Proxy instance.
  PSMPInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet Id where the PSM SSH Proxy instance will reside.
Rules:
  PasswordConfirmation:
    Assertions:
      - Assert: !Equals
          - !Ref VaultMasterPassword
          - !Ref RetypeMasterPassword
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref VaultAdminPassword
          - !Ref RetypeAdminPassword
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref VaultDRPassword
          - !Ref RetypeDRPassword
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref 'Secret'
          - !Ref 'SecretRetype'
        AssertDescription: The secret confirmation does not match.
  EULAAcception:
    Assertions:
      - Assert: !Equals
          - !Ref EULA
          - Accept
        AssertDescription: You must accept EULA to continue.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: General parameters
        Parameters:
          - EULA
          - KeyName
          - VaultFilesBucket
          - LicenseFile
          - RecoveryPublicKey
      - Label:
          default: Primary Vault and DR Vault configuration
        Parameters:
          - VaultInstanceName
          - VaultAdminPassword
          - RetypeAdminPassword
          - VaultMasterPassword
          - RetypeMasterPassword
          - VaultDRPassword
          - RetypeDRPassword
          - Secret
          - SecretRetype
          - VaultInstanceType
          - VaultInstanceSecurityGroups
          - VaultInstanceSubnetId
          - DRInstanceSubnetId
      - Label:
          default: CPM configuration
        Parameters:
          - CPMInstanceName
          - CPMInstanceType
          - CPMInstanceSecurityGroups
          - CPMInstanceSubnetId
      - Label:
          default: PVWA configuration
        Parameters:
          - PVWAInstanceName
          - PVWAInstanceType
          - PVWAInstanceSecurityGroups
          - PVWAInstanceSubnetId
          - PVWAHostName
      - Label:
          default: PSM configuration
        Parameters:
          - PSMInstanceName
          - PSMInstanceType
          - PSMInstanceSecurityGroups
          - PSMInstanceSubnetId
      - Label:
          default: PSM SSH Proxy configuration
        Parameters:
          - PSMPInstanceName
          - PSMPInstanceType
          - PSMPInstanceSecurityGroups
          - PSMPInstanceSubnetId
    ParameterLabels:
      EULA:
        default: License Agreement
      KeyName:
        default: Key Pair
      VaultFilesBucket:
        default: S3 Bucket
      LicenseFile:
        default: Vault License File
      RecoveryPublicKey:
        default: Recovery Public Key
      VaultInstanceName:
        default: Vault Instance Name
      VaultAdminPassword:
        default: Primary Vault Admin Password
      RetypeAdminPassword:
        default: Retype Primary Vault Admin Password
      VaultMasterPassword:
        default: Primary Vault Master Password
      RetypeMasterPassword:
        default: Retype Primary Vault Master Password
      VaultDRPassword:
        default: DR User Password
      RetypeDRPassword:
        default: Retype DR User Password
      Secret:
        default: DR User Secret
      SecretRetype:
        default: Retype DR User Secret
      VaultInstanceType:
        default: Primary Vault and Vault DR Instance Type
      VaultInstanceSecurityGroups:
        default: Vault Instance Security Groups
      VaultInstanceSubnetId:
        default: Primary Vault Instance Subnet Id
      DRInstanceSubnetId:
        default: Vault DR Instance Subnet Id
      CPMInstanceName:
        default: CPM Instance Name
      CPMInstanceType:
        default: CPM Instance Type
      CPMInstanceSecurityGroups:
        default: CPM Instance Security Groups
      CPMInstanceSubnetId:
        default: CPM Instance Subnet Id
      PVWAInstanceName:
        default: PVWA Instance Name
      PVWAInstanceType:
        default: PVWA Instance Type
      PVWAInstanceSecurityGroups:
        default: PVWA Instance Security Groups
      PVWAInstanceSubnetId:
        default: PVWA Instance Subnet Id
      PVWAHostName:
        default: PVWA FQDN (Optional)
      PSMInstanceName:
        default: PSM Instance Name
      PSMInstanceType:
        default: PSM Instance Type
      PSMInstanceSecurityGroups:
        default: PSM Instance Security Groups
      PSMInstanceSubnetId:
        default: PSM Instance Subnet Id
      PSMPInstanceName:
        default: PSM SSH Proxy Instance Name
      PSMPInstanceType:
        default: PSM SSH Proxy Instance Type
      PSMPInstanceSecurityGroups:
        default: PSM SSH Proxy Instance Security Groups
      PSMPInstanceSubnetId:
        default: PSM SSH Proxy Instance Subnet Id
Conditions:
  SecretEmpty: !Equals 
    - ''
    - !Ref Secret
  PVWAHostNameEmpty: !Equals
    - ''
    - !Ref PVWAHostName
Mappings:
  RegionMap:
    us-east-1:
      Vault: ami-03f0247c921dfbd80
      CPM: ami-09084aa77a3c282b1
      PVWA: ami-02542f08bc52604ab
      PSM: ami-0d26711802f24a07a
      PSMP: ami-0ebf2342790dbea18
    us-east-2:
      Vault: ami-0a5f426141ffac8c5
      CPM: ami-09fcdea2fd178f348
      PVWA: ami-0e67f5b5412fa7404
      PSM: ami-0875137ec3231ae48
      PSMP: ami-097b254bc8bcb2cb4
    eu-west-2:
      Vault: ami-04914525ad38c1ba1
      CPM: ami-08d1293c57f4be723
      PVWA: ami-0d7b53b4c71e6faa6
      PSM: ami-046b644ecf27280b6
      PSMP: ami-02d03b616e29d0f55
    eu-west-3:
      Vault: ami-0da004ec8729449b5
      CPM: ami-02f4d1d1e3aeaa8d6
      PVWA: ami-08043e4f70625d4b2
      PSM: ami-05d79f62846c0d161
      PSMP: ami-068d680635742409b
    eu-north-1:
      Vault: ami-0b88c7ea73bc7d617
      CPM: ami-09e6592a77ff3bf73
      PVWA: ami-05d63f94fa30bed2b
      PSM: ami-03a32ef9c578997bd
      PSMP: ami-034fea6a291bb1d9d
    us-west-1:
      Vault: ami-0271df178a002f414
      CPM: ami-06cc063dd0ebb460e
      PVWA: ami-0478ec3687e79973c
      PSM: ami-01b176098058da406
      PSMP: ami-03417e4496cbcc179
    us-west-2:
      Vault: ami-0e219dce6006c1f03
      CPM: ami-0fe33532115df6385
      PVWA: ami-03f31eb46a48d55e1
      PSM: ami-0a439e38c83ad453b
      PSMP: ami-0a075eca812b6d16d
    ca-central-1:
      Vault: ami-0892312d4d05bebf4
      CPM: ami-0048a30fdbd7ee7fe
      PVWA: ami-0341f309d5bdba4c2
      PSM: ami-0042d99bcc6e32bf9
      PSMP: ami-053ecd4fd5a2e5501
    eu-west-1:
      Vault: ami-0357e320b614a8c1c
      CPM: ami-0d78cd0e41f9d335d
      PVWA: ami-0654cae2abaac3e29
      PSM: ami-09d90aac4cd1b6fe3
      PSMP: ami-0eda94b6419c35ae5
    eu-central-1:
      Vault: ami-04ac45703e289ef12
      CPM: ami-06e0a23bf0a7432b2
      PVWA: ami-01a8e299f29556ea0
      PSM: ami-0f3c30dff6f7ea47c
      PSMP: ami-014d3676037f0a4b5
    ap-southeast-1:
      Vault: ami-00086633fb5e783b9
      CPM: ami-036682d7b65e52d3d
      PVWA: ami-0ddb87139f828bcc3
      PSM: ami-0bc7542884ef57300
      PSMP: ami-03f5540891b5deafa
    ap-southeast-2:
      Vault: ami-05589cdfd807a66b4
      CPM: ami-09c58cdc5b4637811
      PVWA: ami-0001f29dc50d51607
      PSM: ami-082f34eaf29901d41
      PSMP: ami-0fb6b170a42c4f489
    ap-northeast-2:
      Vault: ami-08add08c9d0d77335
      CPM: ami-0bc7664dc55c19f3c
      PVWA: ami-0ec942086a37878f3
      PSM: ami-0152cac9812be43d8
      PSMP: ami-0448e002dac851927
    ap-northeast-1:
      Vault: ami-0735c2a51811acf6c
      CPM: ami-0bd67a7e1e8bed30b
      PVWA: ami-08507f409773c8a94
      PSM: ami-09dd1aa8d07ae483e
      PSMP: ami-083da9b7713ad6761
    ap-south-1:
      Vault: ami-0f259fd5535725e67
      CPM: ami-0ff45193b121b5e37
      PVWA: ami-0823028aa60740997
      PSM: ami-0ea6dd6b3a570313e
      PSMP: ami-004fbbefe461a2a9a
    sa-east-1:
      Vault: ami-0a88c862fc102a347
      CPM: ami-01b321ee4661b6075
      PVWA: ami-0a53bd0b8d5f33f22
      PSM: ami-0d99de18cca368e15
      PSMP: ami-002d85d07709e80da
    us-gov-west-1:
      Vault: ami-0c200ca4169765f82
      CPM: ami-0527bea2bafa90ef3
      PVWA: ami-0b0d24cec3feb340a
      PSM: ami-034a3371664da2df2
      PSMP: ami-073ad5d2c38158b93
    us-gov-east-1:
      Vault: ami-0e957ca48725eefd0
      CPM: ami-036f89840b22e8f7f
      PVWA: ami-09d65ed65bd7678dd
      PSM: ami-0f62022a4843af5d6
      PSMP: ami-0562e044d4acda23b
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref LogGroup
