Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
    DeletionPolicy: Retain
  VaultCfnInitLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/CfnInitLog
    DeletionPolicy: Retain
  VaultInitLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/VaultInitLog
    DeletionPolicy: Retain
  VaultPostInstallLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: VaultMachine/VaultPostInstallLog
  ComponentsCfnInitLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/CfnInitLog
    DeletionPolicy: Retain
  CPMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/CPMConfigurationsLog
    DeletionPolicy: Retain
  CPMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/CPMRegistrationLog
    DeletionPolicy: Retain
  CPMSetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/CPMSetLocalServiceLog
    DeletionPolicy: Retain
  PSMConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PSMConfigurationsLog
    DeletionPolicy: Retain
  PSMRegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PSMRegistrationLog
    DeletionPolicy: Retain
  PVWAConfigurationsLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PVWAConfigurationsLog
    DeletionPolicy: Retain
  PVWARegistrationLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PVWARegistrationLog
    DeletionPolicy: Retain
  PVWASetLocalServiceLog:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Sub '${LogGroup}'
      LogStreamName: ComponentsMachine/PVWASetLocalServiceLog
    DeletionPolicy: Retain
  LambdaDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: SSM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
        - PolicyName: S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/*'
  StorePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Saves given password to parameter store as SecureString
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:
                  print ('The property Password must not be empty')
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
              try:
                  if event['RequestType'] == 'Delete':
                      ssmClient.delete_parameter(Name=physicalResourceId)
                      print ('Password successfully deleted. Id='+physicalResourceId)
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Create':
                      ssmClient.put_parameter(Name=physicalResourceId, Value=event['ResourceProperties']['Password'], Type='SecureString')
                      print ('The store parameter has been created. Id='+physicalResourceId)
                      response = {'SsmId': physicalResourceId}
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)


      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaDeployRole.Arn'
  DeletePasswordLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Delete password from parameter store
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse


          def lambda_handler(event, context):
              ssmClient = boto3.client('ssm')
              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      ssmClient.delete_parameter(Name=event['ResourceProperties']['key'])
                      print ('Password succesfully deleted. Id='+event['ResourceProperties']['key'])
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except ssmClient.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)

      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaDeployRole.Arn'
  StoreMasterPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'StorePasswordLambda.Arn'
      Password: !Ref 'VaultMasterPassword'
    DependsOn:
      - LambdaDeployRole
  StoreAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'StorePasswordLambda.Arn'
      Password: !Ref 'VaultAdminPassword'
    DependsOn:
      - LambdaDeployRole
  CleanMasterPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeletePasswordLambda.Arn'
      key: !GetAtt 'StoreMasterPassword.SsmId'
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - VaultMachine
  CleanAdminPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeletePasswordLambda.Arn'
      key: !GetAtt 'StoreAdminPassword.SsmId'
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - ComponentsMachine
  LambdaRemovePermissionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - '*'
        - PolicyName: KMSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                Resource:
                  - '*'
        - PolicyName: VaultBootstrapIAMPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                Resource:
                  - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWS::StackName}-*'
  RemovePermissionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Change Policies of VaultInstancesRole IAM Role
      Code:
        ZipFile: |-
          import json
          import boto3
          import uuid
          import cfnresponse
          
          def lambda_handler(event, context):
            physicalResourceId = str(uuid.uuid4())
            if 'PhysicalResourceId' in event:
              physicalResourceId = event['PhysicalResourceId']
            if event['RequestType'] == 'Create':
              try:
                print("Creating AWS CloudFormation")
                print("Start RemovePermissionLambda execution")
                client = boto3.client('iam')
                
                # Get vault role info
                vault_role = client.get_role(RoleName=event['ResourceProperties']['vault_role_name'])['Role']
                print("Retrieve IAM Role ID: {0}".format(vault_role["RoleId"]))
                
                # Delete old Policies
                list = [event['ResourceProperties']['vault_role_name'],event['ResourceProperties']['lambda_role_name']]
                inline_policies = ["VaultInstancesKMSPolicy","VaultSSMPolicy","VaultFilesBucketAccess","KMSPolicy", "VaultBootstrapIAMPolicy"]
                print("Trying to delete inline policies from {0} IAM Role".format(vault_role["RoleId"]))
                for role in list:
                  print("Delete policies in {0} IAM Role".format(role))
                  for inline_policy in inline_policies:
                    try:
                      delete = client.delete_role_policy(RoleName=role, PolicyName=inline_policy)
                      print("Delete policy: {0}".format(inline_policy))
                    except:
                      print("Didn\'t find policy: {0}".format(inline_policy))
                print("Finish to delete inline policies from {0} IAM Role".format(vault_role["RoleId"]))
  
                # Get KMS ID
                kms = boto3.client('kms', region_name=event['ResourceProperties']['region'])
                kms_arn = kms.describe_key(KeyId="alias/vault/{0}".format(event['ResourceProperties']['instance']))['KeyMetadata']['Arn']
                print("Retrieve KMS ARN: {0}".format(kms_arn))
                
                # Create inline policy
                kms_policy =  {
                  "Statement": [
                    {
                      "Action": [
                        "kms:Encrypt",
                        "kms:Decrypt"
                        ],
                        "Resource": kms_arn,
                        "Effect": "Allow"
                    }
                  ]
                }
                
                response = client.put_role_policy(RoleName=vault_role['RoleName'], PolicyName="VaultInstancesKMSPolicy", PolicyDocument=json.dumps(kms_policy))
                print("Add inline policy VaultInstancesKMSRestrictedPolicy to {0} IAM Role".format(vault_role["RoleId"]))
                
                return cfnresponse.send(event, context, cfnresponse.SUCCESS, None, {}, physicalResourceId)
              except Exception as E:
                print("Error in Lambda execution: {0}".format(E))
                return cfnresponse.send(event, context, cfnresponse.FAILED,E,{}, physicalResourceId)
            elif event['RequestType'] == 'Delete':
              print("Deleting AWS CloudFormation")
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaRemovePermissionsRole.Arn'
  RemovePermissionVault:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'RemovePermissionLambda.Arn'
      vault_role_name: !Ref 'VaultInstancesRole'
      lambda_role_name: !Ref 'LambdaRemovePermissionsRole'
      instance: !Ref 'VaultMachine'
      region: !Ref 'AWS::Region'
  VaultMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'VaultInstanceName'
      SecurityGroupIds: !Ref 'VaultInstanceSecurityGroups'
      SubnetId: !Ref 'VaultInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Vault
      InstanceType: !Ref 'VaultInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r VaultMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'VaultInstancesProfile'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - configSSMAndServerAndTagKMS
            - configServices
            - configSignal
        configSSMAndServerAndTagKMS:
          files:
            C:\CyberArk\Deployment\VaultTagKMS.ps1:
              content: |-
                [CmdletBinding()]
                param(
                  [Parameter(Mandatory = $true)] [string]$Role,
                  [Parameter(Mandatory = $true)] [string]$Region
                )
                
                . "$PSScriptRoot\Common.ps1"
                $LogFile = "C:\CyberArk\Deployment\Logs\VaultInit.log"
                
                try {
                  # Retrieve KMS Key ID
                  WriteLog -LogFile $LogFile -LogLevel "INFO" -Log "Retrieving KMS Key ID"
                  $DBParmLine = Get-Content -Path "C:\Program Files (x86)\PrivateArk\Server\Conf\dbparm.ini" | Where-Object { $_ -match 'CloudKeyUUID=' }
                  $KMSKeyID = $DBParmLine.Split('=')[1]
                  WriteLog -LogFile $LogFile -LogLevel "INFO" -Log "Retrievied KMS Key ID successfully"
                  
                  # Get Instance ID
                  $InstanceId = Invoke-WebRequest http://169.254.169.254/latest/meta-data/instance-id
                  
                  # Load AWS powershell assemblies
                  WriteLog -LogFile $LogFile -LogLevel "INFO" -Log "Loading AWS PowerShell assemblies"
                  Get-AWSPowerShellVersion | Out-Null
                  WriteLog -LogFile $LogFile -LogLevel "INFO" -Log "AWS PowerShell assemblies loaded successfully"
                
                  # Tag KMS Key with Vault instance id and enable key rotation
                  WriteLog -LogFile $LogFile -LogLevel "INFO" -Log "trying to tag KMS Key with Vault instance ID and add alias"
                  $InstanceTag = New-Object Amazon.KeyManagementService.Model.Tag
                  $InstanceTag.TagKey = "VaultInstance"
                  $InstanceTag.TagValue = $InstanceId
                  Add-KMSResourceTag -KeyId $KMSKeyID -Tag $InstanceTag -Force
                  Update-KMSKeyDescription -KeyId $KMSKeyID -Description "CyberArk Digital Vault KMS Key for Vault Instance $InstanceId" -Force
                  New-KMSAlias -TargetKeyId $KMSKeyID -AliasName "alias/vault/$InstanceId" -Force
                  WriteLog -LogFile $LogFile -LogLevel "INFO" -Log "KMS Key tagged successfully"
                  exit 0
                } catch {
                  WriteLog -LogFile $LogFile -LogLevel "ERROR" -Log $_.Exception.Message
                  exit 1
                }
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            1-configcw:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -LogGroup ${LogGroup} -CfnInitLogStream ${VaultCfnInitLogStream} -VaultInitLogStream ${VaultInitLogStream} -VaultPostInstallLogStream ${VaultPostInstallLogStream} -Region ${AWS::Region}
              waitAfterCompletion: 10
            2-restartSSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: 60
        configServices:
          commands:
            1-download:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultInit.ps1 -VaultFilesBucket ${VaultFilesBucket} -LicenseFileKey ${LicenseFile} -RecoveryPublicKey ${RecoveryPublicKey} -Region ${AWS::Region}
              waitAfterCompletion: 0
            2-postInstall:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultPostInstall.ps1 -SSMMasterPassParameterID ${StoreMasterPassword.SsmId} -SSMAdminPassParameterID ${StoreAdminPassword.SsmId} -IsPrimaryOrDR "Primary" -PrimaryVaultIP "1.1.1.1" -LicensePath "C:\CyberArk\Deployment\vaultLicense.xml" -RecoveryPublicKeyPath "C:\CyberArk\Deployment\recoveryPublic.key" -Region ${AWS::Region}
              waitAfterCompletion: 0
            3-changeKMSTag:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\VaultTagKMS.ps1 -Role ${VaultInstancesRole} -Region ${AWS::Region}
              waitAfterCompletion: 0
            4-restart:
              command: powershell.exe -Command Restart-Computer
              waitAfterCompletion: forever
        configSignal:
          commands:
            0-signalCompletion:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource VaultMachine --region ${AWS::Region}
              waitAfterCompletion: 0
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
  VaultInstancesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'VaultInstancesRole'
  ComponentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'ComponentInstanceRole'
  ComponentInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:*:*:*'
  VaultInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VaultLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreamsf
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultCfnInitLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultInitLogStream}'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:log-stream:${VaultPostInstallLogStream}'
        - PolicyName: VaultSSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreMasterPassword.SsmId}'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StoreAdminPassword.SsmId}'
        - PolicyName: VaultFilesBucketAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${LicenseFile}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}/${RecoveryPublicKey}'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${VaultFilesBucket}'
        - PolicyName: VaultInstancesKMSPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateKey
                  - kms:GenerateRandom
                  - kms:TagResource
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:EnableKeyRotation
                  - kms:UpdateKeyDescription
                  - kms:CreateAlias
                Resource: '*'
  InstancesSSMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancesSsmAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
      Roles:
        - !Ref 'ComponentInstanceRole'
  ComponentsMachine:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'ComponentsInstanceName'
      SecurityGroupIds: !Ref 'ComponentsInstanceSecurityGroups'
      SubnetId: !Ref 'ComponentsInstanceSubnetId'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - Components
      InstanceType: !Ref 'ComponentsInstanceType'
      UserData: !Base64
        Fn::Sub: |-
          <script>
          cfn-init.exe -v -s ${AWS::StackId} -r ComponentsMachine --configsets ascending --region ${AWS::Region}
          </script>
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'ComponentInstanceProfile'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - configSSMAndServer
            - configPVWA
            - configCPM
            - configPSM
            - configSignal
        configSSMAndServer:
          services:
            windows:
              AmazonSSMAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json
          commands:
            01-StartAppPool:
              command: >
                powershell -command "& {&'Import-Module' WebAdministration}"; "& {&'Start-WebAppPool'
                -Name PasswordVaultWebAccessPool}"; "& {&'Set-ItemProperty' -Path
                IIS:\AppPools\PasswordVaultWebAccessPool -Name autoStart -Value 'true'}"
              waitAfterCompletion: 0
              ignoreErrors: false
            02-RunCloudWatch-PVWA:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -Region ${AWS::Region} -LogGroup ${LogGroup} 
                -Component "PVWA" -Configuration ${PVWAConfigurationsLog} -CfnInitLogStream ${ComponentsCfnInitLogStream}
                -SetLocalService ${PVWASetLocalServiceLog} -Registration ${PVWARegistrationLog}
            03-RunCloudWatch-CPM:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -Region ${AWS::Region} -LogGroup ${LogGroup} 
                -Component "CPM" -Configuration ${CPMConfigurationsLog} -CfnInitLogStream ${ComponentsCfnInitLogStream}
                -SetLocalService ${CPMSetLocalServiceLog} -Registration ${CPMRegistrationLog}
            04-RunCloudWatch-PSM:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CloudWatch.ps1 -Region ${AWS::Region} -LogGroup ${LogGroup} 
                -Component "PSM" -Configuration ${PSMConfigurationsLog} -CfnInitLogStream ${ComponentsCfnInitLogStream}
                -SetLocalService "psm" -Registration ${PSMRegistrationLog}
        configPVWA:  
          commands:
            101-configurePVWAService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Username "PVWAReportsUser" -Services "CyberArk Scheduled Tasks"
              waitAfterCompletion: 0
            102-configuration:
              command: !Join
                - ' ' 
                - 
                  - powershell.exe -File
                  - C:\CyberArk\Deployment\PVWAConfiguration.ps1 -VaultIpAddress
                  - !GetAtt 'VaultMachine.PrivateIp'
                  - -VaultAdminUser "Administrator" -VaultPort 1858 -HostName "PVWAhost"
              waitAfterCompletion: 0
            103-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\PVWARegistration.ps1
                -VaultAdminUser "Administrator" -SSMAdminPassParameterID
                ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            104-startAppPool:
              command: >-
                powershell -Command "& {&'Import-Module' WebAdministration}"; "&
                {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}"; "&
                {&'Set-ItemProperty' -Path
                IIS:\AppPools\PasswordVaultWebAccessPool -Name autoStart -Value
                'true'}"
              waitAfterCompletion: 0
            105-CSTserviceConfig:
              command: sc config "CyberArk Scheduled Tasks" start=auto
              waitAfterCompletion: 0
        configCPM:  
          commands:
            201-configuration:
              command: !Join
                - ' ' 
                - 
                  - powershell.exe -File C:\CyberArk\Deployment\CPMConfiguration.ps1 -VaultIpAddress
                  - !GetAtt 'VaultMachine.PrivateIp'
                  - -VaultAdminUser "Administrator" -VaultPort 1858
              waitAfterCompletion: 0
            202-registration:
              command: !Sub >
                powershell.exe -File C:\CyberArk\Deployment\CPMRegistration.ps1
                -VaultAdminUser "Administrator" -SSMAdminPassParameterID
                ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            203-configureCPMService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Username "PasswordManagerUser" -Services "CyberArk Central Policy Manager Scanner"
              waitAfterCompletion: 0
            204-configureCPMService:
              command: powershell.exe -File C:\CyberArk\Deployment\Set-LocalService.ps1 -Username "PasswordManagerUser" -Services "CyberArk Password Manager"
              waitAfterCompletion: 0
            205-CPMserviceConfig:
              command: sc config "CyberArk Password Manager" start=auto
              waitAfterCompletion: 0
            206-CPMSserviceConfig:
              command: sc config "CyberArk Central Policy Manager Scanner" start=auto
              waitAfterCompletion: 0
        configPSM:  
          commands:
            301-configuration:
              command: !Join
                - ' ' 
                -  
                  - powershell.exe -File C:\CyberArk\Deployment\PSMConfiguration.ps1 -VaultIpAddress
                  - !GetAtt 'VaultMachine.PrivateIp' 
                  - -VaultAdminUser "Administrator" -VaultPort 1858
              waitAfterCompletion: 0
            303-registration:
              command: !Sub >
                  powershell.exe -File C:\CyberArk\Deployment\PSMRegistration.ps1
                  -VaultAdminUser "Administrator" -SSMAdminPassParameterID ${StoreAdminPassword.SsmId}
              waitAfterCompletion: 0
            304-PSMserviceConfig:
              command: sc config "Cyber-Ark Privileged Session Manager" start=auto
              waitAfterCompletion: 0
        configSignal:  
          commands:
            98-restart:
              command: powershell.exe -Command "Restart-Computer -Force"
              waitAfterCompletion: forever  
            99-SignalCompletion:
              command: !Sub 'cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackId} --resource ComponentsMachine --region ${AWS::Region}'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT25M
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  VaultFilesBucket:
    Type: String
    Description: Enter the name of the bucket containing the license and recovery
      public key.
  LicenseFile:
    Type: String
    Description: Enter the path of the license file within the bucket.
    Default: license.xml
  RecoveryPublicKey:
    Type: String
    Description: Enter the path of the recovery public key file within the bucket.
    Default: recpub.key
  VaultInstanceName:
    Type: String
    Description: Enter a name for the Vault instance.
    Default: CyberArk Vault
  VaultMasterPassword:
    Type: String
    Description: Enter a password for the Vault Master user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: Vault Master password must contain at least 1 lowercase
      letter, 1 uppercase letter, 1 digit and 1 special character
  RetypeMasterPassword:
    Type: String
    Description: Retype the password for the Vault Master user.
    NoEcho: true
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\*\(\)_\-+=:])(?=\S+$).{8,}$
    ConstraintDescription: Vault Administrator password must contain at least 1 lowercase
      letter, 1 uppercase letter, 1 digit and 1 special character
  RetypeAdminPassword:
    Type: String
    Description: Retype the password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
  VaultInstanceType:
    Type: String
    Description: Select the instance type of the Vault instance.
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
    Default: m4.large
  VaultInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the Vault instance.
  VaultInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the Vault instance will reside.
  ComponentsInstanceName:
    Type: String
    Description: Enter a name for the PAS Components instance.
    Default: CyberArk Components
  ComponentsInstanceType:
    Type: String
    Description: Select the instance type of the PAS Components instance.
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
    Default: m4.large
  ComponentsInstanceSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Assign Security Groups to the PAS Components instance.
  ComponentsInstanceSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select the Subnet Id where the PAS Components instance will reside.
Rules:
  PasswordConfirmation:
    Assertions:
      - Assert: !Equals
          - !Ref 'VaultMasterPassword'
          - !Ref 'RetypeMasterPassword'
        AssertDescription: The password confirmation does not match.
      - Assert: !Equals
          - !Ref 'VaultAdminPassword'
          - !Ref 'RetypeAdminPassword'
        AssertDescription: The password confirmation does not match.
  EULAAcception:
    Assertions:
      - Assert: !Equals
          - !Ref 'EULA'
          - Accept
        AssertDescription: You must accept EULA to continue.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Parameters
        Parameters:
          - EULA
          - KeyName
          - VaultFilesBucket
          - LicenseFile
          - RecoveryPublicKey
      - Label:
          default: Vault Configuration
        Parameters:
          - VaultInstanceName
          - VaultMasterPassword
          - RetypeMasterPassword
          - VaultAdminPassword
          - RetypeAdminPassword
          - VaultInstanceType
          - VaultInstanceSecurityGroups
          - VaultInstanceSubnetId
      - Label:
          default: Components Configuration
        Parameters:
          - ComponentsInstanceName
          - ComponentsInstanceType
          - ComponentsInstanceSecurityGroups
          - ComponentsInstanceSubnetId
    ParameterLabels:
      EULA:
        default: License Agreement
      KeyName:
        default: Key Pair
      VaultFilesBucket:
        default: Vault Files Bucket
      LicenseFile:
        default: License File
      RecoveryPublicKey:
        default: Recovery Public Key
      VaultInstanceName:
        default: Vault Instance Name
      VaultMasterPassword:
        default: Vault Master Password
      RetypeMasterPassword:
        default: Retype Master Password
      VaultAdminPassword:
        default: Vault Admin Password
      RetypeAdminPassword:
        default: Retype Admin Password
      VaultInstanceType:
        default: Vault Instance Type
      VaultInstanceSecurityGroups:
        default: Vault Instance Security Groups
      VaultInstanceSubnetId:
        default: Vault Instance Subnet Id
      ComponentsInstanceName:
        default: Components Instance Name
      ComponentsInstanceType:
        default: Components Instance Type
      ComponentsInstanceSecurityGroups:
        default: Components Instance Security Groups
      ComponentsInstanceSubnetId:
        default: Components Instance Subnet Id
Mappings:
  RegionMap:
    us-east-1:
      Vault: ami-0c2500a8152313412
      Components: ami-0f009bf9bea37ce56
    us-east-2:
      Vault: ami-0651f06c9ea096567
      Components: ami-0a8fb00411e0fb20c
    eu-west-2:
      Vault: ami-07515bfd47210af44
      Components: ami-0db5b486dcf8b430b
    us-west-1:
      Vault: ami-017f6cf4a4e519907
      Components: ami-0a32cb368a3151dc2
    us-west-2:
      Vault: ami-066a0a079b58b898d
      Components: ami-0acc0c0f0469c8811
    ca-central-1:
      Vault: ami-0e1657c46b4879709
      Components: ami-061edb963e615e699
    eu-west-1:
      Vault: ami-0c13c30badd167ec4
      Components: ami-0b12748418ddc4f9e
    eu-central-1:
      Vault: ami-0857d4653bc70ed8a
      Components: ami-0438c7bc2ec14b349
    ap-southeast-1:
      Vault: ami-04dffa3cbc0c7a2eb
      Components: ami-0d7173edd9f4aa4a8
    ap-southeast-2:
      Vault: ami-067da16b2b1614688
      Components: ami-029db6b34dfda1a23
    ap-northeast-2:
      Vault: ami-0da0ebf7137add23c
      Components: ami-0f7051ad64065e2c7
    ap-northeast-1:
      Vault: ami-038b5624075367ed6
      Components: ami-0cc23400d22084913
    ap-south-1:
      Vault: ami-0f473cf734303a296
      Components: ami-08231bbf59b34070c
    sa-east-1:
      Vault: ami-07ffe2d83bd424a77
      Components: ami-0c53fce94b6a2b743
    us-gov-west-1:
      Vault: ami-90c9e3f1
      Components: ami-80eedbe1
    us-gov-east-1:
      Vault: ami-00c9a6d3aafc67170
      Components: ami-04de08b2bee0dabcd
Outputs:
  CloudWatchLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref 'LogGroup'
