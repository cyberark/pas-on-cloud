AWSTemplateFormatVersion: "2010-09-09"
Description: This template handles the deployment of CyberArk PTA to an existing network infrastructure
Resources:
  DeployBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
  PTAAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !GetAtt GetLatestAMILambda.Arn
      Version: !Ref ReleaseVersion
      Component: "PTA"
      OS: "CentOS-7"
      OwnerAccountId: !Ref CyberarkAccountId
    DependsOn:
      - LambdaDeployRole
  StoreAdminPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt
        - StorePasswordLambda
        - Arn
      Password: !Ref VaultAdminPassword
    DependsOn:
      - LambdaDeployRole
  CleanAdminPassword:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt
        - DeletePasswordLambda
        - Arn
      key: !GetAtt
        - StoreAdminPassword
        - SsmId
    DependsOn:
      - LambdaDeployRole
      - StorePasswordLambda
      - PTAMachine
  ComponentInstancesSSMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ComponentInsancesSsmAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
      Roles:
        - !Ref ComponentInstanceRole
  LambdaDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: SSM
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:DeleteParameter'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
        - PolicyName: S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:DeleteObjectVersion'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DeployBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref PTALicenseBucket
                      - /*
        - PolicyName: DescribeImages
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ec2:DescribeImages'
                Resource: "*"
  ComponentInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
  ComponentInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ComponentInstanceRole
  StorePasswordLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Saves given password to parameter store as SecureString
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse

          def storePassword(name, value):
              ssmClient = boto3.client('ssm')
              return ssmClient.put_parameter(
                  Name = name,
                  Value = value,
                  Type = 'SecureString'
              )

          def deletePassword(name):
              ssmClient = boto3.client('ssm')
              return ssmClient.delete_parameter(
                  Name = name
              )

          def lambda_handler(event, context):

              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']

              if 'Password' not in event['ResourceProperties'] or not event['ResourceProperties']['Password']:
                      print ('The property Password must not be empty')
                      return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)

              try:
                  if event['RequestType'] == 'Delete':
                      deletePassword(physicalResourceId)
                      print ('Password successfully deleted. Id='+physicalResourceId)
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)

                  if event['RequestType'] == 'Create':
                      storePassword(physicalResourceId, event['ResourceProperties']['Password'])
                      print ('The store parameter has been created. Id='+physicalResourceId)
                      response = { 'SsmId': physicalResourceId }
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)

              except client.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)

      Runtime: python3.7
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt
        - LambdaDeployRole
        - Arn
  DeletePasswordLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Delete password from parameter store
      Code:
        ZipFile: |-
          import uuid
          import boto3
          import cfnresponse

          def deletePassword(name):
              ssmClient = boto3.client('ssm')
              return ssmClient.delete_parameter(
                  Name = name
              )

          def lambda_handler(event, context):

              physicalResourceId = str(uuid.uuid4())
              if 'PhysicalResourceId' in event:
                  physicalResourceId = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      deletePassword(event['ResourceProperties']['key'])
                      print ('Password succesfully deleted. Id='+event['ResourceProperties']['key'])
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                  if event['RequestType'] == 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)

              except client.exceptions.ParameterNotFound:
                  print ('Item already removed')
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
              except Exception as E:
                  print (E)
                  return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)

      Runtime: python3.7
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt
        - LambdaDeployRole
        - Arn
  GetLatestAMILambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback


          def handler(event, context):
            try:
              component = event['ResourceProperties']['Component']
              pas_ver= event['ResourceProperties']['Version']
              os_filter = event['ResourceProperties']['OS']

              ami_name = 'CyberArk PAS ' + component + ' v'+ pas_ver +'*'+ os_filter
              response = boto3.client('ec2').describe_images(
                  Owners= [event['ResourceProperties']['OwnerAccountId']],
                  Filters=[
                    {'Name': 'name', 'Values':  [ami_name]},
                  ],
              )
              amis = sorted(response['Images'],
                            key=lambda x: x['CreationDate'],
                            reverse=True)
              id = amis[0]['ImageId']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except IndexError:
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "Requested AMI not found")
            except:
              traceback.print_last()
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "An error occured, please refer to the last exception")
      Runtime: python3.6
      Handler: index.handler
      Timeout: 60
      Role: !GetAtt LambdaDeployRole.Arn
  PTAMachine:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref PTAInstanceName
      SecurityGroupIds: !Ref PTAInstanceSecurityGroups
      SubnetId: !Ref PTAInstanceSubnetId
      ImageId: !Ref PTAAmi
      InstanceType: !Ref PTAInstanceType
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -e
          cfn-init -v --stack ${AWS::StackName} --resource PTAMachine --configsets install_all --region ${AWS::Region}
          cfn-signal -e $? --stack ${AWS::StackName} --resource PTAMachine --region ${AWS::Region}
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ComponentInstanceProfile
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          install_all:
            - install_pta
        install_pta:
          commands:
            01-copylicensefrombucket:
              command: !Sub >-
                python /tmp/download-license.py ${AWS::Region} "${PTALicenseBucket}" "${LicenseFile}"
            02-addowner:
              command: >-
                sudo chown tomcat:pta_server
                /opt/tomcat/diamond-resources/license.xml
            03-setpermissions:
              command: sudo chmod 550 /opt/tomcat/diamond-resources/license.xml
            04-executeptaconfigurationscript: 
              command: !Sub >-
                sudo /tmp/register-arguments.sh "${VaultPrivateIP}" Administrator "${StoreAdminPassword.SsmId}" ${AWS::Region} "${PVWAPrivateDNS}" "${VaultTimeZone}" "${PTAServerTimeZone}" "${DRPrivateIP}"
            99-SignalCompletion:
              command: !Sub >-
                cfn-signal -e $? --stack ${AWS::StackId} --resource PTAMachine --region ${AWS::Region}
    DependsOn:
      - StoreAdminPassword
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    DeletionPolicy: Retain
Parameters:
  EULA:
    Type: String
    Description: I have read and agree to the Terms and Conditions.
    AllowedValues:
      - Accept
      - Decline
    Default: Decline
  ReleaseVersion:
    Type: String
    Description: Select an official CyberArk PAS release version.
    AllowedValues:
      - '12.6'
      - '12.2'
    Default: '12.6'
  CyberarkAccountId:
    Type: Number
    Description: Enter the CyberArk Account ID (AMI Owner account ID).
    MinValue: 100000000000
    MaxValue: 999999999999
    ConstraintDescription: Account ID must contain 12 digits
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select an existing Key Pair from your AWS account.
    ConstraintDescription: Can contain only ASCII characters.
  PTALicenseBucket:
    Type: String
    Description: Enter the name of the bucket containing the license file.
  LicenseFile:
    Type: String
    Description: Enter the path of the license file within the bucket.
    Default: license.xml
  PTAServerTimeZone:
    Type: String
    Description: >-
      Enter the time zone of the PTA Server.
      https://cyberarkdocu.azurewebsites.net/Product-Doc/OnlineHelp/PAS/Latest/en/Content/PTA/Appendix-B-Time-Zones.htm
  VaultPrivateIP:
    Type: String
    Description: Enter the IP of the Vault instance.
  DRPrivateIP:
    Type: String
    Description: >-
      Enter the IPs of the Vault DR instances, separated by comma (,).
      (Optional).
  VaultTimeZone:
    Type: String
    Description: Enter the time zone of the Vault Server.
  VaultAdminUser:
    Type: String
    Description: Enter the Vault Administrator user.
    Default: Administrator
    MinLength: 8
  VaultAdminPassword:
    Type: String
    Description: Enter a password for the Vault Administrator user.
    NoEcho: true
    MinLength: 8
  PVWAPrivateDNS:
    Type: String
    Description: Enter the private DNS of the PVWA instance.
  PTAInstanceName:
    Type: String
    Description: Enter a name for the PTA instance.
    Default: CyberArk PTA
  PTAInstanceType:
    Type: String
    Description: Select the instance type of the PTA instance.
    AllowedValues:
      - m5.2xlarge
      - m5.4xlarge
    Default: m5.2xlarge
  PTAInstanceSecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: Assign Security Groups to the PTA instance.
  PTAInstanceSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Select the Subnet Id where the PTA instance will reside.
Rules:
  EULAAcception:
    Assertions:
      - Assert: !Equals
          - !Ref EULA
          - Accept
        AssertDescription: You must accept EULA to continue.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: General parameters
        Parameters:
          - EULA
          - ReleaseVersion
          - CyberarkAccountId
          - KeyName
      - Label:
          default: Vault and DR information
        Parameters:
          - VaultPrivateIP
          - DRPrivateIP
          - VaultTimeZone
          - VaultAdminUser
          - VaultAdminPassword
          - PVWAPrivateDNS
      - Label:
          default: PTA configuration
        Parameters:
          - PTALicenseBucket
          - LicenseFile
          - PTAInstanceName
          - PTAServerTimeZone
          - PTAInstanceType
          - PTAInstanceSecurityGroups
          - PTAInstanceSubnetId
    ParameterLabels:
      EULA:
        default: License Agreement
      ReleaseVersion:
        default: CyberArk PAS Release Version
      CyberarkAccountId:
        default: CyberArk Account ID
      KeyName:
        default: Key Pair
      VaultPrivateIP:
        default: Vault Private IP
      DRPrivateIP:
        default: Vault DR Private IP
      VaultTimeZone:
        default: Vault Time Zones
      VaultAdminUser:
        default: Vault Admin User
      VaultAdminPassword:
        default: Vault Admin Password
      PVWAPrivateDNS:
        default: PVWA Instance private DNS
      PTALicenseBucket:
        default: PTA License Bucket
      LicenseFile:
        default: License File
      PTAInstanceName:
        default: PTA Instance Name
      PTAServerTimeZone:
        default: PTA Server Time Zone
      PTAInstanceType:
        default: PTA Instance Type
      PTAInstanceSecurityGroups:
        default: PTA Instance Security Groups
      PTAInstanceSubnetId:
        default: PTA Instance Subnet Id
