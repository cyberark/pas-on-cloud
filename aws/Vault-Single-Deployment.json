{
    "Resources": {
        "LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 30
            },
            "DeletionPolicy": "Retain"
        },
        "DeployBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            },
            "Condition": "EULACondition"
        },
        "DeployBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "DeployBucket"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "LambdaDeployRole",
                                        "Arn"
                                    ]
                                }
                            },
                            "Action": [
                                "s3:PutObject",
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        },
                        {
                            "Sid": "DenyUnEncryptedObjectUploads",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:PutObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "StringNotEquals": {
                                    "s3:x-amz-server-side-encryption": "AES256"
                                }
                            }
                        },
                        {
                            "Sid": " DenyUnEncryptedInflightOperations",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": false
                                }
                            }
                        }
                    ]
                }
            },
            "Condition": "EULACondition"
        },
        "LambdaDeployRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "CloudWatch",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "EULACondition"
        },
        "StorePasswordLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Encrypts given string and saves chipper to bucket",
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import uuid",
                                "import boto3",
                                "import cfnresponse",
                                "",
                                "def createFile(bucket, file, body):",
                                "    s3Client = boto3.client('s3')",
                                "    return s3Client.put_object(",
                                "        Bucket = bucket,",
                                "        Key = file,",
                                "        ServerSideEncryption = 'AES256',",
                                "        Body = body",
                                "    )",
                                "",
                                "def deleteFile(bucket, file):",
                                "    s3Client = boto3.client('s3')",
                                "    return s3Client.delete_object(",
                                "        Bucket = bucket,",
                                "        Key = file",
                                "    )",
                                "",
                                "def lambda_handler(event, context):",
                                "",
                                "    physicalResourceId = str(uuid.uuid4())",
                                "    if 'PhysicalResourceId' in event:",
                                "        physicalResourceId = event['PhysicalResourceId']",
                                "",
                                "    for key in ['PlainText', 'BucketId']:",
                                "        if key not in event['ResourceProperties'] or not event['ResourceProperties'][key]:",
                                "            print 'The properties PlainText and BucketId must not be empty'",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)",
                                "",
                                "    try:",
                                "        if event['RequestType'] == 'Delete':",
                                "            deleteFile(event['ResourceProperties']['BucketId'], physicalResourceId)",
                                "            print 'The secret file deleted'",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                                "",
                                "        if event['RequestType'] == 'Create':",
                                "            createFile(event['ResourceProperties']['BucketId'], physicalResourceId, event['ResourceProperties']['PlainText'])",
                                "            print 'The secret file created'",
                                "            response = { 'FileId': physicalResourceId }",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)",
                                "",
                                "    except Exception as E:",
                                "        print E",
                                "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaDeployRole",
                        "Arn"
                    ]
                }
            },
            "Condition": "EULACondition"
        },
        "DeletePasswordLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Delete file from s3 bucket",
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import uuid",
                                "import boto3",
                                "import cfnresponse",
                                "",
                                "def DeleteFile(bucket, filePath):",
                                "    s3Client = boto3.client('s3', config= boto3.session.Config(signature_version='s3v4'))",
                                "    response = s3Client.delete_object(Bucket = bucket, Key = filePath)",
                                "    print response",
                                "",
                                "def lambda_handler(event, context):",
                                "",
                                "    physicalResourceId = str(uuid.uuid4())",
                                "    if 'PhysicalResourceId' in event:",
                                "        physicalResourceId = event['PhysicalResourceId']",
                                "    ",
                                "    try:",
                                "        if event['RequestType'] == 'Create':",
                                "            DeleteFile(event['ResourceProperties']['bucket'], event['ResourceProperties']['key'])",
                                "            print 'File Deleted'",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                                "        if event['RequestType'] == 'Delete':",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                                "",
                                "    except Exception as E:",
                                "        print E",
                                "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaDeployRole",
                        "Arn"
                    ]
                }
            },
            "Condition": "EULACondition"
        },
        "StoreMasterPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultMasterPassword"
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
        "StoreAdminPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultAdminPassword"
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
        "CleanMasterPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DeletePasswordLambda",
                        "Arn"
                    ]
                },
                "bucket": {
                    "Ref": "DeployBucket"
                },
                "key": {
                    "Fn::GetAtt": [
                        "StoreMasterPassword",
                        "FileId"
                    ]
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket",
                "VaultMachine"
            ]
        },
        "CleanAdminPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DeletePasswordLambda",
                        "Arn"
                    ]
                },
                "bucket": {
                    "Ref": "DeployBucket"
                },
                "key": {
                    "Fn::GetAtt": [
                        "StoreAdminPassword",
                        "FileId"
                    ]
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket",
                "VaultMachine"
            ]
        },
        "CleanDRPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DeletePasswordLambda",
                        "Arn"
                    ]
                },
                "bucket": {
                    "Ref": "DeployBucket"
                },
                "key": {
                    "Fn::GetAtt": [
                        "StoreDRPassword",
                        "FileId"
                    ]
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket",
                "VaultMachine"
            ]
        },
        "VaultInstancesProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
        "VaultInstancesRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    { "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM" }
                ],
                "Policies": [
                    {
                        "PolicyName": "LogRolePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource": [
                                        { "Fn::Sub": "arn:${AWS::Partition}:logs:*:*:*" }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
        "VaultMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "VaultInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "VaultInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "VaultInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Vault"
                    ]
                },
                "InstanceType": {
                    "Ref": "VaultInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r VaultMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "  --resource VaultMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "VaultInstancesProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "{",
                                            "  \"IsEnabled\" : true,",
                                            "  \"EngineConfiguration\" : {",
                                            "    \"PollInterval\" : \"00:00:05\",",
                                            "    \"Components\" : [",
                                            "    {",
                                            "      \"Id\" : \"EC2ConfigLog\",",
                                            "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                            "      \"Parameters\": {",
                                            "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                                            "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                                            "        \"Encoding\": \"ASCII\",",
                                            "        \"Filter\": \"EC2ConfigLog.txt\",",
                                            "        \"CultureName\": \"en-US\",",
                                            "        \"TimeZoneKind\": \"UTC\"",
                                            "      }",
                                            "    },",
                                            "    {",
                                            "      \"Id\": \"CfnInitLog\",",
                                            "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                            "      \"Parameters\": {",
                                            "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                            "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                            "        \"Encoding\": \"ASCII\",",
                                            "        \"Filter\": \"cfn-init.log\",",
                                            "        \"CultureName\": \"en-US\",",
                                            "        \"TimeZoneKind\": \"Local\"",
                                            "      }",
                                            "    },",
                                            "    {",
                                            "      \"Id\": \"CfnInitCmdLog\",",
                                            "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                            "      \"Parameters\": {",
                                            "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                            "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                            "        \"Encoding\": \"ASCII\",",
                                            "        \"Filter\": \"cfn-init-cmd.log\",",
                                            "        \"CultureName\": \"en-US\",",
                                            "        \"TimeZoneKind\": \"Local\"",
                                            "      }",
                                            "    },",
                                            "    {",
                                            "      \"Id\": \"CfnWireLog\",",
                                            "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                            "      \"Parameters\": {",
                                            "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                                            "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                                            "        \"Encoding\": \"ASCII\",",
                                            "        \"Filter\": \"cfn-wire.log\",",
                                            "        \"CultureName\": \"en-US\",",
                                            "        \"TimeZoneKind\": \"Local\"",
                                            "      }",
                                            "    },",
                                            "    {",
                                            "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                                            "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                            "      \"Parameters\": {",
                                            "        \"AccessKey\": \"\",",
                                            "        \"SecretKey\": \"\",",
                                            {
                                                "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                            },
                                            {
                                                "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                            },
                                            "        \"LogStream\": \"{instance_id}/EC2ConfigLog\"",
                                            "      }",
                                            "    },",
                                            "    {",
                                            "      \"Id\": \"CloudWatchCfnInitLog\",",
                                            "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                            "      \"Parameters\": {",
                                            "        \"AccessKey\": \"\",",
                                            "        \"SecretKey\": \"\",",
                                            {
                                                "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                            },
                                            {
                                                "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                            },
                                            "        \"LogStream\": \"{instance_id}/CfnInitLog\"",
                                            "      }",
                                            "    },",
                                            "    {",
                                            "      \"Id\": \"CloudWatchCfnInitCmdLog\",",
                                            "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                            "      \"Parameters\": {",
                                            "        \"AccessKey\": \"\",",
                                            "        \"SecretKey\": \"\",",
                                            {
                                                "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                            },
                                            {
                                                "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                            },
                                            "        \"LogStream\": \"{instance_id}/CfnInitCmdLog\"",
                                            "      }",
                                            "    },",
                                            "    {",
                                            "      \"Id\": \"CloudWatchCfnWireLog\",",
                                            "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                                            "      \"Parameters\": {",
                                            "        \"AccessKey\": \"\",",
                                            "        \"SecretKey\": \"\",",
                                            {
                                                "Fn::Sub": "        \"Region\": \"${AWS::Region}\","
                                            },
                                            {
                                                "Fn::Sub": "        \"LogGroup\": \"${LogGroup}\","
                                            },
                                            "        \"LogStream\": \"{instance_id}/CfnWireLog\"",
                                            "      }",
                                            "    }],",
                                            "    \"Flows\": {",
                                            "      \"Flows\": [",
                                            "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                                            "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                                            "        \"CfnInitCmdLog,CloudWatchCfnInitCmdLog\",",
                                            "        \"CfnWireLog,CloudWatchCfnWireLog\"",
                                            "      ]",
                                            "    }",
                                            "  }",
                                            "}"
                                        ]
                                    ]
                                }
                            },
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import boto3\n",
                                            "import sys\n",
                                            "import subprocess\n",
                                            "\n",
                                            "def fetchPassword(bucket,filePath):\n",
                                            "\ts3Client = boto3.client('s3', region_name='",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "', config= boto3.session.Config(signature_version='s3v4'))\n",
                                            "\tobjectResponse = s3Client.get_object(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath\n",
                                            "\t)\n",
                                            "\treturn objectResponse['Body'].read()\n",
                                            "\n",
                                            "def downloadFile(bucket,filePath,target):\n",
                                            "\ts3Client = boto3.client('s3', region_name='",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "')\n",
                                            "\ts3Client.download_file(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath,\n",
                                            "\t\tFilename = target\n",
                                            "\t)\n",
                                            "\treturn target\n",
                                            "\n",
                                            "masterp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreMasterPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "adminp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "drp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreDRPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "\n",
                                            "licensef = downloadFile('",
                                            {
                                                "Ref": "VaultFilesBucket"
                                            },
                                            "','",
                                            {
                                                "Ref": "LicenseFile"
                                            },
                                            "','C:\\\\vaultLicense.xml')\n",
                                            "publickeyf = downloadFile('",
                                            {
                                                "Ref": "VaultFilesBucket"
                                            },
                                            "','",
                                            {
                                                "Ref": "RecoveryPublicKey"
                                            },
                                            "','C:\\\\recoveryPublic.key')\n",
                                            "\n",
                                            "sys.exit(subprocess.call([",
                                            "'C:\\\\Program files (x86)\\\\PrivateArk\\\\Server\\\\CAVaultManager.exe',",
                                            "'PostInstall',",
                                            "'/AdminPass',",
                                            "adminp,",
                                            "'/MasterPass',",
                                            "masterp,",
                                            "'/RecPub',",
                                            "publickeyf,",
                                            "'/IsPrimaryOrDR',",
                                            "'Primary',",
                                            "'/PrimaryVaultIP',",
                                            "'1.1.1.1',",
                                            "'/DRPassword',",
                                            "drp,",
                                            "'/EnableFailOver',",
                                            "'/LicensePath',",
                                            "licensef,",
                                            "'/AcceptEULA',",
                                            "'yes',",
                                            "'/KMSRegion','",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "']))\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services": {
                            "windows": {
                                "AmazonSSMAgent": {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : ["C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json"]
                                }
                            }
                        },
                        "commands": {
                            "1-restartSSM": {
                                "command": "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                                "waitAfterCompletion": "30",
                                "ignoreErrors": "true"
                            },
                            "2-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
                                "waitAfterCompletion": "0",
                                "ignoreErrors": "false"
                            },
                            "3-ChangeHostName": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command Rename-Computer -NewName ",
                                            {
                                                "Ref": "VaultHostName"
                                            },
                                            " -Force -Restart"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever",
                                "ignoreErrors": "false"
                            },
                            "99-SignalCompletion": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cfn-signal.exe -e %ERRORLEVEL% ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "         --resource VaultMachine ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DependsOn": [
                "StoreMasterPassword",
                "StoreAdminPassword"
            ],
            "Condition": "",
            "DeletionPolicy": "Retain"
        },
        "StoreDRPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultAdminPassword"
                }
            },
            "Condition": "",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
        "VaultInstancesKMSPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultInstancesKMSAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:Encrypt",
                                "kms:Decrypt"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
        "VaultInstancesS3VaultFilesBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultFilesBucketAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":s3:::",
                                        {
                                            "Ref": "VaultFilesBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition"
        },
        "VaultInstancesS3DeployBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultInsancesDeployBucketAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition"
        },
        "VaultBootstrapKMSPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultBootstrapKMSAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:CreateKey",
                                "kms:GenerateRandom"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            }
        }
    },
    "Parameters": {
        "EULA": {
            "Type": "String",
            "Description": "I have read and agree to the Terms and Conditions.",
            "AllowedValues": [
                "Accept",
                "Decline"
            ],
            "Default": "Decline"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Select an existing Key Pair from your AWS account.",
            "ConstraintDescription": "Can contain only ASCII characters."
        },
        "VaultFilesBucket": {
            "Type": "String",
            "Description": "Enter the name of the bucket containing the license and recovery public key."
        },
        "LicenseFile": {
            "Type": "String",
            "Description": "Enter the path of the license file within the bucket.",
            "Default": "license.xml"
        },
        "RecoveryPublicKey": {
            "Type": "String",
            "Description": "Enter the path of the recovery public key file within the bucket.",
            "Default": "recpub.key"
        },
        "VaultMasterPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault Master user.",
            "NoEcho": true,
            "MinLength": 8,
            "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
            "ConstraintDescription": "Vault Master password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
        },
        "RetypeMasterPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault Master user.",
            "NoEcho": true,
            "MinLength": 8
        },
        "VaultAdminPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault Administrator user.",
            "NoEcho": true,
            "MinLength": 8,
            "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
            "ConstraintDescription": "Vault Administrator password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
        },
        "RetypeAdminPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault Administrator user.",
            "NoEcho": true,
            "MinLength": 8
        },
        "VaultInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the Vault instance.",
            "Default": "CyberArk Vault"
        },
        "VaultHostName": {
            "Type": "String",
            "Description": "Enter the host name for the Vault instance.",
            "MinLength": 4
        },
        "VaultInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the Vault instance.",
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "m4.large"
        },
        "VaultInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the Vault instance."
        },
        "VaultInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the Vault instance will reside."
        }
    },
    "Conditions": {
        "EULACondition": {
            "Fn::Equals": [
                "Accept",
                {
                    "Ref": "EULA"
                }
            ]
        }
    },
    "Rules": {
        "PasswordConfirmation": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "VaultMasterPassword"
                            },
                            {
                                "Ref": "RetypeMasterPassword"
                            }
                        ]
                    },
                    "AssertDescription": "The password confirmation does not match."
                },
                {
                    "Assert": {
                        "Fn::Equals": [
                            {
                                "Ref": "VaultAdminPassword"
                            },
                            {
                                "Ref": "RetypeAdminPassword"
                            }
                        ]
                    },
                    "AssertDescription": "The password confirmation does not match."
                }
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General parameters"
                    },
                    "Parameters": [
                        "EULA",
                        "KeyName",
                        "VaultFilesBucket",
                        "LicenseFile",
                        "RecoveryPublicKey"
                    ]
                },
                {
                    "Label": {
                        "default": "Vault information"
                    },
                    "Parameters": [
                        "VaultAdminPassword",
                        "RetypeAdminPassword",
                        "VaultMasterPassword",
                        "RetypeMasterPassword",
                        "VaultInstanceName",
                        "VaultHostName",
                        "VaultInstanceType",
                        "VaultInstanceSecurityGroups",
                        "VaultInstanceSubnetId"
                    ]
                }
            ],
            "ParameterLabels": {
                "EULA": {
                    "default": "License Agreement"
                },
                "KeyName": {
                    "default": "Key Pair"
                },
                "VaultFilesBucket": {
                    "default": "Vault Files Bucket"
                },
                "LicenseFile": {
                    "default": "License File"
                },
                "RecoveryPublicKey": {
                    "default": "Recovery Public Key"
                },
                "VaultMasterPassword": {
                    "default": "Vault Master Password"
                },
                "RetypeMasterPassword": {
                    "default": "Retype Master Password"
                },
                "VaultAdminPassword": {
                    "default": "Vault Admin Password"
                },
                "RetypeAdminPassword": {
                    "default": "Retype Admin Password"
                },
                "VaultInstanceName": {
                    "default": "Vault Instance Name"
                },
                "VaultHostName": {
                    "default": "Vault Host Name"
                },
                "VaultInstanceType": {
                    "default": "Vault Instance Type"
                },
                "VaultInstanceSecurityGroups": {
                    "default": "Vault Instance Security Groups"
                },
                "VaultInstanceSubnetId": {
                    "default": "Vault Instance Subnet Id"
                }
            }
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "Vault": "ami-0f5ec5156d710a17d",
                "Components": "ami-0b1a58bb5b5a78b3b",
                "CPM": "ami-04297c47b96216bc5",
                "PVWA": "ami-09e356fcd13ab5322",
                "PSM": "ami-041d5a44246c242d6",
                "PSMP": "ami-0defaf6be121916f3"
            },
            "eu-west-2": {
                "Vault": "ami-074ee03bfbfff5fda",
                "Components": "ami-0c92618583f701176",
                "CPM": "ami-079a10f6ba5c4eeb4",
                "PVWA": "ami-046e947dcae85aafb",
                "PSM": "ami-0e6d2cea1cf1d0275",
                "PSMP": "ami-07f89768f972c452d"
            },
            "us-west-1": {
                "Vault": "ami-07299e5004f82cd23",
                "Components": "ami-0c5a6a83a10cb26f6",
                "CPM": "ami-07c541154a7e96144",
                "PVWA": "ami-097c5f4e826713cdc",
                "PSM": "ami-05d0a3a64d916a9ac",
                "PSMP": "ami-05dc3895953bbb30a"
            },
            "us-west-2": {
                "Vault": "ami-04bcd462788163d5e",
                "Components": "ami-03ba37302025864d6",
                "CPM": "ami-0c5cb23b443a850cd",
                "PVWA": "ami-072e7e3ea1b3a8c66",
                "PSM": "ami-09044a911cd7607d6",
                "PSMP": "ami-0e385d7a54dd97c29"
            },
            "ca-central-1": {
                "Vault": "ami-031efdcf451f76851",
                "Components": "ami-0c4cfb708d8b6eb90",
                "CPM": "ami-07794b680287e83f7",
                "PVWA": "ami-08ab8db5ba0c00f78",
                "PSM": "ami-0560ae7636022d241",
                "PSMP": "ami-0a3770ee62a03ae54"
            },
            "eu-west-1": {
                "Vault": "ami-055875a33d1855454",
                "Components": "ami-0929c8dfe71e7caa6",
                "CPM": "ami-020e9f9fbc526c078",
                "PVWA": "ami-0e94dfc838d034ac6",
                "PSM": "ami-098a84a8de32990bd",
                "PSMP": "ami-07e5542d089692bc2"
            },
            "eu-central-1": {
                "Vault": "ami-070990fb0a4adcb1c",
                "Components": "ami-0b7366d5a32014f5f",
                "CPM": "ami-04fece7e673892d18",
                "PVWA": "ami-0d78264adddbf0e09",
                "PSM": "ami-0d7a9a6ebd8620ba7",
                "PSMP": "ami-0552713509028f263"
            },
            "ap-southeast-1": {
                "Vault": "ami-0adec27e3d97acd46",
                "Components": "ami-05943d8fc0385ac36",
                "CPM": "ami-0b23b9f2a11c03e5e",
                "PVWA": "ami-0000bd3a98e040b6d",
                "PSM": "ami-0e5b9367ec4cd4d82",
                "PSMP": "ami-029e0bb6069e7afd8"
            },
            "ap-southeast-2": {
                "Vault": "ami-076c51f5281dc1139",
                "Components": "ami-0bd6311d26ddb7c8e",
                "CPM": "ami-0a8ef23737b1ba7f0",
                "PVWA": "ami-0c1b309ab91825a56",
                "PSM": "ami-00da2f855a0ae8a3a",
                "PSMP": "ami-0b33117017a0627ac"
            },
            "ap-northeast-2": {
                "Vault": "ami-0095711fbd0234bb5",
                "Components": "ami-00c130264e5feba9e",
                "CPM": "ami-056f7261892b501f8",
                "PVWA": "ami-09772e4a0f0d37718",
                "PSM": "ami-00d3b879e3daaded2",
                "PSMP": "ami-0bee3849042c5f67e"
            },
            "ap-northeast-1": {
                "Vault": "ami-023a9797d305d37cd",
                "Components": "ami-031857c6252af5e59",
                "CPM": "ami-042a9b4c302b117da",
                "PVWA": "ami-0c6e1d4aa4c75ff02",
                "PSM": "ami-05724a67e503a9513",
                "PSMP": "ami-04e8a59042a5e181b"
            },
            "ap-south-1": {
                "Vault": "ami-094b09c2952027426",
                "Components": "ami-03793b4dca2f75186",
                "CPM": "ami-0ddb8f72eaacc45ef",
                "PVWA": "ami-0dd19ebb4d09508cc",
                "PSM": "ami-0231d3b20edbcfadc",
                "PSMP": "ami-0f64dbebffa1acdca"
            },
            "sa-east-1": {
                "Vault": "ami-0f63a29405c49eac9",
                "Components": "ami-0ecd0542b88a4833c",
                "CPM": "ami-09674547d0d8cc81a",
                "PVWA": "ami-01a3f3486b3326c0b",
                "PSM": "ami-0e38b8a579840237e",
                "PSMP": "ami-04ccb81bb661e9db7"
            },
            "us-gov-west-1": {
                "Vault": "ami-815ac4e0",
                "Components": "ami-875ac4e6",
                "CPM": "ami-875ac4e6",
                "PVWA": "ami-875ac4e6",
                "PSM": "ami-875ac4e6",
                "PSMP": "ami-ba5ac4db"
            }
        }
    },
    "Outputs": {
        "CloudWatchLogGroupName": {
            "Description": "The name of the CloudWatch log group",
            "Value": {
                "Ref": "LogGroup"
            }
        }
    }
}


